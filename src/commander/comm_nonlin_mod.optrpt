Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_nonlin_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_nonlin_mod._) [1/2=50.0%] comm_nonlin_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_nonlin_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_nonlin_mod._] comm_nonlin_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_NONLIN_MOD::SAMPLE_NONLIN_PARAMS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_NONLIN_MOD::SAMPLE_NONLIN_PARAMS) [2/2=100.0%] comm_nonlin_mod.f90(71,14)
  -> EXTERN: (88,10) wall_time_
  -> EXTERN: (92,27) COMPUTE_RESIDUAL
  -> EXTERN: (93,8) for_dealloc_allocatable
  -> EXTERN: (93,8) for_realloc_lhs
  -> INDIRECT-: (94,13)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$RES$54_V$312c.0.2))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (99,5) for_alloc_allocatable
  -> EXTERN: (99,5) for_check_mult_overflow64
  -> INDIRECT-: (103,16)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (107,16)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (120,15) for_trim
  -> EXTERN: (120,29) for_cpstr
  -> EXTERN: (122,17) for_check_mult_overflow64
  -> EXTERN: (122,17) for_alloc_allocatable
  -> EXTERN: (123,17) for_realloc_lhs
  -> EXTERN: (123,17) for_dealloc_allocatable
  -> INDIRECT-: (123,35)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[7(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (124,17) for_realloc_lhs
  -> EXTERN: (125,17) for_dealloc_allocatable
  -> EXTERN: (130,24) strcmp
  -> EXTERN: (132,34) for_write_seq_lis_xmit
  -> EXTERN: (132,34) for_write_seq_lis_xmit
  -> EXTERN: (132,34) for_write_seq_lis_xmit
  -> EXTERN: (132,34) for_write_seq_lis
  -> EXTERN: (132,61) for_trim
  -> EXTERN: (132,81) for_trim
  -> EXTERN: (134,34) for_write_seq_lis
  -> EXTERN: (134,34) for_write_seq_lis_xmit
  -> EXTERN: (134,34) for_write_seq_lis_xmit
  -> EXTERN: (134,34) for_write_seq_lis_xmit
  -> EXTERN: (134,61) for_trim
  -> EXTERN: (134,81) for_trim
  -> EXTERN: (135,19) __resetsp_inlined
  -> EXTERN: (135,19) UPDATE_STATUS
  -> EXTERN: (135,19) __getsp_inlined
  -> EXTERN: (135,60) for_trim
  -> EXTERN: (135,80) for_concat
  -> EXTERN: (135,80) _alloca
  -> EXTERN: (135,83) for_trim
  -> EXTERN: (172,33) strcmp
  -> EXTERN: (178,29) CONSTRUCTOR_MAPINFO
  -> EXTERN: (180,25) SMOOTH_MAP
  -> EXTERN: (193,17) for_write_seq_lis
  -> EXTERN: (194,22) mpi_finalize_
  -> EXTERN: (195,17) for_stop_core
  -> EXTERN: (199,26) CONSTRUCTOR_MAPINFO
  -> EXTERN: (201,22) __getsp_inlined
  -> EXTERN: (201,22) _alloca
  -> EXTERN: (201,22) SMOOTH_MAP
  -> EXTERN: (201,22) __resetsp_inlined
  -> EXTERN: (205,26) CONSTRUCTOR_MAPINFO
  -> EXTERN: (207,22) __getsp_inlined
  -> EXTERN: (207,22) _alloca
  -> EXTERN: (207,22) SMOOTH_MAP
  -> EXTERN: (207,22) __resetsp_inlined
  -> EXTERN: (219,14) for_alloc_allocatable
  -> EXTERN: (219,14) for_check_mult_overflow64
  -> EXTERN: (223,29) CONSTRUCTOR_MAPINFO
  -> EXTERN: (225,25) __getsp_inlined
  -> EXTERN: (225,25) _alloca
  -> EXTERN: (225,25) SMOOTH_MAP
  -> EXTERN: (225,25) __resetsp_inlined
  -> EXTERN: (229,29) CONSTRUCTOR_MAPINFO
  -> EXTERN: (231,25) SMOOTH_MAP
  -> EXTERN: (231,25) _alloca
  -> EXTERN: (231,25) __getsp_inlined
  -> EXTERN: (231,25) __resetsp_inlined
  -> INDIRECT-: (240,16)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[13(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (243,24) strcmp
  -> INDIRECT-: (248,22)  (*((P64*) *((P64*) (&comm_nonlin_mod_mp_sample_nonlin_params_$C$_258$63_V$37a2.0.2->COMM_DIFFUSE_COMP$X_SMOOTH$34_V$ce5 + 56(SI64)))))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (255,28)  (*((P64*) *((P64*) (&((MAP_PTR$P$17_V$824 *)comm_nonlin_mod_mp_sample_nonlin_params_$C$_258$63_V$37a2.0.2->COMM_DIFFUSE_COMP$THETA_SMOOTH$39_V$e01)[(EXPR_CONV.SI32.SI64(comm_nonlin_mod_mp_sample_nonlin_params_$K_V$3172.0.2)), l:(comm_nonlin_mod_mp_sample_nonlin_params_$C$_258$63_V$37a2.0.2->COMM_DIFFUSE_COMP$THETA_SMOOTH$39_V$e0a)[0(SI32), l:0(SI64)]] + 56(SI64)))))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (259,45) for_finalize
  -> EXTERN: (259,45) for_deallocate_all
  -> INDIRECT-: (263,25)  (*((P64*) *((P64*) (&((MAP_PTR$P$17_V$e16 *)comm_diffuse_comp_mod_mp_res_smooth__V$3095)[(EXPR_CONV.SI32.SI64(comm_nonlin_mod_mp_sample_nonlin_params_$I_V$3174.0.2)), l:comm_diffuse_comp_mod_mp_res_smooth__V$309e[0(SI32), l:0(SI64)]] + 56(SI64)))))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (272,20) for_check_mult_overflow64
  -> EXTERN: (272,20) for_alloc_allocatable
  -> EXTERN: (273,29) CONSTRUCTOR_MAPINFO
  -> EXTERN: (275,25) __getsp_inlined
  -> EXTERN: (275,25) _alloca
  -> EXTERN: (275,25) SMOOTH_MAP
  -> EXTERN: (275,25) __resetsp_inlined
  -> EXTERN: (278,20) for_dealloc_allocatable
  -> EXTERN: (278,20) for_realloc_lhs
  -> EXTERN: (278,20) _alloca
  -> EXTERN: (278,20) __getsp_inlined
  -> EXTERN: (278,20) __resetsp_inlined
  -> INDIRECT-: (279,25)  (*((P64*) *((P64*) (&((MAP_PTR$P$17_V$824 *)comm_nonlin_mod_mp_sample_nonlin_params_$C$_258$63_V$37a2.0.2->COMM_DIFFUSE_COMP$THETA_SMOOTH$39_V$e01)[(EXPR_CONV.SI32.SI64(comm_nonlin_mod_mp_sample_nonlin_params_$J_V$3173.0.2)), l:(comm_nonlin_mod_mp_sample_nonlin_params_$C$_258$63_V$37a2.0.2->COMM_DIFFUSE_COMP$THETA_SMOOTH$39_V$e0a)[0(SI32), l:0(SI64)]] + 56(SI64)))))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (280,20) for_finalize
  -> EXTERN: (280,20) for_deallocate_all
  -> EXTERN: (284,19) UPDATE_STATUS
  -> EXTERN: (284,19) __getsp_inlined
  -> EXTERN: (284,19) __resetsp_inlined
  -> EXTERN: (284,59) for_trim
  -> EXTERN: (284,79) for_concat
  -> EXTERN: (284,79) _alloca
  -> EXTERN: (284,82) for_trim
  -> EXTERN: (289,15) for_trim
  -> EXTERN: (289,29) for_cpstr
  -> EXTERN: (291,17) for_check_mult_overflow64
  -> EXTERN: (291,17) for_alloc_allocatable
  -> EXTERN: (292,17) for_realloc_lhs
  -> EXTERN: (292,17) for_dealloc_allocatable
  -> INDIRECT-: (292,35)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[7(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (293,17) for_realloc_lhs
  -> EXTERN: (294,17) for_dealloc_allocatable
  -> INDIRECT-: (305,13)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (307,5) for_dealloc_allocatable
  -> EXTERN: (315,13) SAMPLE_GAIN
  -> INDIRECT-: (323,16)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[15(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (324,16)  (*((P64*) comm_nonlin_mod_mp_sample_nonlin_params_$C$49_V$30d2.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (328,10) wall_time_
  -> EXTERN: (329,25) for_write_seq_lis
  -> EXTERN: (329,25) for_write_seq_lis_xmit
  -> EXTERN: (331,3) for_dealloc_allocatable
  -> EXTERN: (331,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_nonlin_mod.f90(91,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_nonlin_mod.f90(93,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (93:8) and RES(:,:) (93:8)
      remark #17106: parallel dependence: assumed ANTI dependence between RES(:,:) (93:8) and data_(i,:,:) (93:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (93:8) and RES(:,:) (93:8)
      remark #15346: vector dependence: assumed ANTI dependence between RES(:,:) (93:8) and data_(i,:,:) (93:8)

      LOOP BEGIN at comm_nonlin_mod.f90(93,8)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (93:8) and RES(:,:) (93:8)
         remark #17106: parallel dependence: assumed ANTI dependence between RES(:,:) (93:8) and data_(i,:,:) (93:8)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (93:8) and RES(:,:) (93:8)
         remark #15346: vector dependence: assumed ANTI dependence between RES(:,:) (93:8) and data_(i,:,:) (93:8)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(93,8)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(106,12)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <C(2,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.207
   remark #15300: LOOP WAS VECTORIZED
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 11.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(106,12)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.261
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(106,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(122,17)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_nonlin_mod.f90(123,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (123:17) and at (123:17)
      remark #17106: parallel dependence: assumed ANTI dependence between at (123:17) and M(:,:) (123:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (123:17) and at (123:17)
      remark #15346: vector dependence: assumed ANTI dependence between at (123:17) and M(:,:) (123:17)

      LOOP BEGIN at comm_nonlin_mod.f90(123,17)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (123:17) and at (123:17)
         remark #17106: parallel dependence: assumed ANTI dependence between at (123:17) and M(:,:) (123:17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (123:17) and at (123:17)
         remark #15346: vector dependence: assumed ANTI dependence between at (123:17) and M(:,:) (123:17)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(123,17)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(124,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (124:17) and M(:,:) (124:17)
      remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (124:17) and data_(i,:,:) (124:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (124:17) and M(:,:) (124:17)
      remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (124:17) and data_(i,:,:) (124:17)

      LOOP BEGIN at comm_nonlin_mod.f90(124,17)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (124:17) and M(:,:) (124:17)
         remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (124:17) and data_(i,:,:) (124:17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (124:17) and M(:,:) (124:17)
         remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (124:17) and data_(i,:,:) (124:17)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(143,14)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between STATUS_FIT(:) (143:14) and STATUS_FIT(:) (143:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between STATUS_FIT(:) (143:14) and STATUS_FIT(:) (143:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(143,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference STATUS_FIT(:) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(143,14)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(145,14)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_nonlin_mod.f90(172,33)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(189,27)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference STATUS_FIT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.824
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 4.250 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(189,27)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(201,22)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(201,22)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(201,22)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (201:73) has aligned access   [ comm_nonlin_mod.f90(201,73) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(201,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(207,22)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(207,22)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(207,22)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (208:65) has aligned access   [ comm_nonlin_mod.f90(208,65) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(207,22)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(220,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (223:29) and at (223:29)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (223:29) and at (223:29)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (223:29) and at (223:29)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(225,25)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_nonlin_mod.f90(225,25)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(225,25)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (226:53) has aligned access   [ comm_nonlin_mod.f90(226,53) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(225,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(231,25)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_nonlin_mod.f90(231,25)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(231,25)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (232:68) has aligned access   [ comm_nonlin_mod.f90(232,68) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(231,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(251,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function (Indirect call) cannot be vectorized   [ comm_nonlin_mod.f90(255,28) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(251,14)
<Remainder>
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(260,14)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(275,25)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(275,25)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(275,25)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (276:70) has aligned access   [ comm_nonlin_mod.f90(276,70) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(275,25)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (278:20) has aligned access
      remark #15388: vectorization support: reference C(j,:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 5.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (278:20) and at (278:20)
   remark #17106: parallel dependence: assumed FLOW dependence between at (278:20) and at (278:20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (278:20) and at (278:20)
   remark #15346: vector dependence: assumed FLOW dependence between at (278:20) and at (278:20)

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (278:20) and at (278:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (278:20) and at (278:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between at (278:20) and at (278:20)
      remark #15346: vector dependence: assumed ANTI dependence between at (278:20) and at (278:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(278,20)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(291,17)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_nonlin_mod.f90(292,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (292:17) and at (292:17)
      remark #17106: parallel dependence: assumed ANTI dependence between at (292:17) and M(:,:) (292:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (292:17) and at (292:17)
      remark #15346: vector dependence: assumed ANTI dependence between at (292:17) and M(:,:) (292:17)

      LOOP BEGIN at comm_nonlin_mod.f90(292,17)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (292:17) and at (292:17)
         remark #17106: parallel dependence: assumed ANTI dependence between at (292:17) and M(:,:) (292:17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (292:17) and at (292:17)
         remark #15346: vector dependence: assumed ANTI dependence between at (292:17) and M(:,:) (292:17)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(292,17)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_nonlin_mod.f90(293,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
      remark #17106: parallel dependence: assumed ANTI dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
      remark #15346: vector dependence: assumed ANTI dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)

      LOOP BEGIN at comm_nonlin_mod.f90(293,17)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
         remark #17106: parallel dependence: assumed ANTI dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
         remark #15346: vector dependence: assumed ANTI dependence between data_(i,:,:) (293:17) and data_(i,:,:) (293:17)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(313,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(320,9)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <data_(:)>, stride is 766
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.838
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 9.250 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(320,9)
<Remainder>
LOOP END

LOOP BEGIN at comm_nonlin_mod.f90(322,18)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_nonlin_mod.f90(103,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_nonlin_mod.f90(130,24) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_nonlin_mod.f90(111,8)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_nonlin_mod.f90(130,24) ]
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_nonlin_mod.f90(130,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_nonlin_mod.f90(130,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END

      LOOP BEGIN at comm_nonlin_mod.f90(243,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_nonlin_mod.f90(243,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_nonlin_mod.f90(86,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(79,48):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(100,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_nonlin_mod.f90(100,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(321,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_nonlin_mod.f90(321,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(130,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(130,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(143,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_nonlin_mod.f90(143,14):remark #34026: call to memset implemented as a call to optimized library version
comm_nonlin_mod.f90(169,20):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_nonlin_mod.f90(169,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(170,20):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_nonlin_mod.f90(170,20):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_nonlin_mod.f90(170,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_nonlin_mod.f90(171,20):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_nonlin_mod.f90(171,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(172,33):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(243,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(243,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_nonlin_mod.f90(71,14):remark #34051: REGISTER ALLOCATION : [comm_nonlin_mod_mp_sample_nonlin_params_] comm_nonlin_mod.f90:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :    2414
            Global    :     447
            Local     :    1967
        Regenerable   :     351
        Spilled       :      68
        
    Routine stack
        Variables     :    9200 bytes*
            Reads     :     322 [1.15e+03 ~ 3.8%]
            Writes    :     591 [2.00e+03 ~ 6.7%]
        Spills        :     512 bytes*
            Reads     :     109 [1.35e+03 ~ 4.5%]
            Writes    :      82 [4.09e+02 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

