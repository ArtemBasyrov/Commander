Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_b_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_b_mod._) [1/3=33.3%] comm_B_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_B_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_b_mod._] comm_B_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_B_MOD::GETBTHETA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_B_MOD::GETBTHETA) [2/3=66.7%] comm_B_mod.f90(127,12)
  -> EXTERN: (134,17) SPLINT_SIMPLE


    Report from: Code generation optimizations [cg]

comm_B_mod.f90(127,12):remark #34051: REGISTER ALLOCATION : [comm_b_mod_mp_getbtheta_] comm_B_mod.f90:127

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      23
            Global    :       0
            Local     :      23
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_B_MOD::INITBTHETA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_B_MOD::INITBTHETA) [3/3=100.0%] comm_B_mod.f90(49,14)
  -> EXTERN: (62,15) GETLUN
  -> EXTERN: (64,8) __getsp_inlined
  -> EXTERN: (64,8) for_open
  -> EXTERN: (64,8) __resetsp_inlined
  -> EXTERN: (64,23) for_trim
  -> EXTERN: (64,28) _alloca
  -> EXTERN: (66,11) for_read_seq_fmt
  -> EXTERN: (67,11) for_cpystr
  -> EXTERN: (67,18) for_trim
  -> EXTERN: (68,37) for_trim
  -> EXTERN: (68,48) for_cpstr
  -> EXTERN: (71,14) for_close
  -> EXTERN: (73,20) REPORT_ERROR
  -> EXTERN: (73,20) __getsp_inlined
  -> EXTERN: (73,20) __resetsp_inlined
  -> EXTERN: (73,79) for_concat
  -> EXTERN: (73,79) _alloca
  -> EXTERN: (73,82) for_trim
  -> EXTERN: (73,87) _alloca
  -> EXTERN: (75,8) for_check_mult_overflow64
  -> EXTERN: (75,8) for_alloc_allocatable
  -> EXTERN: (75,8) for_check_mult_overflow64
  -> EXTERN: (75,8) for_alloc_allocatable
  -> EXTERN: (76,8) __getsp_inlined
  -> EXTERN: (76,8) for_open
  -> EXTERN: (76,8) __resetsp_inlined
  -> EXTERN: (76,23) for_trim
  -> EXTERN: (76,28) _alloca
  -> EXTERN: (79,11) for_read_seq_fmt
  -> EXTERN: (80,11) for_cpystr
  -> EXTERN: (80,18) for_trim
  -> EXTERN: (81,37) for_trim
  -> EXTERN: (81,48) for_cpstr
  -> EXTERN: (83,11) for_read_int_lis_xmit
  -> EXTERN: (83,11) for_read_int_lis
  -> EXTERN: (85,14) for_close
  -> EXTERN: (86,8) for_realloc_lhs
  -> EXTERN: (87,8) for_write_seq_lis
  -> EXTERN: (92,8) for_alloc_allocatable
  -> EXTERN: (92,8) for_alloc_allocatable
  -> EXTERN: (92,8) for_check_mult_overflow64
  -> EXTERN: (92,8) for_alloc_allocatable
  -> EXTERN: (97,16) COMP_NORMALISED_PLM
  -> EXTERN: (101,21) exp
  -> EXTERN: (112,8) for_realloc_lhs
  -> EXTERN: (114,8) for_dealloc_allocatable
  -> EXTERN: (118,5) for_alloc_allocatable
  -> EXTERN: (118,5) for_check_mult_overflow64
  -> EXTERN: (120,13) SPLINE_SIMPLE
  -> EXTERN: (123,5) for_dealloc_allocatable
  -> EXTERN: (123,5) for_dealloc_allocatable
  -> EXTERN: (125,3) for_dealloc_allocatable
  -> EXTERN: (125,3) for_dealloc_allocatable
  -> EXTERN: (125,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_B_mod.f90(64,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_B_mod.f90(77,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_B_mod.f90(86,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference X(:) has aligned access
   remark #15388: vectorization support: reference X(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 59 
   remark #15477: vector cost: 35.000 
   remark #15478: estimated potential speedup: 1.670 
   remark #15486: divides: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_B_mod.f90(86,8)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference X(:) has aligned access
   remark #15388: vectorization support: reference X(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.135
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at comm_B_mod.f90(86,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_B_mod.f90(93,8)
   remark #25408: memset generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_B_mod.f90(94,8)
   remark #25408: memset generated
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_B_mod.f90(96,18)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between X(i) (96:11) and X(i) (97:16)
   remark #17106: parallel dependence: assumed OUTPUT dependence between X(i) (97:16) and X(i) (96:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=1000

   LOOP BEGIN at comm_B_mod.f90(98,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PL(l) has aligned access   [ comm_B_mod.f90(101,87) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.180
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 171 
      remark #15477: vector cost: 66.500 
      remark #15478: estimated potential speedup: 2.560 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 4 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_B_mod.f90(98,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_B_mod.f90(108,51)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ X Y i } lastprivate={ } firstlastprivate={ } reduction={ norm }
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(108,38) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(108,45) ]
   remark #15388: vectorization support: reference Y(i-1) has aligned access   [ comm_B_mod.f90(109,25) ]
   remark #15389: vectorization support: reference Y(i) has unaligned access   [ comm_B_mod.f90(109,32) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(110,19) ]
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(110,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.216
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 1.890 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=124
LOOP END

LOOP BEGIN at comm_B_mod.f90(108,51)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(108,38) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(108,45) ]
   remark #15388: vectorization support: reference Y(i-1) has aligned access   [ comm_B_mod.f90(109,25) ]
   remark #15389: vectorization support: reference Y(i) has unaligned access   [ comm_B_mod.f90(109,32) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(110,19) ]
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(110,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.829
   remark #25436: completely unrolled by 7  
LOOP END

LOOP BEGIN at comm_B_mod.f90(112,8)
   remark #17109: LOOP WAS AUTO-PARALLELIZED
   remark #17101: parallel loop shared={ } private={ } firstprivate={ norm ? Y ? ? ? } lastprivate={ } firstlastprivate={ } reduction={ }
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.014
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 17.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=125
LOOP END

LOOP BEGIN at comm_B_mod.f90(118,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at comm_B_mod.f90(119,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function SPLINE_SIMPLE cannot be vectorized   [ comm_B_mod.f90(120,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at comm_B_mod.f90(108,51)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_B_mod.f90(108,51)
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(108,38) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(108,45) ]
   remark #15388: vectorization support: reference Y(i-1) has aligned access   [ comm_B_mod.f90(109,25) ]
   remark #15389: vectorization support: reference Y(i) has unaligned access   [ comm_B_mod.f90(109,32) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(110,19) ]
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(110,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.330
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 1.890 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=124
LOOP END

LOOP BEGIN at comm_B_mod.f90(108,51)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(108,38) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(108,45) ]
   remark #15388: vectorization support: reference Y(i-1) has aligned access   [ comm_B_mod.f90(109,25) ]
   remark #15389: vectorization support: reference Y(i) has unaligned access   [ comm_B_mod.f90(109,32) ]
   remark #15389: vectorization support: reference X(i) has unaligned access   [ comm_B_mod.f90(110,19) ]
   remark #15388: vectorization support: reference X(i-1) has aligned access   [ comm_B_mod.f90(110,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.829
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
   remark #25015: Estimate of max trip count of loop=999
LOOP END

LOOP BEGIN at comm_B_mod.f90(112,8)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_B_mod.f90(112,8)
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.086
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 30 
   remark #15477: vector cost: 17.500 
   remark #15478: estimated potential speedup: 1.700 
   remark #15486: divides: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=125
LOOP END

LOOP BEGIN at comm_B_mod.f90(112,8)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15388: vectorization support: reference Y(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.308
   remark #25015: Estimate of max trip count of loop=1000
LOOP END

    Report from: Code generation optimizations [cg]

comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(108,38):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(109,25):remark #34055: adjacent dense (unit-strided stencil) loads are not optimized. Details: stride { 8 }, step { 8 }, types { F64-V128, F64-V128 }, number of elements { 2 }, select mask { 0x000000003 }.
comm_B_mod.f90(58,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_B_mod.f90(58,47):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_B_mod.f90(58,44):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_B_mod.f90(118,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_B_mod.f90(118,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_B_mod.f90(93,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_B_mod.f90(93,8):remark #34026: call to memset implemented as a call to optimized library version
comm_B_mod.f90(94,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_B_mod.f90(94,8):remark #34026: call to memset implemented as a call to optimized library version
comm_B_mod.f90(49,14):remark #34051: REGISTER ALLOCATION : [comm_b_mod_mp_initbtheta_] comm_B_mod.f90:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1195
            Global    :     219
            Local     :     976
        Regenerable   :     266
        Spilled       :      22
        
    Routine stack
        Variables     :    3304 bytes*
            Reads     :      45 [1.86e+02 ~ 1.3%]
            Writes    :     124 [3.17e+01 ~ 0.2%]
        Spills        :     240 bytes*
            Reads     :      51 [3.42e+02 ~ 2.3%]
            Writes    :      45 [2.86e+02 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
