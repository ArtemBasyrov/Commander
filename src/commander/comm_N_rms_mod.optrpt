Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_n_rms_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_n_rms_mod._) [1/10=10.0%] comm_N_rms_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod._] comm_N_rms_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::CONSTRUCTOR) [2/10=20.0%] comm_N_rms_mod.f90(44,12)
  -> EXTERN: (63,5) for_allocate
  -> EXTERN: (64,10) INT2STRING
  -> EXTERN: (65,5) for_concat
  -> EXTERN: (65,13) for_trim
  -> EXTERN: (66,5) for_concat
  -> EXTERN: (66,13) for_trim
  -> EXTERN: (66,39) for_trim
  -> EXTERN: (69,5) memcpy
  -> EXTERN: (79,8) __resetsp_inlined
  -> EXTERN: (79,8) __getsp_inlined
  -> EXTERN: (79,31) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (79,46) for_trim
  -> EXTERN: (79,55) _alloca
  -> EXTERN: (79,55) for_concat
  -> EXTERN: (79,57) for_trim
  -> EXTERN: (80,13) wall_time_
  -> (81,13) COMM_N_RMS_MOD::UNIFORMIZE_RMS (isz = 1030) (sz = 1043)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> EXTERN: (82,13) wall_time_
  -> EXTERN: (84,13) wall_time_
  -> EXTERN: (85,8) for_realloc_lhs
  -> EXTERN: (86,13) wall_time_
  -> EXTERN: (90,14) for_realloc_lhs
  -> EXTERN: (94,8) __resetsp_inlined
  -> EXTERN: (94,8) __getsp_inlined
  -> EXTERN: (94,23) GETSIZE_FITS
  -> EXTERN: (94,36) for_trim
  -> EXTERN: (94,45) for_concat
  -> EXTERN: (94,45) _alloca
  -> EXTERN: (94,47) for_trim
  -> EXTERN: (95,23) COMM_MAP_MOD^CONSTRUCTOR_MAPINFO
  -> EXTERN: (99,13) wall_time_
  -> EXTERN: (100,8) __resetsp_inlined
  -> EXTERN: (100,8) __getsp_inlined
  -> EXTERN: (100,31) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (100,53) for_trim
  -> EXTERN: (100,62) for_concat
  -> EXTERN: (100,62) _alloca
  -> EXTERN: (100,64) for_trim
  -> EXTERN: (101,13) wall_time_
  -> EXTERN: (104,10) wall_time_
  -> EXTERN: (105,5) _alloca
  -> EXTERN: (106,8) for_realloc_lhs
  -> EXTERN: (108,8) __resetsp_inlined
  -> EXTERN: (108,8) __getsp_inlined
  -> EXTERN: (110,10) wall_time_
  -> EXTERN: (118,16) mpi_allreduce_
  -> EXTERN: (119,16) mpi_allreduce_
  -> EXTERN: (125,30) for_trim
  -> EXTERN: (125,52) for_cpstr
  -> EXTERN: (126,37) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (127,8) for_realloc_lhs
  -> EXTERN: (128,13) COMPUTE_INVN_LM
  -> EXTERN: (132,10) wall_time_
  -> EXTERN: (133,30) for_trim
  -> EXTERN: (133,52) for_cpstr
  -> EXTERN: (134,8) for_check_mult_overflow64
  -> EXTERN: (134,8) for_alloc_allocatable
  -> EXTERN: (135,24) COMM_MAP_MOD^CONSTRUCTOR_CLONE
  -> EXTERN: (136,8) for_realloc_lhs
  -> INDIRECT-: (137,13)  (*((P64*) comm_n_rms_mod_mp_constructor_$INVW_TAU$16_V$1178.0.2))[2(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (138,13)  (*((P64*) comm_n_rms_mod_mp_constructor_$INVW_TAU$16_V$1178.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (142,13) mpi_allreduce_
  -> EXTERN: (143,13) mpi_allreduce_
  -> EXTERN: (153,16) mpi_allreduce_
  -> EXTERN: (154,16) mpi_allreduce_
  -> EXTERN: (162,10) wall_time_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(85,8)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_N_rms_mod.f90(85,8) ]
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (85:8) and at (85:8)
   remark #17106: parallel dependence: assumed FLOW dependence between at (85:8) and at (85:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (85:8) and at (85:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (85:8) and at (85:8)

   LOOP BEGIN at comm_N_rms_mod.f90(85,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (85:8) and at (85:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (85:8) and at (85:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (85:8) and at (85:8)
      remark #15346: vector dependence: assumed FLOW dependence between at (85:8) and at (85:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(85,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(90,14)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_N_rms_mod.f90(90,14) ]
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (90:14) and at (90:14)
   remark #17106: parallel dependence: assumed FLOW dependence between at (90:14) and at (90:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (90:14) and at (90:14)
   remark #15346: vector dependence: assumed FLOW dependence between at (90:14) and at (90:14)

   LOOP BEGIN at comm_N_rms_mod.f90(90,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (90:14) and at (90:14)
      remark #17106: parallel dependence: assumed FLOW dependence between at (90:14) and at (90:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (90:14) and at (90:14)
      remark #15346: vector dependence: assumed FLOW dependence between at (90:14) and at (90:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(90,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(105,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(105,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(105,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (105:32) has aligned access   [ comm_N_rms_mod.f90(105,32) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.389
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 4.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(105,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(105,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (105:32) has aligned access   [ comm_N_rms_mod.f90(105,32) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.722
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(105,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(106,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_N_rms_mod.f90(106,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(106,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(108,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at comm_N_rms_mod.f90(108,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(108,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(115,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (116:23) and at (120:11)
   remark #17106: parallel dependence: assumed FLOW dependence between at (120:11) and at (116:23)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(116,23)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(116,23)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (116:23) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.450
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 2.260 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(116,23)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(120,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(127,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (127:8) and constructor(:,:) (127:8)
   remark #17106: parallel dependence: assumed FLOW dependence between constructor(:,:) (127:8) and at (127:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (127:8) and constructor(:,:) (127:8)
   remark #15346: vector dependence: assumed FLOW dependence between constructor(:,:) (127:8) and at (127:8)

   LOOP BEGIN at comm_N_rms_mod.f90(127,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (127:55) and constructor(:,:) (127:8)
      remark #17106: parallel dependence: assumed FLOW dependence between constructor(:,:) (127:8) and at (127:55)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (127:55) and constructor(:,:) (127:8)
      remark #15346: vector dependence: assumed FLOW dependence between constructor(:,:) (127:8) and at (127:55)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(127,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(136,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(136,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference INVW(:,:) has unaligned access   [ comm_N_rms_mod.f90(136,36) ]
      remark #15389: vectorization support: reference INVW(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.179
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 7.000 
      remark #15478: estimated potential speedup: 1.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(136,8)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference INVW(:,:) has unaligned access   [ comm_N_rms_mod.f90(136,36) ]
      remark #15389: vectorization support: reference INVW(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.111
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(140,19)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(140,19)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference INVW(:,1) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 1.450
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 2.260 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(140,19)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(141,19)
<Peeled loop for vectorization>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(141,19)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference INVW(:,1) has aligned access   [ comm_N_rms_mod.f90(141,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.705
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.930 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(141,19)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(151,22)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at comm_N_rms_mod.f90(151,22)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(151,22)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference INVW(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 2.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(151,22)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference INVW(:,:) has aligned access
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.143
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(152,22)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at comm_N_rms_mod.f90(152,22)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(152,22)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference INVW(:,:) has aligned access   [ comm_N_rms_mod.f90(152,45) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.273
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 11 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 1.950 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(152,22)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference INVW(:,:) has aligned access   [ comm_N_rms_mod.f90(152,45) ]
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.385
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(156,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(158,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(63,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_N_rms_mod.f90(63,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_N_rms_mod.f90(69,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_N_rms_mod.f90(69,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_N_rms_mod.f90(69,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_N_rms_mod.f90(44,12):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_constructor_] comm_N_rms_mod.f90:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1236
            Global    :     341
            Local     :     895
        Regenerable   :     239
        Spilled       :      36
        
    Routine stack
        Variables     :    8580 bytes*
            Reads     :      61 [2.00e+01 ~ 0.4%]
            Writes    :     195 [8.41e+01 ~ 1.7%]
        Spills        :     240 bytes*
            Reads     :      76 [6.17e+01 ~ 1.2%]
            Writes    :      56 [4.66e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::UNIFORMIZE_RMS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::UNIFORMIZE_RMS) [3/10=30.0%] comm_N_rms_mod.f90(238,14)
  -> EXTERN: (255,5) for_alloc_allocatable
  -> EXTERN: (255,5) for_check_mult_overflow64
  -> EXTERN: (260,13) mpi_allreduce_
  -> EXTERN: (261,13) mpi_allreduce_
  -> EXTERN: (273,13) mpi_allreduce_
  -> EXTERN: (279,8) for_realloc_lhs
  -> EXTERN: (293,38) RAND_GAUSS
  -> EXTERN: (299,5) for_dealloc_allocatable
  -> EXTERN: (301,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(251,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(251,8)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(251,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference regnoise(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(251,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(251,8)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(251,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <regnoise(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(251,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(256,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between mask%COMM (258:20) and limits(2) (261:13)
   remark #17106: parallel dependence: assumed FLOW dependence between limits(2) (261:13) and mask%COMM (258:20)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(258,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (258:20) and at (258:20)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(258,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (258:20) and at (258:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (258:20) and at (258:20)
      remark #15346: vector dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #15346: vector dependence: assumed FLOW dependence between at (258:20) and at (258:20)
      remark #15346: vector dependence: assumed ANTI dependence between at (258:20) and at (258:20)
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(259,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (259:20) and at (259:20)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(259,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (259:20) and at (259:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (259:20) and at (259:20)
      remark #15346: vector dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #15346: vector dependence: assumed FLOW dependence between at (259:20) and at (259:20)
      remark #15346: vector dependence: assumed ANTI dependence between at (259:20) and at (259:20)
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(264,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <regnoise(:,j)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(264,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(267,8)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between F(:) (267:8) and F(:) (267:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between F(:) (267:8) and F(:) (267:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_N_rms_mod.f90(267,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference F(:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_N_rms_mod.f90(267,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(268,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between F(b) (271:11) and F(b) (271:11)
      remark #17106: parallel dependence: assumed ANTI dependence between F(b) (271:11) and F(b) (271:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between F(b) (271:11) and F(b) (271:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between F(b) (271:11) and F(b) (271:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F(b) (271:11) and F(b) (271:11)
      remark #15346: vector dependence: assumed ANTI dependence between F(b) (271:11) and F(b) (271:11)
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(277,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between F(i) (277:11) and F(i-1) (277:11)
      remark #17106: parallel dependence: assumed ANTI dependence between F(i-1) (277:11) and F(i) (277:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between F(i) (277:11) and F(i-1) (277:11)
      remark #15346: vector dependence: assumed ANTI dependence between F(i-1) (277:11) and F(i) (277:11)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(277,11)
   <Remainder>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,16)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,16)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_N_rms_mod.f90(279,16) ]
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference F(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.426
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 1.040 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,16)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference F(:) has aligned access
      remark #15388: vectorization support: reference F(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.014
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 30 
      remark #15477: vector cost: 17.500 
      remark #15478: estimated potential speedup: 1.690 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,8)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference F(:) has aligned access
      remark #15388: vectorization support: reference F(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(279,8)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(283,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(289,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15382: vectorization support: call to function RAND_GAUSS cannot be vectorized   [ comm_N_rms_mod.f90(293,38) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(248,44):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_N_rms_mod.f90(267,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_N_rms_mod.f90(267,8):remark #34026: call to memset implemented as a call to optimized library version
comm_N_rms_mod.f90(238,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_uniformize_rms_] comm_N_rms_mod.f90:238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     500
            Global    :     176
            Local     :     324
        Regenerable   :      62
        Spilled       :      30
        
    Routine stack
        Variables     :     172 bytes*
            Reads     :      21 [4.22e+00 ~ 0.5%]
            Writes    :      28 [8.39e+00 ~ 0.9%]
        Spills        :     192 bytes*
            Reads     :      41 [2.22e+01 ~ 2.5%]
            Writes    :      36 [1.07e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::MATMULINVN_1MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::MATMULINVN_1MAP) [4/10=40.0%] comm_N_rms_mod.f90(168,14)
  -> EXTERN: (172,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(172,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(172,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(172,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (172:29) has aligned access   [ comm_N_rms_mod.f90(172,29) ]
      remark #15389: vectorization support: reference at (172:5) has unaligned access
      remark #15389: vectorization support: reference at (172:29) has unaligned access   [ comm_N_rms_mod.f90(172,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.294
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 14 
      remark #15477: vector cost: 8.500 
      remark #15478: estimated potential speedup: 1.620 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(172,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (172:29) has aligned access   [ comm_N_rms_mod.f90(172,29) ]
      remark #15389: vectorization support: reference at (172:5) has unaligned access
      remark #15389: vectorization support: reference at (172:29) has unaligned access   [ comm_N_rms_mod.f90(172,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.870
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(168,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_matmulinvn_1map_] comm_N_rms_mod.f90:168

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     101
            Global    :      34
            Local     :      67
        Regenerable   :       6
        Spilled       :       7
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.7%]
        Spills        :      16 bytes*
            Reads     :       3 [1.15e+01 ~ 0.7%]
            Writes    :       3 [9.40e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::MATMULN_1MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::MATMULN_1MAP) [5/10=50.0%] comm_N_rms_mod.f90(176,14)
  -> EXTERN: (180,5) _alloca
  -> EXTERN: (181,8) for_realloc_lhs
  -> EXTERN: (183,8) __resetsp_inlined
  -> EXTERN: (183,8) __getsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(180,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(180,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(180,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (180:25) has aligned access   [ comm_N_rms_mod.f90(180,25) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.389
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 4.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(180,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(180,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (180:25) has aligned access   [ comm_N_rms_mod.f90(180,25) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.722
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(180,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(181,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)

   LOOP BEGIN at comm_N_rms_mod.f90(181,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (181:42) and at (181:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (181:8) and at (181:42)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(181,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (181:8) and at (181:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (181:8) and at (181:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (181:8) and at (181:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between at (181:8) and at (181:8)
      remark #15346: vector dependence: assumed ANTI dependence between at (181:8) and at (181:8)
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(183,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   remark #17106: parallel dependence: assumed FLOW dependence between at (183:8) and at (183:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (183:8) and at (183:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (183:8) and at (183:8)

   LOOP BEGIN at comm_N_rms_mod.f90(183,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (183:8) and at (183:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(183,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (183:8) and at (183:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (183:8) and at (183:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (183:8) and at (183:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (183:8) and at (183:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (183:8) and at (183:8)
      remark #15346: vector dependence: assumed FLOW dependence between at (183:8) and at (183:8)
      remark #15346: vector dependence: assumed ANTI dependence between at (183:8) and at (183:8)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(176,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_matmuln_1map_] comm_N_rms_mod.f90:176

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     205
            Global    :      81
            Local     :     124
        Regenerable   :      12
        Spilled       :      29
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.3%]
        Spills        :     192 bytes*
            Reads     :      54 [1.43e+02 ~ 4.2%]
            Writes    :      38 [4.46e+01 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::MATMULSQRTINVN_1MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::MATMULSQRTINVN_1MAP) [6/10=60.0%] comm_N_rms_mod.f90(188,14)
  -> EXTERN: (192,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(192,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(192,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(192,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (192:5) has unaligned access
      remark #15388: vectorization support: reference at (192:5) has aligned access
      remark #15389: vectorization support: reference at (192:5) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.409
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 1.430 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(192,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(188,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_matmulsqrtinvn_1map_] comm_N_rms_mod.f90:188

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      86
            Global    :      31
            Local     :      55
        Regenerable   :       6
        Spilled       :       7
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.8%]
        Spills        :      16 bytes*
            Reads     :       3 [1.15e+01 ~ 0.8%]
            Writes    :       3 [9.40e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::MATMULINVN_2MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::MATMULINVN_2MAP) [7/10=70.0%] comm_N_rms_mod.f90(196,14)
  -> EXTERN: (201,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(201,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(201,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(201,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (201:29) has unaligned access   [ comm_N_rms_mod.f90(201,29) ]
      remark #15388: vectorization support: reference at (201:5) has aligned access
      remark #15388: vectorization support: reference at (201:29) has aligned access   [ comm_N_rms_mod.f90(201,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.365
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 12 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 1.800 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(201,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(201,5)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference at (201:29) has unaligned access   [ comm_N_rms_mod.f90(201,29) ]
      remark #15388: vectorization support: reference at (201:5) has aligned access
      remark #15389: vectorization support: reference at (201:29) has unaligned access   [ comm_N_rms_mod.f90(201,29) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.900
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(196,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_matmulinvn_2map_] comm_N_rms_mod.f90:196

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     121
            Global    :      36
            Local     :      85
        Regenerable   :       6
        Spilled       :      10
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.6%]
        Spills        :      40 bytes*
            Reads     :       8 [3.50e+01 ~ 1.9%]
            Writes    :       5 [6.60e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::MATMULSQRTINVN_2MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::MATMULSQRTINVN_2MAP) [8/10=80.0%] comm_N_rms_mod.f90(205,14)
  -> EXTERN: (210,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(210,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(210,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(210,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (210:5) has aligned access
      remark #15389: vectorization support: reference at (210:5) has unaligned access
      remark #15388: vectorization support: reference at (210:5) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.607
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 1.670 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(210,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(210,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(205,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_matmulsqrtinvn_2map_] comm_N_rms_mod.f90:205

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     105
            Global    :      34
            Local     :      71
        Regenerable   :       6
        Spilled       :      10
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.7%]
        Spills        :      40 bytes*
            Reads     :       8 [3.50e+01 ~ 2.3%]
            Writes    :       5 [6.60e+00 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::RETURNRMS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::RETURNRMS) [9/10=90.0%] comm_N_rms_mod.f90(214,14)
  -> EXTERN: (218,5) _alloca
  -> EXTERN: (219,8) for_realloc_lhs
  -> EXTERN: (221,8) __resetsp_inlined
  -> EXTERN: (221,8) __getsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_rms_mod.f90(218,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_rms_mod.f90(218,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(218,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (218:25) has aligned access   [ comm_N_rms_mod.f90(218,25) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.389
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 4.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(218,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(218,5)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (218:25) has aligned access   [ comm_N_rms_mod.f90(218,25) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.722
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(218,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(219,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   remark #17106: parallel dependence: assumed FLOW dependence between at (219:8) and at (219:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (219:8) and at (219:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (219:8) and at (219:8)

   LOOP BEGIN at comm_N_rms_mod.f90(219,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (219:8) and at (219:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(219,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (219:8) and at (219:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (219:8) and at (219:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (219:8) and at (219:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (219:8) and at (219:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (219:8) and at (219:8)
      remark #15346: vector dependence: assumed FLOW dependence between at (219:8) and at (219:8)
      remark #15346: vector dependence: assumed ANTI dependence between at (219:8) and at (219:8)
   LOOP END
LOOP END

LOOP BEGIN at comm_N_rms_mod.f90(221,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   remark #17106: parallel dependence: assumed FLOW dependence between at (221:8) and at (221:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (221:8) and at (221:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (221:8) and at (221:8)

   LOOP BEGIN at comm_N_rms_mod.f90(221,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (221:8) and at (221:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_N_rms_mod.f90(221,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (221:8) and at (221:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (221:8) and at (221:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (221:8) and at (221:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (221:8) and at (221:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (221:8) and at (221:8)
      remark #15346: vector dependence: assumed FLOW dependence between at (221:8) and at (221:8)
      remark #15346: vector dependence: assumed ANTI dependence between at (221:8) and at (221:8)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(214,14):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_returnrms_] comm_N_rms_mod.f90:214

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     180
            Global    :      77
            Local     :     103
        Regenerable   :      12
        Spilled       :      26
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [1.10e+01 ~ 0.4%]
        Spills        :     168 bytes*
            Reads     :      42 [1.21e+01 ~ 0.4%]
            Writes    :      25 [9.01e+00 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_RMS_MOD::RETURNRMSPIX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_RMS_MOD::RETURNRMSPIX) [10/10=100.0%] comm_N_rms_mod.f90(226,12)


    Report from: Code generation optimizations [cg]

comm_N_rms_mod.f90(226,12):remark #34051: REGISTER ALLOCATION : [comm_n_rms_mod_mp_returnrmspix_] comm_N_rms_mod.f90:226

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm1]
        
    Routine temporaries
        Total         :      30
            Global    :       8
            Local     :      22
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

<2> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

