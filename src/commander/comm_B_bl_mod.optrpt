Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_b_bl_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_b_bl_mod._) [1/4=25.0%] comm_B_bl_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_B_bl_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_b_bl_mod._] comm_B_bl_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_B_BL_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_B_BL_MOD::CONSTRUCTOR) [2/4=50.0%] comm_B_bl_mod.f90(32,12)
  -> EXTERN: (49,5) for_allocate
  -> EXTERN: (50,5) for_concat
  -> EXTERN: (50,11) for_trim
  -> EXTERN: (53,5) for_cpystr
  -> EXTERN: (56,8) for_check_mult_overflow64
  -> EXTERN: (56,8) for_alloc_allocatable
  -> EXTERN: (61,16) INT2STRING
  -> EXTERN: (62,16) READ_BEAM
  -> EXTERN: (62,16) __getsp_inlined
  -> EXTERN: (62,16) __resetsp_inlined
  -> EXTERN: (63,25) for_trim
  -> EXTERN: (63,65) for_concat
  -> EXTERN: (63,65) _alloca
  -> EXTERN: (65,16) READ_BEAM
  -> EXTERN: (65,16) __getsp_inlined
  -> EXTERN: (65,16) __resetsp_inlined
  -> EXTERN: (66,25) for_trim
  -> EXTERN: (66,39) for_concat
  -> EXTERN: (66,39) _alloca
  -> EXTERN: (66,41) for_trim
  -> EXTERN: (66,46) _alloca
  -> EXTERN: (68,16) READ_BEAM
  -> EXTERN: (71,13) __resetsp_inlined
  -> EXTERN: (71,13) READ_BEAM
  -> EXTERN: (71,13) __getsp_inlined
  -> EXTERN: (72,24) for_trim
  -> EXTERN: (72,33) for_concat
  -> EXTERN: (72,33) _alloca
  -> EXTERN: (72,35) for_trim
  -> EXTERN: (73,22) for_trim
  -> EXTERN: (73,31) for_concat
  -> EXTERN: (73,31) _alloca
  -> EXTERN: (73,33) for_trim


    Report from: Code generation optimizations [cg]

comm_B_bl_mod.f90(49,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_B_bl_mod.f90(49,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_B_bl_mod.f90(32,12):remark #34051: REGISTER ALLOCATION : [comm_b_bl_mod_mp_constructor_] comm_B_bl_mod.f90:32

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     297
            Global    :      66
            Local     :     231
        Regenerable   :      88
        Spilled       :       7
        
    Routine stack
        Variables     :    4316 bytes*
            Reads     :       1 [3.39e-02 ~ 0.0%]
            Writes    :      26 [1.18e+01 ~ 3.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.93e+00 ~ 0.5%]
            Writes    :       2 [1.93e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_B_BL_MOD::MATMULB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_B_BL_MOD::MATMULB) [3/4=75.0%] comm_B_bl_mod.f90(85,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_B_bl_mod.f90(93,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (94:8) and at (98:11)
   remark #17106: parallel dependence: assumed FLOW dependence between at (98:11) and at (94:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_B_bl_mod.f90(96,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (96:11)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(l,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (96:11)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.077
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.500 
      remark #15478: estimated potential speedup: 0.920 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(96,11)
   <Remainder>
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(98,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (98:11)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(98,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_B_bl_mod.f90(85,14):remark #34051: REGISTER ALLOCATION : [comm_b_bl_mod_mp_matmulb_] comm_B_bl_mod.f90:85

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     108
            Global    :      48
            Local     :      60
        Regenerable   :       2
        Spilled       :      22
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     176 bytes*
            Reads     :      27 [6.47e+01 ~ 8.3%]
            Writes    :      23 [4.02e+01 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_B_BL_MOD::MATMULINVB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_B_BL_MOD::MATMULINVB) [4/4=100.0%] comm_B_bl_mod.f90(104,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_B_bl_mod.f90(112,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (113:8) and at (123:11)
   remark #17106: parallel dependence: assumed FLOW dependence between at (123:11) and at (113:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_B_bl_mod.f90(115,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(l,j)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(116,18) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (117:17)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(117,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (117:32)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(117,32) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(l,j)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(117,47) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (117:17)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(117,17) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (119:17)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(119,17) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (119:17)>, stride is unknown to compiler   [ comm_B_bl_mod.f90(119,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.057
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 5 
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 42 
      remark #15477: vector cost: 35.000 
      remark #15478: estimated potential speedup: 1.190 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(115,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(123,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (123:11)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_B_bl_mod.f90(123,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_B_bl_mod.f90(104,14):remark #34051: REGISTER ALLOCATION : [comm_b_bl_mod_mp_matmulinvb_] comm_B_bl_mod.f90:104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     118
            Global    :      59
            Local     :      59
        Regenerable   :       5
        Spilled       :      17
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     128 bytes*
            Reads     :      17 [4.24e+01 ~ 3.3%]
            Writes    :      16 [2.91e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
