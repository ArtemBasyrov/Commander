Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_signal_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_signal_mod._) [1/8=12.5%] comm_signal_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_signal_mod._] comm_signal_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::SAMPLE_AMPS_BY_CG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::SAMPLE_AMPS_BY_CG) [2/8=25.0%] comm_signal_mod.f90(126,14)
  -> EXTERN: (138,5) for_alloc_allocatable
  -> EXTERN: (138,5) for_check_mult_overflow64
  -> EXTERN: (138,5) for_alloc_allocatable
  -> EXTERN: (138,5) for_check_mult_overflow64
  -> INDIRECT-: (143,13)  (*((P64*) comm_signal_mod_mp_sample_amps_by_cg_$C$72_V$627e.0.4))[14(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (144,13)  (*((P64*) comm_signal_mod_mp_sample_amps_by_cg_$C$72_V$627e.0.4))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (148,10) CR_COMPUTERHS
  -> EXTERN: (149,10) UPDATE_STATUS
  -> INLINE: (150,10) COMM_SIGNAL_MOD::INITPRECOND (isz = 9) (sz = 14)
    -> EXTERN: (162,10) INITDIFFPRECOND
    -> EXTERN: (163,10) INITPTSRCPRECOND
    -> EXTERN: (164,10) INITTEMPLATEPRECOND
  -> EXTERN: (151,10) UPDATE_STATUS
  -> EXTERN: (152,10) SOLVE_CR_EQN_BY_CG
  -> EXTERN: (153,10) CR_X2AMP_FULL
  -> EXTERN: (154,10) UPDATE_STATUS
  -> EXTERN: (155,5) for_dealloc_allocatable
  -> EXTERN: (155,5) for_dealloc_allocatable
  -> EXTERN: (157,3) for_dealloc_allocatable
  -> EXTERN: (157,3) for_dealloc_allocatable
  -> EXTERN: (157,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_signal_mod.f90(142,15)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(136,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(136,59):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(136,54):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(141,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(141,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(126,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_sample_amps_by_cg_] comm_signal_mod.f90:126

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     287
            Global    :      37
            Local     :     250
        Regenerable   :      57
        Spilled       :       5
        
    Routine stack
        Variables     :     492 bytes*
            Reads     :      24 [6.20e+01 ~ 11.3%]
            Writes    :      73 [1.43e+02 ~ 26.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::ADD_TO_COMPLIST

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::ADD_TO_COMPLIST) [3/8=37.5%] comm_signal_mod.f90(167,14)
  -> INDIRECT-: (174,13)  (*((P64*) comm_comp_mod_mp_complist_$63_V$468f))[4(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(167,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_add_to_complist_] comm_signal_mod.f90:167

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      28
            Global    :       7
            Local     :      21
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::SAMPLE_PARTIALSKY_TEMPAMPS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::SAMPLE_PARTIALSKY_TEMPAMPS) [4/8=50.0%] comm_signal_mod.f90(238,14)
  -> EXTERN: (255,21) strcmp
  -> INDIRECT-: (261,16)  (*((P64*) comm_signal_mod_mp_sample_partialsky_tempamps_$C$78_V$66a4.0.8))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (266,8) __resetsp_inlined
  -> EXTERN: (266,8) __getsp_inlined
  -> EXTERN: (266,20) COMPUTE_RESIDUAL
  -> EXTERN: (266,20) memcpy
  -> EXTERN: (266,20) _alloca
  -> EXTERN: (266,20) memcpy
  -> EXTERN: (266,20) _alloca
  -> EXTERN: (267,18) CONSTRUCTOR_CLONE
  -> INDIRECT-: (268,13)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$60_V$2076 *)comm_data_mod_mp_data__V$46b0)[(EXPR_CONV.SI32.SI64(comm_signal_mod_mp_sample_partialsky_tempamps_$PT$75_V$665e.0.8->COMM_TEMPLATE_COMP$BAND_V$1a97)), l:comm_data_mod_mp_data__V$46b9[0(SI32), l:0(SI64)]] + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (273,13) mpi_reduce_
  -> EXTERN: (286,15) for_trim
  -> EXTERN: (286,36) for_cpstr
  -> EXTERN: (287,33) RAND_GAUSS
  -> EXTERN: (298,8) for_deallocate_all
  -> EXTERN: (298,8) for_finalize
  -> EXTERN: (298,8) for_deallocate_all
  -> EXTERN: (298,8) for_finalize
  -> INDIRECT-: (300,13)  (*((P64*) comm_signal_mod_mp_sample_partialsky_tempamps_$C$78_V$66a4.0.8))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_signal_mod.f90(255,21)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_signal_mod.f90(255,21)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at comm_signal_mod.f90(271,18)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (271:18) and at (271:18)
      remark #17106: parallel dependence: assumed FLOW dependence between at (271:18) and at (271:18)
      remark #17106: parallel dependence: assumed ANTI dependence between at (271:18) and at (271:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_signal_mod.f90(271,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(271,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (271:33) has unaligned access   [ comm_signal_mod.f90(271,33) ]
         remark #15388: vectorization support: reference RES(:,:) has aligned access
         remark #15388: vectorization support: reference INVN(:,:) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(271,18)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(271,18)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_signal_mod.f90(272,18)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (272:18) and at (272:18)
      remark #17106: parallel dependence: assumed FLOW dependence between at (272:18) and at (272:18)
      remark #17106: parallel dependence: assumed ANTI dependence between at (272:18) and at (272:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_signal_mod.f90(272,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(272,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (272:33) has unaligned access   [ comm_signal_mod.f90(272,33) ]
         remark #15388: vectorization support: reference at (272:18) has aligned access
         remark #15388: vectorization support: reference INVN(:,:) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 6.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(272,18)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_signal_mod.f90(272,18)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(252,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(252,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(255,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(257,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(266,20):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(266,20):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_signal_mod.f90(266,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_signal_mod.f90(266,20):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(266,20):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_signal_mod.f90(266,20):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_signal_mod.f90(238,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_sample_partialsky_tempamps_] comm_signal_mod.f90:238

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     454
            Global    :     110
            Local     :     344
        Regenerable   :      65
        Spilled       :      28
        
    Routine stack
        Variables     :    1156 bytes*
            Reads     :      74 [1.09e+02 ~ 2.1%]
            Writes    :     134 [2.06e+02 ~ 4.0%]
        Spills        :     184 bytes*
            Reads     :      47 [1.18e+02 ~ 2.3%]
            Writes    :      28 [1.66e+01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::INITIALIZE_FROM_CHAIN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::INITIALIZE_FROM_CHAIN) [5/8=62.5%] comm_signal_mod.f90(178,14)
  -> EXTERN: (189,34) for_trim
  -> EXTERN: (189,63) for_cpstr
  -> EXTERN: (192,10) INT2STRING
  -> EXTERN: (193,10) INT2STRING
  -> EXTERN: (194,9) for_trim
  -> EXTERN: (194,33) for_cpstr
  -> EXTERN: (194,36) for_trim
  -> EXTERN: (195,8) for_concat
  -> EXTERN: (195,20) for_trim
  -> EXTERN: (195,25) for_adjustl
  -> EXTERN: (195,57) for_trim
  -> EXTERN: (195,62) for_adjustl
  -> EXTERN: (196,23) for_trim
  -> EXTERN: (196,28) for_adjustl
  -> EXTERN: (198,8) for_cpystr
  -> EXTERN: (198,20) for_trim
  -> EXTERN: (198,25) for_adjustl
  -> EXTERN: (200,10) OPEN_HDF_FILE
  -> EXTERN: (203,10) UPDATE_STATUS
  -> EXTERN: (210,19) __getsp_inlined
  -> EXTERN: (210,19) READ_HDF_0D_DP
  -> EXTERN: (210,19) __resetsp_inlined
  -> EXTERN: (210,34) for_trim
  -> EXTERN: (210,39) for_adjustl
  -> EXTERN: (210,64) _alloca
  -> EXTERN: (210,64) for_concat
  -> EXTERN: (210,66) for_trim
  -> EXTERN: (210,71) for_adjustl
  -> EXTERN: (212,19) __getsp_inlined
  -> EXTERN: (212,19) READ_HDF_1D_DP
  -> EXTERN: (212,19) __resetsp_inlined
  -> EXTERN: (212,34) for_trim
  -> EXTERN: (212,39) for_adjustl
  -> EXTERN: (212,68) _alloca
  -> EXTERN: (212,68) for_concat
  -> EXTERN: (212,70) for_trim
  -> EXTERN: (212,75) for_adjustl
  -> INDIRECT-: (223,16)  (*((P64*) comm_signal_mod_mp_initialize_from_chain_$C$73_V$6466.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (226,13) __resetsp_inlined
  -> EXTERN: (226,13) UPDATE_STATUS
  -> EXTERN: (226,13) __getsp_inlined
  -> EXTERN: (226,48) for_concat
  -> EXTERN: (226,48) _alloca
  -> EXTERN: (226,50) for_trim
  -> EXTERN: (227,28) for_write_seq_lis
  -> EXTERN: (227,28) for_write_seq_lis_xmit
  -> EXTERN: (227,70) for_trim
  -> EXTERN: (228,13) __resetsp_inlined
  -> INDIRECT-: (228,13)  (*((P64*) comm_signal_mod_mp_initialize_from_chain_$C$73_V$6466.0.7))[11(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (228,13) __getsp_inlined
  -> EXTERN: (228,35) for_trim
  -> EXTERN: (228,40) for_adjustl
  -> EXTERN: (228,55) for_concat
  -> EXTERN: (228,55) _alloca
  -> INDIRECT-: (229,13)  (*((P64*) comm_signal_mod_mp_initialize_from_chain_$C$73_V$6466.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (233,10) CLOSE_HDF_FILE


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_signal_mod.f90(205,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between data_(i) (207:14) and data_(i)%DELTA_V (212:19)
   remark #17106: parallel dependence: assumed OUTPUT dependence between data_(i)%DELTA_V (212:19) and data_(i) (207:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_signal_mod.f90(208,14)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_signal_mod.f90(208,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference data_(i,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_signal_mod.f90(208,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_signal_mod.f90(227,12)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(219,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(219,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(178,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_initialize_from_chain_] comm_signal_mod.f90:178

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     382
            Global    :     107
            Local     :     275
        Regenerable   :     188
        Spilled       :       9
        
    Routine stack
        Variables     :   10018 bytes*
            Reads     :      27 [9.16e+00 ~ 4.6%]
            Writes    :      97 [2.37e+01 ~ 12.0%]
        Spills        :      32 bytes*
            Reads     :       5 [8.31e-01 ~ 0.4%]
            Writes    :       5 [5.69e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::INITPRECOND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::INITPRECOND) [6/8=75.0%] comm_signal_mod.f90(159,14)
  -> EXTERN: (162,10) INITDIFFPRECOND
  -> EXTERN: (163,10) INITPTSRCPRECOND
  -> EXTERN: (164,10) INITTEMPLATEPRECOND


    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(159,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_initprecond_] comm_signal_mod.f90:159

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rdi r12]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::DUMP_COMPONENTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::DUMP_COMPONENTS) [7/8=87.5%] comm_signal_mod.f90(104,14)
  -> EXTERN: (112,12) GETLUN
  -> EXTERN: (114,5) __resetsp_inlined
  -> EXTERN: (114,5) for_open
  -> EXTERN: (114,5) __getsp_inlined
  -> EXTERN: (114,21) for_trim
  -> EXTERN: (114,26) _alloca
  -> EXTERN: (117,8) for_write_seq_lis
  -> EXTERN: (117,8) for_write_seq_lis_xmit
  -> EXTERN: (117,40) for_trim
  -> INDIRECT-: (118,13)  (*((P64*) comm_signal_mod_mp_dump_components_$C$71_V$60e1.0.3))[9(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (119,8) for_write_seq_lis
  -> INDIRECT-: (120,13)  (*((P64*) comm_signal_mod_mp_dump_components_$C$71_V$60e1.0.3))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (122,11) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_signal_mod.f90(116,15)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(115,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(115,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(104,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_dump_components_] comm_signal_mod.f90:104

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     114
            Global    :      23
            Local     :      91
        Regenerable   :      48
        Spilled       :       5
        
    Routine stack
        Variables     :     892 bytes*
            Reads     :      19 [7.00e+01 ~ 15.4%]
            Writes    :      47 [1.38e+02 ~ 30.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SIGNAL_MOD::INITIALIZE_SIGNAL_MOD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SIGNAL_MOD::INITIALIZE_SIGNAL_MOD) [8/8=100.0%] comm_signal_mod.f90(24,14)
  -> EXTERN: (36,15) for_write_seq_fmt_xmit
  -> EXTERN: (36,15) for_write_seq_fmt_xmit
  -> EXTERN: (36,15) for_write_seq_fmt_xmit
  -> EXTERN: (36,15) for_write_seq_fmt
  -> EXTERN: (36,80) for_trim
  -> EXTERN: (37,13) __getsp_inlined
  -> EXTERN: (37,13) UPDATE_STATUS
  -> EXTERN: (37,13) __resetsp_inlined
  -> EXTERN: (37,42) _alloca
  -> EXTERN: (37,42) for_concat
  -> EXTERN: (37,44) for_trim
  -> EXTERN: (40,21) for_trim
  -> EXTERN: (40,21) _alloca
  -> EXTERN: (40,21) memmove
  -> EXTERN: (41,14) for_cpstr
  -> EXTERN: (43,24) for_trim
  -> EXTERN: (43,24) _alloca
  -> EXTERN: (43,24) memmove
  -> EXTERN: (44,17) for_cpstr
  -> EXTERN: (45,19) CONSTRUCTOR
  -> EXTERN: (46,17) for_cpstr
  -> EXTERN: (47,19) CONSTRUCTOR
  -> EXTERN: (48,19) UPDATE_STATUS
  -> EXTERN: (49,17) for_cpstr
  -> EXTERN: (50,19) CONSTRUCTOR
  -> EXTERN: (51,17) for_cpstr
  -> EXTERN: (52,19) CONSTRUCTOR
  -> EXTERN: (53,17) for_cpstr
  -> EXTERN: (54,19) CONSTRUCTOR
  -> EXTERN: (55,17) for_cpstr
  -> EXTERN: (56,19) CONSTRUCTOR
  -> EXTERN: (57,17) for_cpstr
  -> EXTERN: (58,19) CONSTRUCTOR
  -> EXTERN: (59,17) for_cpstr
  -> EXTERN: (60,19) INITIALIZE_MD_COMPS
  -> EXTERN: (63,19) REPORT_ERROR
  -> EXTERN: (63,19) __getsp_inlined
  -> EXTERN: (63,19) __getsp_inlined
  -> EXTERN: (63,19) __resetsp_inlined
  -> EXTERN: (63,19) __resetsp_inlined
  -> EXTERN: (63,58) for_concat
  -> EXTERN: (63,58) _alloca
  -> EXTERN: (63,60) for_trim
  -> INLINE: (65,16) COMM_SIGNAL_MOD::ADD_TO_COMPLIST (isz = 62) (sz = 67)
    -> INDIRECT-: (174,13)  (*((P64*) comm_comp_mod_mp_complist_$63_V$468f))[4(SI64)]
       [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (66,14) for_cpstr
  -> EXTERN: (67,16) CONSTRUCTOR
  -> INLINE: (68,16) COMM_SIGNAL_MOD::ADD_TO_COMPLIST (isz = 62) (sz = 67)
    -> INDIRECT-: (174,13)  (*((P64*) comm_comp_mod_mp_complist_$63_V$468f))[4(SI64)]
       [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (72,14) for_cpstr
  -> EXTERN: (73,16) INITIALIZE_TEMPLATE_COMPS
  -> INLINE: (76,16) COMM_SIGNAL_MOD::ADD_TO_COMPLIST (isz = 62) (sz = 67)
    -> INDIRECT-: (174,13)  (*((P64*) comm_comp_mod_mp_complist_$63_V$468f))[4(SI64)]
       [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (78,16) REPORT_ERROR
  -> EXTERN: (78,16) __getsp_inlined
  -> EXTERN: (78,16) __getsp_inlined
  -> EXTERN: (78,16) __resetsp_inlined
  -> EXTERN: (78,16) __resetsp_inlined
  -> EXTERN: (78,56) for_concat
  -> EXTERN: (78,56) _alloca
  -> EXTERN: (78,58) for_trim
  -> EXTERN: (82,21) REPORT_ERROR
  -> EXTERN: (85,5) for_alloc_allocatable
  -> EXTERN: (85,5) for_check_mult_overflow64
  -> INDIRECT-: (96,25)  (*((P64*) comm_signal_mod_mp_initialize_signal_mod_$C$65_V$46c5.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_signal_mod.f90(32,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_signal_mod.f90(88,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (88:5) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ind_comp_(1,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_signal_mod.f90(92,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_signal_mod.f90(40,21):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_signal_mod.f90(40,21):remark #34026: call to memmove implemented as a call to optimized library version
comm_signal_mod.f90(43,24):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_signal_mod.f90(43,24):remark #34026: call to memmove implemented as a call to optimized library version
comm_signal_mod.f90(89,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_signal_mod.f90(89,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_signal_mod.f90(24,14):remark #34051: REGISTER ALLOCATION : [comm_signal_mod_mp_initialize_signal_mod_] comm_signal_mod.f90:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     643
            Global    :     108
            Local     :     535
        Regenerable   :     217
        Spilled       :      21
        
    Routine stack
        Variables     :    4968 bytes*
            Reads     :     154 [8.69e+01 ~ 5.4%]
            Writes    :     314 [1.96e+02 ~ 12.2%]
        Spills        :     128 bytes*
            Reads     :      30 [1.69e+01 ~ 1.1%]
            Writes    :      16 [1.22e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

