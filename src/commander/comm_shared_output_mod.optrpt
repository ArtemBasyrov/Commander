Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_shared_output_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_shared_output_mod._) [1/5=20.0%] comm_shared_output_mod.f90(10,8)


    Report from: Code generation optimizations [cg]

comm_shared_output_mod.f90(10,8):remark #34051: REGISTER ALLOCATION : [comm_shared_output_mod._] comm_shared_output_mod.f90:10

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SHARED_OUTPUT_MOD::OPEN_SHARED_OFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SHARED_OUTPUT_MOD::OPEN_SHARED_OFILE) [2/5=40.0%] comm_shared_output_mod.f90(23,14)
  -> EXTERN: (30,5) for_cpystr
  -> EXTERN: (32,10) mpi_comm_rank_
  -> EXTERN: (33,17) truncate_
  -> EXTERN: (33,17) __resetsp_inlined
  -> EXTERN: (33,17) __getsp_inlined
  -> EXTERN: (33,31) for_trim
  -> EXTERN: (33,36) _alloca
  -> EXTERN: (34,10) mpi_barrier_


    Report from: Code generation optimizations [cg]

comm_shared_output_mod.f90(23,14):remark #34051: REGISTER ALLOCATION : [comm_shared_output_mod_mp_open_shared_ofile_] comm_shared_output_mod.f90:23

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rsi rdi r8 r13-r15]
        
    Routine temporaries
        Total         :      47
            Global    :      17
            Local     :      30
        Regenerable   :      15
        Spilled       :       4
        
    Routine stack
        Variables     :      12 bytes*
            Reads     :       1 [1.00e+00 ~ 2.0%]
            Writes    :       2 [5.20e-01 ~ 1.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SHARED_OUTPUT_MOD::WRITE_SHARED_OFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SHARED_OUTPUT_MOD::WRITE_SHARED_OFILE) [3/5=60.0%] comm_shared_output_mod.f90(37,14)
  -> EXTERN: (37,14) _alloca
  -> EXTERN: (37,14) __getsp_inlined
  -> EXTERN: (45,5) for_cpystr
  -> EXTERN: (45,39) for_cpystr
  -> EXTERN: (46,11) for_len_trim
  -> EXTERN: (47,5) for_cpystr
  -> EXTERN: (48,12) for_cpstr
  -> EXTERN: (50,8) memcpy
  -> EXTERN: (59,11) for_cpystr
  -> INLINE: (66,16) COMM_SHARED_OUTPUT_MOD::FLUSH_SHARED_OFILE (isz = 54) (sz = 59)
    -> EXTERN: (86,13) open_atomic_file_
    -> EXTERN: (86,30) for_trim
    -> EXTERN: (87,10) lock_atomic_file_
    -> EXTERN: (88,10) append_atomic_file_
    -> EXTERN: (90,10) unlock_atomic_file_
    -> EXTERN: (91,10) close_atomic_file_
  -> EXTERN: (68,11) for_write_seq_lis
  -> EXTERN: (69,11) for_write_seq_lis
  -> EXTERN: (69,11) for_write_seq_lis_xmit
  -> EXTERN: (69,11) for_write_seq_lis_xmit
  -> EXTERN: (69,11) for_write_seq_lis_xmit
  -> EXTERN: (69,11) for_write_seq_lis_xmit
  -> EXTERN: (70,11) for_stop_core
  -> EXTERN: (73,3) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_shared_output_mod.f90(56,34)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at comm_shared_output_mod.f90(58,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ofile%BUFFER(ofile%BUFIND+j) (59:11) and ofile%BUFFER (59:11)
      remark #17106: parallel dependence: assumed ANTI dependence between ofile%BUFFER (59:11) and ofile%BUFFER(ofile%BUFIND+j) (59:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between ofile%BUFFER(ofile%BUFIND+j) (59:11) and ofile%BUFFER(ofile%BUFIND+j) (59:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between ofile%BUFFER(ofile%BUFIND+j) (59:11) and ofile%BUFFER(ofile%BUFIND+j) (59:11)
      remark #15382: vectorization support: call to function for_cpystr cannot be vectorized   [ comm_shared_output_mod.f90(59,11) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ofile%BUFFER(ofile%BUFIND+j) (59:11) and ofile%BUFFER (59:11)
      remark #15346: vector dependence: assumed ANTI dependence between ofile%BUFFER (59:11) and ofile%BUFFER(ofile%BUFIND+j) (59:11)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_shared_output_mod.f90(37,14):remark #34051: REGISTER ALLOCATION : [comm_shared_output_mod_mp_write_shared_ofile_] comm_shared_output_mod.f90:37

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     165
            Global    :      43
            Local     :     122
        Regenerable   :      89
        Spilled       :      17
        
    Routine stack
        Variables     :     700 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      10 [9.76e+00 ~ 1.1%]
        Spills        :      96 bytes*
            Reads     :      15 [9.81e+01 ~ 11.4%]
            Writes    :      12 [2.76e+01 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SHARED_OUTPUT_MOD::CLOSE_SHARED_OFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SHARED_OUTPUT_MOD::CLOSE_SHARED_OFILE) [4/5=80.0%] comm_shared_output_mod.f90(75,14)
  -> INLINE: (79,10) COMM_SHARED_OUTPUT_MOD::FLUSH_SHARED_OFILE (isz = 54) (sz = 59)
    -> EXTERN: (86,13) open_atomic_file_
    -> EXTERN: (86,30) for_trim
    -> EXTERN: (87,10) lock_atomic_file_
    -> EXTERN: (88,10) append_atomic_file_
    -> EXTERN: (90,10) unlock_atomic_file_
    -> EXTERN: (91,10) close_atomic_file_


    Report from: Code generation optimizations [cg]

comm_shared_output_mod.f90(75,14):remark #34051: REGISTER ALLOCATION : [comm_shared_output_mod_mp_close_shared_ofile_] comm_shared_output_mod.f90:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r14]
        
    Routine temporaries
        Total         :      41
            Global    :      14
            Local     :      27
        Regenerable   :      22
        Spilled       :       1
        
    Routine stack
        Variables     :     516 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_SHARED_OUTPUT_MOD::FLUSH_SHARED_OFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_SHARED_OUTPUT_MOD::FLUSH_SHARED_OFILE) [5/5=100.0%] comm_shared_output_mod.f90(82,14)
  -> EXTERN: (86,13) open_atomic_file_
  -> EXTERN: (86,30) for_trim
  -> EXTERN: (87,10) lock_atomic_file_
  -> EXTERN: (88,10) append_atomic_file_
  -> EXTERN: (90,10) unlock_atomic_file_
  -> EXTERN: (91,10) close_atomic_file_


    Report from: Code generation optimizations [cg]

comm_shared_output_mod.f90(82,14):remark #34051: REGISTER ALLOCATION : [comm_shared_output_mod_mp_flush_shared_ofile_] comm_shared_output_mod.f90:82

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r14]
        
    Routine temporaries
        Total         :      41
            Global    :      14
            Local     :      27
        Regenerable   :      22
        Spilled       :       1
        
    Routine stack
        Variables     :     516 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
