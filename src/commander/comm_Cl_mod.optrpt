Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_cl_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_cl_mod._) [1/21=4.8%] comm_Cl_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_cl_mod._] comm_Cl_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::CONSTRUCTOR) [2/21=9.5%] comm_Cl_mod.f90(70,12)
  -> EXTERN: (81,5) for_allocate
  -> EXTERN: (84,5) memcpy
  -> EXTERN: (85,9) for_trim
  -> EXTERN: (85,32) for_cpstr
  -> EXTERN: (88,5) memcpy
  -> EXTERN: (91,5) memcpy
  -> EXTERN: (95,5) memcpy
  -> EXTERN: (96,5) memcpy
  -> EXTERN: (102,18) memmove
  -> EXTERN: (102,18) _alloca
  -> EXTERN: (102,18) for_trim
  -> EXTERN: (103,11) for_cpstr
  -> EXTERN: (104,30) COMPUTE_ANT2THERMO_SINGLE
  -> EXTERN: (105,11) for_cpstr
  -> EXTERN: (106,30) COMPUTE_BNU_PRIME_RJ_SINGLE
  -> EXTERN: (107,11) for_cpstr
  -> EXTERN: (109,11) for_cpstr
  -> EXTERN: (111,19) COMPUTE_BNU_PRIME_SINGLE
  -> EXTERN: (111,56) COMPUTE_SZ_THERMO_SINGLE
  -> EXTERN: (112,11) for_cpstr
  -> EXTERN: (115,13) __resetsp_inlined
  -> EXTERN: (115,13) __resetsp_inlined
  -> EXTERN: (115,13) REPORT_ERROR
  -> EXTERN: (115,13) __getsp_inlined
  -> EXTERN: (115,13) __getsp_inlined
  -> EXTERN: (115,47) for_concat
  -> EXTERN: (115,47) _alloca
  -> EXTERN: (115,50) for_trim
  -> EXTERN: (118,5) for_alloc_allocatable
  -> EXTERN: (118,5) for_check_mult_overflow64
  -> EXTERN: (119,5) for_alloc_allocatable
  -> EXTERN: (119,5) for_check_mult_overflow64
  -> EXTERN: (120,5) for_alloc_allocatable
  -> EXTERN: (120,5) for_check_mult_overflow64
  -> EXTERN: (121,5) for_alloc_allocatable
  -> EXTERN: (121,5) for_check_mult_overflow64
  -> EXTERN: (123,9) for_trim
  -> EXTERN: (123,32) for_cpstr
  -> INDIRECT-: (124,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[5(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (124,13) __resetsp_inlined
  -> EXTERN: (124,13) __getsp_inlined
  -> EXTERN: (124,38) for_trim
  -> EXTERN: (124,59) _alloca
  -> EXTERN: (124,59) for_concat
  -> EXTERN: (124,62) for_trim
  -> EXTERN: (125,13) __getsp_inlined
  -> INDIRECT-: (125,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[6(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (125,13) __resetsp_inlined
  -> EXTERN: (125,38) for_trim
  -> EXTERN: (125,59) _alloca
  -> EXTERN: (125,59) for_concat
  -> EXTERN: (125,62) for_trim
  -> INDIRECT-: (126,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[7(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (132,14) for_trim
  -> EXTERN: (132,37) for_cpstr
  -> EXTERN: (133,8) for_check_mult_overflow64
  -> EXTERN: (133,8) for_alloc_allocatable
  -> EXTERN: (133,8) for_check_mult_overflow64
  -> EXTERN: (133,8) for_alloc_allocatable
  -> INDIRECT-: (137,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[9(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (138,14) for_trim
  -> EXTERN: (138,37) for_cpstr
  -> EXTERN: (139,8) for_check_mult_overflow64
  -> EXTERN: (139,8) for_alloc_allocatable
  -> EXTERN: (139,8) for_check_mult_overflow64
  -> EXTERN: (139,8) for_alloc_allocatable
  -> INDIRECT-: (143,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[10(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (144,14) for_trim
  -> EXTERN: (144,37) for_cpstr
  -> EXTERN: (145,8) for_check_mult_overflow64
  -> EXTERN: (145,8) for_alloc_allocatable
  -> EXTERN: (145,8) for_check_mult_overflow64
  -> EXTERN: (145,8) for_alloc_allocatable
  -> INDIRECT-: (149,13)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[11(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (151,13) __resetsp_inlined
  -> EXTERN: (151,13) REPORT_ERROR
  -> EXTERN: (151,13) __getsp_inlined
  -> EXTERN: (151,46) for_concat
  -> EXTERN: (151,46) _alloca
  -> EXTERN: (151,49) for_trim
  -> INDIRECT-: (157,10)  (*((P64*) *((P64*) (comm_cl_mod_mp_constructor_$CONSTRUCTOR_V$1a3d.0.2 + 56(SI64)))))[12(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(128,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=3

   LOOP BEGIN at comm_Cl_mod.f90(128,11)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,:) (128:11) and constructor(:,:) (128:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,:) (128:11) and constructor(:,:) (128:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_Cl_mod.f90(128,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference constructor(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.500
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 2 
         remark #15477: vector cost: 0.370 
         remark #15478: estimated potential speedup: 4.920 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(128,11)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=96
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(129,11)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,1) (129:11) and constructor(:,1) (129:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,1) (129:11) and constructor(:,1) (129:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(129,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference constructor(:,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(129,11)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(130,39)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,:) (130:39) and constructor(:,:) (130:39)
   remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(:,:) (130:39) and constructor(:,:) (130:39)
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25015: Estimate of max trip count of loop=2

   LOOP BEGIN at comm_Cl_mod.f90(130,39)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(130,39)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference constructor(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.833
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(130,39)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference constructor(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(130,39)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(135,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%PRIOR(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cpar(id_abs,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(141,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%PRIOR(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cpar(id_abs,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(147,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%PRIOR(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <cpar(id_abs,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(81,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(81,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_Cl_mod.f90(84,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_Cl_mod.f90(84,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_Cl_mod.f90(84,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_Cl_mod.f90(88,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_Cl_mod.f90(88,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_Cl_mod.f90(88,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_Cl_mod.f90(91,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_Cl_mod.f90(91,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_Cl_mod.f90(91,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_Cl_mod.f90(95,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_Cl_mod.f90(95,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_Cl_mod.f90(95,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_Cl_mod.f90(96,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_Cl_mod.f90(96,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_Cl_mod.f90(102,18):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(102,18):remark #34026: call to memmove implemented as a call to optimized library version
comm_Cl_mod.f90(128,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(128,11):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(129,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(129,11):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(70,12):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_constructor_] comm_Cl_mod.f90:70

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :    1285
            Global    :     165
            Local     :    1120
        Regenerable   :     200
        Spilled       :      20
        
    Routine stack
        Variables     :    7336 bytes*
            Reads     :      13 [2.16e+00 ~ 0.3%]
            Writes    :      74 [2.05e+01 ~ 2.8%]
        Spills        :     120 bytes*
            Reads     :      37 [6.23e+00 ~ 0.8%]
            Writes    :      15 [4.43e+00 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::UPDATEPOWLAW

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::UPDATEPOWLAW) [3/21=14.3%] comm_Cl_mod.f90(162,14)
  -> EXTERN: (170,5) for_realloc_lhs
  -> EXTERN: (171,5) for_realloc_lhs
  -> EXTERN: (177,66) pow


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (170:5) has aligned access
   remark #15388: vectorization support: reference amp(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (170:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <amp(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(170,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (171:5) has aligned access
   remark #15388: vectorization support: reference beta(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (171:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <beta(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(171,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(172,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(172,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (172:5) and at (172:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (172:5) and at (172:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_Cl_mod.f90(172,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (172:5) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(172,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(174,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (177:11) and at (179:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (179:8) and at (177:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (177:66) and at (179:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (179:8) and at (177:66)

   LOOP BEGIN at comm_Cl_mod.f90(176,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (177:11) and at (177:66)
      remark #17106: parallel dependence: assumed ANTI dependence between at (177:66) and at (177:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (177:66) and at (177:11)
      remark #15346: vector dependence: assumed FLOW dependence between at (177:11) and at (177:66)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(172,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(172,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(162,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_updatepowlaw_] comm_Cl_mod.f90:162

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     184
            Global    :      74
            Local     :     110
        Regenerable   :       7
        Spilled       :      26
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      25 [1.28e+02 ~ 9.3%]
            Writes    :      21 [6.70e+01 ~ 4.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::UPDATEEXPONENTIAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::UPDATEEXPONENTIAL) [4/21=19.0%] comm_Cl_mod.f90(184,14)
  -> EXTERN: (192,5) for_realloc_lhs
  -> EXTERN: (193,5) for_realloc_lhs
  -> EXTERN: (199,35) exp


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (192:5) has aligned access
   remark #15388: vectorization support: reference amp(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (192:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <amp(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(192,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (193:5) has aligned access
   remark #15388: vectorization support: reference beta(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (193:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <beta(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(193,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(194,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(194,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (194:5) and at (194:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (194:5) and at (194:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_Cl_mod.f90(194,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (194:5) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(194,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(196,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (199:11) and at (201:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (201:8) and at (199:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (199:35) and at (201:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (201:8) and at (199:35)

   LOOP BEGIN at comm_Cl_mod.f90(198,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (199:11) and at (199:35)
      remark #17106: parallel dependence: assumed ANTI dependence between at (199:35) and at (199:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (199:35) and at (199:11)
      remark #15346: vector dependence: assumed FLOW dependence between at (199:11) and at (199:35)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(194,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(194,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(184,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_updateexponential_] comm_Cl_mod.f90:184

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     185
            Global    :      74
            Local     :     111
        Regenerable   :       7
        Spilled       :      26
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     168 bytes*
            Reads     :      25 [1.28e+02 ~ 9.3%]
            Writes    :      21 [6.70e+01 ~ 4.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::UPDATEGAUSSIAN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::UPDATEGAUSSIAN) [5/21=23.8%] comm_Cl_mod.f90(206,14)
  -> EXTERN: (214,5) for_realloc_lhs
  -> EXTERN: (215,5) for_realloc_lhs
  -> EXTERN: (221,35) exp


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (214:5) has aligned access
   remark #15388: vectorization support: reference amp(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (214:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <amp(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(214,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (215:5) has aligned access
   remark #15388: vectorization support: reference beta(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (215:5) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <beta(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(215,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(216,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(216,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (216:5) and at (216:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (216:5) and at (216:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_Cl_mod.f90(216,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (216:5) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(216,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(218,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (221:11) and at (221:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (221:11) and at (221:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(220,8)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(220,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (221:11) has aligned access   [ comm_Cl_mod.f90(221,11) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.097
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 203 
      remark #15477: vector cost: 87.500 
      remark #15478: estimated potential speedup: 2.290 
      remark #15482: vectorized math library calls: 1 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(220,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(216,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(216,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(206,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_updategaussian_] comm_Cl_mod.f90:206

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4 zmm8-zmm15]
        
    Routine temporaries
        Total         :     279
            Global    :     102
            Local     :     177
        Regenerable   :      13
        Spilled       :      28
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     184 bytes*
            Reads     :      43 [1.53e+02 ~ 5.0%]
            Writes    :      34 [1.10e+02 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::UPDATES

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::UPDATES) [6/21=28.6%] comm_Cl_mod.f90(230,14)
  -> EXTERN: (230,14) _alloca
  -> EXTERN: (230,14) __getsp_inlined
  -> EXTERN: (258,13) COMPUTE_HERMITIAN_ROOT
  -> EXTERN: (267,8) __getsp_inlined
  -> EXTERN: (267,8) __resetsp_inlined
  -> EXTERN: (267,28) _alloca
  -> EXTERN: (269,13) COMPUTE_HERMITIAN_ROOT
  -> EXTERN: (282,3) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(237,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(237,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_Cl_mod.f90(237,5) ]
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(237,5)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (237:5) and at (237:5)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (237:5) and at (237:5)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(237,5)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (237:5) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(237,5)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(238,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(238,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_Cl_mod.f90(238,5) ]
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(238,5)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (238:5) and at (238:5)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (238:5) and at (238:5)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(238,5)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (238:5) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(238,5)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(239,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(239,5)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_Cl_mod.f90(239,5) ]
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(239,5)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (239:5) and at (239:5)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (239:5) and at (239:5)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(239,5)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (239:5) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(239,5)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(240,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between self%COMM_CL(2) (258:13) and self (269:13)
   remark #17106: parallel dependence: assumed FLOW dependence between self (269:13) and self%COMM_CL(2) (258:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(258,13)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (245:17) and at (245:17)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (245:17) and at (245:17)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ comm_Cl_mod.f90(242,11) ]

      LOOP BEGIN at comm_Cl_mod.f90(242,11)
      <Predicate Optimized v1>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (245:17) and at (245:17)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (245:17) and at (245:17)
         remark #17106: parallel dependence: assumed FLOW dependence between ok(i) (249:26) and ok(i) (250:18)
         remark #17106: parallel dependence: assumed ANTI dependence between ok(i) (250:18) and ok(i) (249:26)
         remark #25422: Invariant Condition at line 244 hoisted out of this loop
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between ok(i) (249:26) and ok(i) (250:18)
         remark #15346: vector dependence: assumed ANTI dependence between ok(i) (250:18) and ok(i) (249:26)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(242,11)
      <Remainder, Predicate Optimized v1>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(242,11)
      <Predicate Optimized v2>
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between ok(i) (249:26) and ok(i) (250:18)
         remark #15346: vector dependence: assumed ANTI dependence between ok(i) (250:18) and ok(i) (249:26)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(242,11)
      <Remainder, Predicate Optimized v2>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(255,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (255:8) and at (255:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (255:8) and at (255:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(255,8)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(255,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (255:8) has aligned access
         remark #15388: vectorization support: reference at (255:56) has aligned access   [ comm_Cl_mod.f90(255,56) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.114
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 33 
         remark #15477: vector cost: 17.500 
         remark #15478: estimated potential speedup: 1.850 
         remark #15486: divides: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(255,8)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(255,8)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (255:8) has aligned access
         remark #15389: vectorization support: reference at (255:56) has unaligned access   [ comm_Cl_mod.f90(255,56) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.375
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(255,8)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(257,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (257:8) and at (257:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (257:8) and at (257:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (257:8) and at (257:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (257:8) and at (257:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(257,8)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (257:8) and at (257:8)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (257:8) and at (257:8)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_Cl_mod.f90(257,8)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(257,8)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference at (257:8) has aligned access
            remark #15388: vectorization support: reference at (257:8) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(257,8)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(257,8)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(267,63)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (263:14) and at (264:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (264:14) and at (263:14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(263,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (263:14)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(263,14)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(264,14)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (264:14) and at (264:14)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (264:14) and at (264:14)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(264,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (264:14) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(264,14)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(267,28)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(267,28)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:28) and at (267:28)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:28) and at (267:28)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(267,28)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (267:28) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,28)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(267,28)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 3 ) --> ( 2 1 3 ) 
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:28) and at (267:28)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:28) and at (267:28)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(267,28)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_Cl_mod.f90(267,28)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,28)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference at (267:28) has aligned access
            remark #15388: vectorization support: reference at (267:28) has aligned access
            remark #15389: vectorization support: reference at (267:28) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 0.383
            remark #15300: LOOP WAS VECTORIZED
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15450: unmasked unaligned unit stride loads: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 14 
            remark #15477: vector cost: 7.500 
            remark #15478: estimated potential speedup: 1.820 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,28)
         <Remainder loop for vectorization>
            remark #15388: vectorization support: reference at (267:28) has aligned access
            remark #15388: vectorization support: reference at (267:28) has aligned access
            remark #15389: vectorization support: reference at (267:28) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 1.095
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(267,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (267:8) and at (267:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (267:8) and at (267:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (267:8) and at (267:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (267:8) and at (267:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(267,8)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:8) and at (267:8)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (267:8) and at (267:8)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(267,8)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,8)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference at (267:8) has aligned access
            remark #15388: vectorization support: reference at (267:8) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,8)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(267,8)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(270,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (272:14) and at (273:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (273:14) and at (272:14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(272,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (272:14)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(272,14)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(273,14)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (273:14) and at (273:14)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (273:14) and at (273:14)
         remark #15542: loop was not vectorized: inner loop was already vectorized
         remark #25015: Estimate of max trip count of loop=1

         LOOP BEGIN at comm_Cl_mod.f90(273,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (273:14) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(273,14)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(237,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(237,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(238,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(238,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(239,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(239,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(257,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(257,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(257,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_Cl_mod.f90(264,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(264,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(267,28):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(267,28):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(267,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(267,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(267,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_Cl_mod.f90(273,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(273,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(230,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_updates_] comm_Cl_mod.f90:230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     810
            Global    :     298
            Local     :     512
        Regenerable   :      26
        Spilled       :     111
        
    Routine stack
        Variables     :     192 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      22 [1.20e+02 ~ 0.1%]
        Spills        :     840 bytes*
            Reads     :     285 [6.39e+03 ~ 7.3%]
            Writes    :     149 [1.63e+03 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::READ_BINFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::READ_BINFILE) [7/21=33.3%] comm_Cl_mod.f90(284,14)
  -> EXTERN: (293,12) GETLUN
  -> EXTERN: (297,5) __resetsp_inlined
  -> EXTERN: (297,5) for_open
  -> EXTERN: (297,5) __getsp_inlined
  -> EXTERN: (297,20) for_trim
  -> EXTERN: (297,25) _alloca
  -> EXTERN: (299,8) for_read_seq_fmt
  -> EXTERN: (300,8) for_cpystr
  -> EXTERN: (300,15) for_trim
  -> EXTERN: (301,34) for_trim
  -> EXTERN: (301,45) for_cpstr
  -> EXTERN: (302,8) for_read_int_lis_xmit
  -> EXTERN: (302,8) for_read_int_lis
  -> EXTERN: (305,11) for_close
  -> EXTERN: (307,17) REPORT_ERROR
  -> EXTERN: (307,17) __resetsp_inlined
  -> EXTERN: (307,17) __getsp_inlined
  -> EXTERN: (307,60) for_trim
  -> EXTERN: (307,65) _alloca
  -> EXTERN: (308,12) _alloca
  -> EXTERN: (308,12) for_concat
  -> EXTERN: (311,5) for_alloc_allocatable
  -> EXTERN: (311,5) for_check_mult_overflow64
  -> EXTERN: (311,5) for_alloc_allocatable
  -> EXTERN: (311,5) for_check_mult_overflow64
  -> EXTERN: (312,5) __resetsp_inlined
  -> EXTERN: (312,5) for_open
  -> EXTERN: (312,5) __getsp_inlined
  -> EXTERN: (312,20) for_trim
  -> EXTERN: (312,25) _alloca
  -> EXTERN: (315,8) for_read_seq_fmt
  -> EXTERN: (316,8) for_cpystr
  -> EXTERN: (316,15) for_trim
  -> EXTERN: (317,34) for_trim
  -> EXTERN: (317,45) for_cpstr
  -> EXTERN: (318,8) for_read_int_lis_xmit
  -> EXTERN: (318,8) for_read_int_lis
  -> EXTERN: (321,11) for_read_int_lis_xmit
  -> EXTERN: (321,11) for_read_int_lis_xmit
  -> EXTERN: (321,11) for_read_int_lis
  -> EXTERN: (324,11) memcpy
  -> EXTERN: (327,11) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(297,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(313,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_Cl_mod.f90(324,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between self(n,:) (324:11) and stat(:) (324:11)
      remark #17106: parallel dependence: assumed ANTI dependence between stat(:) (324:11) and self(n,:) (324:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between self(n,:) (324:11) and stat(:) (324:11)
      remark #15346: vector dependence: assumed ANTI dependence between stat(:) (324:11) and self(n,:) (324:11)
      remark #25436: completely unrolled by 6  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(284,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_read_binfile_] comm_Cl_mod.f90:284

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     394
            Global    :      78
            Local     :     316
        Regenerable   :     152
        Spilled       :      13
        
    Routine stack
        Variables     :    2902 bytes*
            Reads     :      16 [1.44e+01 ~ 2.3%]
            Writes    :      40 [5.27e+01 ~ 8.3%]
        Spills        :      64 bytes*
            Reads     :       9 [5.10e+00 ~ 0.8%]
            Writes    :       8 [4.88e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::MATMULS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::MATMULS) [8/21=38.1%] comm_Cl_mod.f90(331,14)
  -> EXTERN: (339,9) for_trim
  -> EXTERN: (339,25) for_cpstr
  -> INLINE: (353,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (354,11) __getsp_inlined
  -> EXTERN: (354,11) __resetsp_inlined
  -> EXTERN: (354,38) _alloca
  -> INLINE: (359,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (361,14) __getsp_inlined
  -> EXTERN: (361,14) __resetsp_inlined
  -> EXTERN: (361,37) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(342,14)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (342:14) and map(:,1) (342:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (342:14) and map(:,1) (342:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(342,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference map(:,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(342,14)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(344,14)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(344,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference alm(:,1) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(344,14)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(344,14)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(:,1)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(344,14)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(351,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (354:38) and at (354:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (354:11) and at (354:38)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(354,38)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (354:38) and at (354:38)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (354:38) and at (354:38)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(354,38)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (354:38) and at (354:38)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (354:38) and at (354:38)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(354,38)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(354,38)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15388: vectorization support: reference at (354:38) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(354,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (354:38) has aligned access   [ comm_Cl_mod.f90(354,38) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(354,11)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (354:38) has aligned access   [ comm_Cl_mod.f90(354,38) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.091
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(354,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(357,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (361:37) and at (361:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (361:14) and at (361:37)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(361,37)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (361:37) and at (361:37)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (361:37) and at (361:37)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(361,37)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (361:37) and at (361:37)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (361:37) and at (361:37)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(361,37)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(361,37)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15388: vectorization support: reference at (361:37) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(361,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (361:37) has aligned access   [ comm_Cl_mod.f90(361,37) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.970 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(361,14)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (361:37) has aligned access   [ comm_Cl_mod.f90(361,37) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.091
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(361,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(363,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(363,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(342,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(342,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(354,38):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(354,38):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(361,37):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(361,37):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(331,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_matmuls_] comm_Cl_mod.f90:331

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :     736
            Global    :     238
            Local     :     498
        Regenerable   :      30
        Spilled       :      69
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     504 bytes*
            Reads     :     155 [2.34e+02 ~ 6.4%]
            Writes    :      68 [2.05e+01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::MATMULSQRTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::MATMULSQRTS) [9/21=42.9%] comm_Cl_mod.f90(369,14)
  -> EXTERN: (377,9) for_trim
  -> EXTERN: (377,25) for_cpstr
  -> INLINE: (390,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (391,11) __getsp_inlined
  -> EXTERN: (391,11) __resetsp_inlined
  -> EXTERN: (391,35) _alloca
  -> INLINE: (396,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (398,14) __getsp_inlined
  -> EXTERN: (398,14) __resetsp_inlined
  -> EXTERN: (398,34) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(380,14)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (380:14) and map(:,1) (380:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (380:14) and map(:,1) (380:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(380,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference map(:,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(380,14)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(382,14)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(382,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference alm(:,1) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(382,14)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(382,14)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(:,1)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(382,14)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(388,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (391:35) and at (391:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (391:11) and at (391:35)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(391,35)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (391:35) and at (391:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (391:35) and at (391:35)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(391,35)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (391:35) and at (391:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (391:35) and at (391:35)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(391,35)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(391,35)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15388: vectorization support: reference at (391:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(391,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (391:35) has aligned access   [ comm_Cl_mod.f90(391,35) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(391,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(394,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (398:34) and at (398:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (398:14) and at (398:34)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(398,34)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (398:34) and at (398:34)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (398:34) and at (398:34)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(398,34)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (398:34) and at (398:34)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (398:34) and at (398:34)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(398,34)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(398,34)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15388: vectorization support: reference at (398:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(398,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (398:34) has aligned access   [ comm_Cl_mod.f90(398,34) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(398,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(400,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(400,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(380,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(380,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(391,35):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(391,35):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(398,34):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(398,34):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(369,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_matmulsqrts_] comm_Cl_mod.f90:369

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :     688
            Global    :     220
            Local     :     468
        Regenerable   :      30
        Spilled       :      68
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     496 bytes*
            Reads     :     151 [2.32e+02 ~ 6.5%]
            Writes    :      72 [1.95e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::MATMULSQRTINVS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::MATMULSQRTINVS) [10/21=47.6%] comm_Cl_mod.f90(407,14)
  -> EXTERN: (415,9) for_trim
  -> EXTERN: (415,25) for_cpstr
  -> INLINE: (428,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (429,11) __getsp_inlined
  -> EXTERN: (429,11) __resetsp_inlined
  -> EXTERN: (429,35) _alloca
  -> INLINE: (434,20) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp
  -> EXTERN: (436,14) __getsp_inlined
  -> EXTERN: (436,14) __resetsp_inlined
  -> EXTERN: (436,34) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(418,14)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (418:14) and map(:,1) (418:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between map(:,1) (418:14) and map(:,1) (418:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(418,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference map(:,1) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(418,14)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(420,14)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(420,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference alm(:,1) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(420,14)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(420,14)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(:,1)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(420,14)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(426,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (429:35) and at (429:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (429:11) and at (429:35)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(429,35)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (429:35) and at (429:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (429:35) and at (429:35)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(429,35)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (429:35) and at (429:35)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (429:35) and at (429:35)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(429,35)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(429,35)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15388: vectorization support: reference at (429:35) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(429,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (429:35) has aligned access   [ comm_Cl_mod.f90(429,35) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(429,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(432,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (436:34) and at (436:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (436:14) and at (436:34)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(436,34)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (436:34) and at (436:34)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (436:34) and at (436:34)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.660 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(436,34)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (436:34) and at (436:34)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (436:34) and at (436:34)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 2 
         remark #15450: unmasked unaligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 18 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 8
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.667
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(436,34)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.139
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 1.960 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(436,34)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15388: vectorization support: reference at (436:34) has aligned access
         remark #15389: vectorization support: reference self(:,:,l) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.000
      LOOP END
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(436,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (436:34) has aligned access   [ comm_Cl_mod.f90(436,34) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.056
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(436,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(438,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <alm(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(438,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(418,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(418,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(429,35):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(429,35):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(436,34):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(436,34):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(407,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_matmulsqrtinvs_] comm_Cl_mod.f90:407

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   25[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :     690
            Global    :     222
            Local     :     468
        Regenerable   :      32
        Spilled       :      68
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     496 bytes*
            Reads     :     150 [2.31e+02 ~ 6.5%]
            Writes    :      67 [1.95e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::GET_CL_APOD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::GET_CL_APOD) [11/21=52.4%] comm_Cl_mod.f90(444,12)
  -> EXTERN: (456,25) exp
  -> EXTERN: (464,25) exp


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(444,12):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_get_cl_apod_] comm_Cl_mod.f90:444

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rbx rsi rdi zmm0-zmm1]
        
    Routine temporaries
        Total         :      49
            Global    :      15
            Local     :      34
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::READ_CL_FILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::READ_CL_FILE) [12/21=57.1%] comm_Cl_mod.f90(470,14)
  -> EXTERN: (480,5) __resetsp_inlined
  -> EXTERN: (480,5) __getsp_inlined
  -> EXTERN: (480,16) for_trim
  -> EXTERN: (480,21) _alloca
  -> EXTERN: (481,12) GETLUN
  -> EXTERN: (484,23) for_cpstr
  -> EXTERN: (486,8) for_check_mult_overflow64
  -> EXTERN: (486,8) for_alloc_allocatable
  -> EXTERN: (487,13) FITSTOOLS^FITS2CL_D
  -> EXTERN: (496,8) for_dealloc_allocatable
  -> EXTERN: (500,8) __resetsp_inlined
  -> EXTERN: (500,8) for_open
  -> EXTERN: (500,8) __getsp_inlined
  -> EXTERN: (500,23) for_trim
  -> EXTERN: (500,28) _alloca
  -> EXTERN: (502,11) for_read_seq_fmt
  -> EXTERN: (503,11) for_cpystr
  -> EXTERN: (503,18) for_trim
  -> EXTERN: (504,37) for_trim
  -> EXTERN: (504,48) for_cpstr
  -> EXTERN: (506,14) for_read_int_lis_xmit
  -> EXTERN: (506,14) for_read_int_lis
  -> EXTERN: (512,14) for_read_int_lis_xmit
  -> EXTERN: (512,14) for_read_int_lis_xmit
  -> EXTERN: (512,14) for_read_int_lis_xmit
  -> EXTERN: (512,14) for_read_int_lis_xmit
  -> EXTERN: (512,14) for_read_int_lis
  -> EXTERN: (521,14) for_close
  -> EXTERN: (525,33) __getsp_inlined
  -> EXTERN: (525,33) for_write_seq_lis
  -> EXTERN: (525,33) __resetsp_inlined
  -> EXTERN: (525,79) for_trim
  -> EXTERN: (525,84) _alloca
  -> EXTERN: (525,92) _alloca
  -> EXTERN: (525,92) for_concat
  -> EXTERN: (528,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(483,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(483,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (483:5) and at (483:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (483:5) and at (483:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_Cl_mod.f90(483,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (483:5) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(483,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Distributed chunk1, Predicate Optimized v1>
   remark #25426: Loop Distributed (2 way) 
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25422: Invariant Condition at line 490 hoisted out of this loop
   remark #15389: vectorization support: reference at (489:11) has unaligned access   [ comm_Cl_mod.f90(489,11) ]
   remark #15388: vectorization support: reference CLIN(l,1) has aligned access
   remark #15389: vectorization support: reference at (491:14) has unaligned access   [ comm_Cl_mod.f90(491,14) ]
   remark #15389: vectorization support: reference CLIN(l,2) has unaligned access   [ comm_Cl_mod.f90(491,14) ]
   remark #15389: vectorization support: reference at (492:14) has unaligned access   [ comm_Cl_mod.f90(492,14) ]
   remark #15389: vectorization support: reference CLIN(l,3) has unaligned access   [ comm_Cl_mod.f90(492,14) ]
   remark #15389: vectorization support: reference at (493:14) has unaligned access   [ comm_Cl_mod.f90(493,14) ]
   remark #15389: vectorization support: reference CLIN(l,4) has unaligned access   [ comm_Cl_mod.f90(493,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.091
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 3 
   remark #15451: unmasked unaligned unit stride stores: 4 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 47 
   remark #15477: vector cost: 31.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Remainder loop for vectorization, Distributed chunk1, Predicate Optimized v1>
   remark #15389: vectorization support: reference at (489:11) has unaligned access   [ comm_Cl_mod.f90(489,11) ]
   remark #15388: vectorization support: reference CLIN(l,1) has aligned access
   remark #15389: vectorization support: reference at (491:14) has unaligned access   [ comm_Cl_mod.f90(491,14) ]
   remark #15389: vectorization support: reference CLIN(l,2) has unaligned access   [ comm_Cl_mod.f90(491,14) ]
   remark #15389: vectorization support: reference at (492:14) has unaligned access   [ comm_Cl_mod.f90(492,14) ]
   remark #15389: vectorization support: reference CLIN(l,3) has unaligned access   [ comm_Cl_mod.f90(492,14) ]
   remark #15389: vectorization support: reference at (493:14) has unaligned access   [ comm_Cl_mod.f90(493,14) ]
   remark #15389: vectorization support: reference CLIN(l,4) has unaligned access   [ comm_Cl_mod.f90(493,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.418
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Remainder loop for vectorization, Distributed chunk1, Predicate Optimized v1>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Distributed chunk1, Predicate Optimized v2>
   remark #15389: vectorization support: reference at (489:11) has unaligned access   [ comm_Cl_mod.f90(489,11) ]
   remark #15388: vectorization support: reference CLIN(l,1) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.028
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 35 
   remark #15477: vector cost: 22.500 
   remark #15478: estimated potential speedup: 1.540 
   remark #15486: divides: 1 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Remainder loop for vectorization, Distributed chunk1, Predicate Optimized v2>
   remark #15389: vectorization support: reference at (489:11) has unaligned access   [ comm_Cl_mod.f90(489,11) ]
   remark #15388: vectorization support: reference CLIN(l,1) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.306
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(489,27)
<Remainder loop for vectorization, Distributed chunk1, Predicate Optimized v2>
LOOP END

LOOP BEGIN at comm_Cl_mod.f90(500,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(478,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_Cl_mod.f90(483,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(483,5):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(470,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_read_cl_file_] comm_Cl_mod.f90:470

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     718
            Global    :     147
            Local     :     571
        Regenerable   :     159
        Spilled       :      42
        
    Routine stack
        Variables     :   11604 bytes*
            Reads     :      17 [7.80e+00 ~ 0.9%]
            Writes    :      61 [3.40e+01 ~ 4.0%]
        Spills        :     280 bytes*
            Reads     :      60 [1.56e+01 ~ 1.8%]
            Writes    :      52 [1.52e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::BINCLS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::BINCLS) [13/21=61.9%] comm_Cl_mod.f90(530,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(537,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (546:14) and at (540:14)
   remark #17106: parallel dependence: assumed FLOW dependence between at (540:14) and at (546:14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(538,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (546:14) and at (540:14)
      remark #17106: parallel dependence: assumed FLOW dependence between at (540:14) and at (546:14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_Cl_mod.f90(545,11)
      <Peeled loop for vectorization, Distributed chunk1>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(545,11)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #25426: Loop Distributed (2 way) 
         remark #15388: vectorization support: reference at (546:36) has aligned access   [ comm_Cl_mod.f90(546,36) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.833
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 2.130 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(545,11)
      <Remainder loop for vectorization, Distributed chunk1>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(545,11)
      <Distributed chunk2>
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.625
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 2.170 
         remark #15487: type converts: 1 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(545,11)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(549,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(549,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (549:11) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.540 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(549,11)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at comm_Cl_mod.f90(540,14)
         remark #25408: memset generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (540:14) and at (540:14)
         remark #17106: parallel dependence: assumed OUTPUT dependence between at (540:14) and at (540:14)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_Cl_mod.f90(540,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15389: vectorization support: reference at (540:14) has unaligned access
            remark #15381: vectorization support: unaligned access used inside loop body
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 2
            remark #15309: vectorization support: normalized vectorization overhead 0.300
            remark #15300: LOOP WAS VECTORIZED
            remark #15451: unmasked unaligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 2.500 
            remark #15478: estimated potential speedup: 1.450 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=3
         LOOP END

         LOOP BEGIN at comm_Cl_mod.f90(540,14)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(540,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(540,14):remark #34026: call to memset implemented as a call to optimized library version
comm_Cl_mod.f90(530,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_bincls_] comm_Cl_mod.f90:530

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11]
        
    Routine temporaries
        Total         :     224
            Global    :      89
            Local     :     135
        Regenerable   :       8
        Spilled       :      20
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     152 bytes*
            Reads     :      28 [2.46e+02 ~ 3.3%]
            Writes    :      19 [9.16e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::SAMPLECLS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::SAMPLECLS) [14/21=66.7%] comm_Cl_mod.f90(555,14)
  -> EXTERN: (560,18) memmove
  -> EXTERN: (560,18) _alloca
  -> EXTERN: (560,18) for_trim
  -> EXTERN: (561,11) for_cpstr
  -> EXTERN: (563,11) for_cpstr
  -> DELETED: (564,13) COMM_CL_MOD::SAMPLE_CLS_INVERSE_WISHART (isz = 1) (sz = 6)
  -> EXTERN: (565,11) for_cpstr
  -> DELETED: (566,13) COMM_CL_MOD::SAMPLE_CLS_POWLAW (isz = 1) (sz = 6)
  -> EXTERN: (567,11) for_cpstr
  -> DELETED: (568,13) COMM_CL_MOD::SAMPLE_CLS_POWLAW (isz = 1) (sz = 6)
  -> EXTERN: (568,13) __resetsp_inlined
  -> EXTERN: (568,13) __getsp_inlined


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(560,18):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(560,18):remark #34026: call to memmove implemented as a call to optimized library version
comm_Cl_mod.f90(555,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_samplecls_] comm_Cl_mod.f90:555

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbx rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      36
            Global    :      14
            Local     :      22
        Regenerable   :       9
        Spilled       :       3
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::SAMPLE_CLS_POWLAW

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::SAMPLE_CLS_POWLAW) [15/21=71.4%] comm_Cl_mod.f90(581,14)


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(581,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_sample_cls_powlaw_] comm_Cl_mod.f90:581

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::SAMPLE_CLS_INVERSE_WISHART

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::SAMPLE_CLS_INVERSE_WISHART) [16/21=76.2%] comm_Cl_mod.f90(573,14)


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(573,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_sample_cls_inverse_wishart_] comm_Cl_mod.f90:573

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rsi rdi]
        
    Routine temporaries
        Total         :       8
            Global    :       0
            Local     :       8
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::WRITEFITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::WRITEFITS) [17/21=81.0%] comm_Cl_mod.f90(589,14)
  -> EXTERN: (599,9) for_trim
  -> EXTERN: (599,25) for_cpstr
  -> EXTERN: (602,10) INT2STRING
  -> EXTERN: (603,10) INT2STRING
  -> EXTERN: (605,18) memmove
  -> EXTERN: (605,18) _alloca
  -> EXTERN: (605,18) for_trim
  -> EXTERN: (606,11) for_cpstr
  -> EXTERN: (608,11) for_cpstr
  -> (609,13) COMM_CL_MOD::WRITE_DL_TO_FITS (isz = 525) (sz = 540)
     [[ Inlining would exceed -inline-max-size value (540>230) <2>]]
  -> EXTERN: (609,13) __resetsp_inlined
  -> EXTERN: (609,13) __getsp_inlined
  -> EXTERN: (609,52) _alloca
  -> EXTERN: (609,52) for_concat
  -> EXTERN: (610,11) for_cpstr
  -> (611,13) COMM_CL_MOD::WRITE_DL_TO_FITS (isz = 525) (sz = 540)
     [[ Inlining would exceed -inline-max-size value (540>230) <2>]]
  -> EXTERN: (611,13) __resetsp_inlined
  -> EXTERN: (611,13) __getsp_inlined
  -> EXTERN: (611,52) _alloca
  -> EXTERN: (611,52) for_concat
  -> EXTERN: (612,13) __getsp_inlined
  -> (612,13) COMM_CL_MOD::WRITE_POWLAW_TO_FITS (isz = 497) (sz = 512)
     [[ Inlining would exceed -inline-max-size value (512>230) <2>]]
  -> EXTERN: (612,13) __resetsp_inlined
  -> EXTERN: (612,43) _alloca
  -> EXTERN: (612,43) for_concat
  -> EXTERN: (613,11) for_cpstr
  -> (614,13) COMM_CL_MOD::WRITE_DL_TO_FITS (isz = 525) (sz = 540)
     [[ Inlining would exceed -inline-max-size value (540>230) <2>]]
  -> EXTERN: (614,13) __resetsp_inlined
  -> EXTERN: (614,13) __getsp_inlined
  -> EXTERN: (614,52) _alloca
  -> EXTERN: (614,52) for_concat
  -> EXTERN: (615,13) __getsp_inlined
  -> (615,13) COMM_CL_MOD::WRITE_POWLAW_TO_FITS (isz = 497) (sz = 512)
     [[ Inlining would exceed -inline-max-size value (512>230) <2>]]
  -> EXTERN: (615,13) __resetsp_inlined
  -> EXTERN: (615,13) __resetsp_inlined
  -> EXTERN: (615,13) __getsp_inlined
  -> EXTERN: (615,43) _alloca
  -> EXTERN: (615,43) for_concat


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(605,18):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_Cl_mod.f90(605,18):remark #34026: call to memmove implemented as a call to optimized library version
comm_Cl_mod.f90(589,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_writefits_] comm_Cl_mod.f90:589

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :     181
            Global    :      44
            Local     :     137
        Regenerable   :      72
        Spilled       :       7
        
    Routine stack
        Variables     :    1290 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      32 [2.98e-01 ~ 0.5%]
        Spills        :      16 bytes*
            Reads     :       4 [8.39e-02 ~ 0.1%]
            Writes    :       2 [1.11e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::WRITE_POWLAW_TO_FITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::WRITE_POWLAW_TO_FITS) [18/21=85.7%] comm_Cl_mod.f90(654,14)
  -> EXTERN: (664,9) for_trim
  -> EXTERN: (664,27) for_cpstr
  -> EXTERN: (666,15) GETLUN
  -> EXTERN: (667,5) __resetsp_inlined
  -> EXTERN: (667,5) for_concat
  -> EXTERN: (667,5) __getsp_inlined
  -> EXTERN: (667,16) for_trim
  -> EXTERN: (667,48) for_trim
  -> EXTERN: (668,12) for_trim
  -> EXTERN: (668,17) _alloca
  -> EXTERN: (671,8) for_open
  -> EXTERN: (671,23) for_trim
  -> EXTERN: (673,11) for_write_seq_lis
  -> EXTERN: (675,11) for_write_seq_lis
  -> EXTERN: (677,14) for_close
  -> EXTERN: (681,5) for_open
  -> EXTERN: (681,20) for_trim
  -> EXTERN: (683,8) for_write_seq_fmt
  -> EXTERN: (683,8) for_write_seq_fmt_xmit
  -> EXTERN: (683,8) for_write_seq_fmt_xmit
  -> EXTERN: (685,8) for_write_seq_fmt_xmit
  -> EXTERN: (685,8) for_write_seq_fmt_xmit
  -> EXTERN: (685,8) for_write_seq_fmt
  -> EXTERN: (687,11) for_close
  -> EXTERN: (690,13) WRITE_HDF_1D_DP
  -> EXTERN: (690,13) __resetsp_inlined
  -> EXTERN: (690,13) __getsp_inlined
  -> EXTERN: (690,32) for_trim
  -> EXTERN: (690,37) for_adjustl
  -> EXTERN: (690,37) _alloca
  -> EXTERN: (690,45) _alloca
  -> EXTERN: (690,54) _alloca
  -> EXTERN: (690,54) for_concat
  -> EXTERN: (691,13) __getsp_inlined
  -> EXTERN: (691,13) WRITE_HDF_1D_DP
  -> EXTERN: (691,13) __resetsp_inlined
  -> EXTERN: (691,32) for_trim
  -> EXTERN: (691,37) for_adjustl
  -> EXTERN: (691,37) _alloca
  -> EXTERN: (691,45) _alloca
  -> EXTERN: (691,54) _alloca
  -> EXTERN: (691,54) for_concat


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(654,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_write_powlaw_to_fits_] comm_Cl_mod.f90:654

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     257
            Global    :      67
            Local     :     190
        Regenerable   :     101
        Spilled       :      11
        
    Routine stack
        Variables     :    3488 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      51 [6.43e+00 ~ 8.2%]
        Spills        :      48 bytes*
            Reads     :      13 [1.38e+00 ~ 1.8%]
            Writes    :       6 [1.73e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::WRITE_DL_TO_FITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::WRITE_DL_TO_FITS) [19/21=90.5%] comm_Cl_mod.f90(620,14)
  -> EXTERN: (631,9) for_trim
  -> EXTERN: (631,27) for_cpstr
  -> EXTERN: (633,12) GETLUN
  -> EXTERN: (634,5) __resetsp_inlined
  -> EXTERN: (634,5) for_concat
  -> EXTERN: (634,5) __getsp_inlined
  -> EXTERN: (634,16) for_trim
  -> EXTERN: (634,48) for_trim
  -> EXTERN: (634,75) for_trim
  -> EXTERN: (634,80) _alloca
  -> EXTERN: (635,5) for_open
  -> EXTERN: (635,20) for_trim
  -> EXTERN: (637,8) for_write_seq_lis
  -> EXTERN: (639,8) for_write_seq_lis
  -> EXTERN: (643,11) for_write_seq_fmt
  -> EXTERN: (643,11) _alloca
  -> EXTERN: (643,11) for_write_seq_fmt_xmit
  -> EXTERN: (643,11) __resetsp_inlined
  -> EXTERN: (643,11) __getsp_inlined
  -> EXTERN: (645,11) for_write_seq_fmt
  -> EXTERN: (645,11) _alloca
  -> EXTERN: (645,11) for_write_seq_fmt_xmit
  -> EXTERN: (645,11) __resetsp_inlined
  -> EXTERN: (645,11) __getsp_inlined
  -> EXTERN: (648,11) for_close
  -> EXTERN: (650,27) WRITE_HDF_2D_DP
  -> EXTERN: (650,27) __resetsp_inlined
  -> EXTERN: (650,27) __getsp_inlined
  -> EXTERN: (650,51) for_trim
  -> EXTERN: (650,56) for_adjustl
  -> EXTERN: (650,56) _alloca
  -> EXTERN: (650,64) _alloca
  -> EXTERN: (650,73) _alloca
  -> EXTERN: (650,73) for_concat
  -> EXTERN: (652,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(641,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (643:11) and at (645:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (645:11) and at (643:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(643,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (643:43) has aligned access   [ comm_Cl_mod.f90(643,43) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(l,:)>, stride is unknown to compiler   [ comm_Cl_mod.f90(643,43) ]
      remark #15305: vectorization support: vector length 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(643,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(645,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (645:44) has aligned access   [ comm_Cl_mod.f90(645,44) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(l,:)>, stride is unknown to compiler   [ comm_Cl_mod.f90(645,44) ]
      remark #15305: vectorization support: vector length 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.600 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(645,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(629,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_Cl_mod.f90(620,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_write_dl_to_fits_] comm_Cl_mod.f90:620

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     258
            Global    :      82
            Local     :     176
        Regenerable   :      86
        Spilled       :      14
        
    Routine stack
        Variables     :    2960 bytes*
            Reads     :       2 [1.03e+00 ~ 0.5%]
            Writes    :      43 [1.56e+01 ~ 6.8%]
        Spills        :      72 bytes*
            Reads     :      19 [7.23e+00 ~ 3.1%]
            Writes    :      10 [3.69e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::WRITE_SIGMA_L

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::WRITE_SIGMA_L) [20/21=95.2%] comm_Cl_mod.f90(696,14)
  -> EXTERN: (706,12) GETLUN
  -> EXTERN: (707,5) __resetsp_inlined
  -> EXTERN: (707,5) for_open
  -> EXTERN: (707,5) __getsp_inlined
  -> EXTERN: (707,20) for_trim
  -> EXTERN: (707,25) _alloca
  -> EXTERN: (709,8) for_write_seq_lis
  -> EXTERN: (711,8) for_write_seq_lis
  -> EXTERN: (715,11) for_write_seq_fmt
  -> EXTERN: (715,11) _alloca
  -> EXTERN: (715,11) for_write_seq_fmt_xmit
  -> EXTERN: (715,11) __resetsp_inlined
  -> EXTERN: (715,11) __getsp_inlined
  -> EXTERN: (717,11) for_write_seq_fmt
  -> EXTERN: (717,11) _alloca
  -> EXTERN: (717,11) for_write_seq_fmt_xmit
  -> EXTERN: (717,11) __resetsp_inlined
  -> EXTERN: (717,11) __getsp_inlined
  -> EXTERN: (720,11) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_Cl_mod.f90(713,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (715:11) and at (717:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (717:11) and at (715:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_Cl_mod.f90(715,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (715:65) has aligned access   [ comm_Cl_mod.f90(715,65) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.013
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 37 
      remark #15477: vector cost: 20.000 
      remark #15478: estimated potential speedup: 1.820 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(715,11)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (715:65) has aligned access   [ comm_Cl_mod.f90(715,65) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.286
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(715,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(717,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (717:66) has aligned access   [ comm_Cl_mod.f90(717,66) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.013
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 37 
      remark #15477: vector cost: 20.000 
      remark #15478: estimated potential speedup: 1.820 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(717,11)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (717:66) has aligned access   [ comm_Cl_mod.f90(717,66) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.286
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_Cl_mod.f90(717,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(696,14):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_write_sigma_l_] comm_Cl_mod.f90:696

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     241
            Global    :      87
            Local     :     154
        Regenerable   :      50
        Spilled       :      24
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      19 [3.08e+01 ~ 1.6%]
        Spills        :     152 bytes*
            Reads     :      61 [1.43e+02 ~ 7.3%]
            Writes    :      28 [4.25e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CL_MOD::GETCL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CL_MOD::GETCL) [21/21=100.0%] comm_Cl_mod.f90(724,12)
  -> INLINE: (738,21) COMM_CL_MOD::GET_CL_APOD (isz = 80) (sz = 91)
    -> EXTERN: (456,25) exp
    -> EXTERN: (464,25) exp


    Report from: Code generation optimizations [cg]

comm_Cl_mod.f90(724,12):remark #34051: REGISTER ALLOCATION : [comm_cl_mod_mp_getcl_] comm_Cl_mod.f90:724

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm2]
        
    Routine temporaries
        Total         :      79
            Global    :      17
            Local     :      62
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [2.30e-01 ~ 0.4%]
            Writes    :       2 [2.30e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

<2> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

