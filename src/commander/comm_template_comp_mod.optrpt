Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_template_comp_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_template_comp_mod._) [1/13=7.7%] comm_template_comp_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod._] comm_template_comp_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::EVALSED

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::EVALSED) [2/13=15.4%] comm_template_comp_mod.f90(155,12)


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(155,12):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_evalsed_] comm_template_comp_mod.f90:155

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8 zmm0]
        
    Routine temporaries
        Total         :      17
            Global    :       0
            Local     :      17
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::EVALTEMPLATEBAND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::EVALTEMPLATEBAND) [3/13=23.1%] comm_template_comp_mod.f90(170,12)
  -> EXTERN: (170,12) for_deallocate
  -> EXTERN: (170,49) for_deallocate
  -> EXTERN: (183,12) for_check_mult_overflow64
  -> EXTERN: (183,12) for_alloc_allocatable
  -> EXTERN: (197,10) mpi_bcast_
  -> EXTERN: (199,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(186,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(186,8)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between evaltemplateband(:,:) (186:8) and evaltemplateband(:,:) (186:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between evaltemplateband(:,:) (186:8) and evaltemplateband(:,:) (186:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_template_comp_mod.f90(186,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference evaltemplateband(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(186,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(199,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(199,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(199,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference evaltemplateband(:,:) has aligned access
      remark #15388: vectorization support: reference at (199:24) has aligned access   [ comm_template_comp_mod.f90(199,24) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.930 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(199,5)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(199,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(186,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(186,8):remark #34026: call to memset implemented as a call to optimized library version
comm_template_comp_mod.f90(170,12):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_evaltemplateband_] comm_template_comp_mod.f90:170

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     217
            Global    :      61
            Local     :     156
        Regenerable   :      32
        Spilled       :      20
        
    Routine stack
        Variables     :     116 bytes*
            Reads     :       2 [5.73e-01 ~ 0.1%]
            Writes    :      13 [5.75e+00 ~ 0.6%]
        Spills        :     120 bytes*
            Reads     :      23 [1.59e+01 ~ 1.7%]
            Writes    :      18 [1.01e+01 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::PROJECTTEMPLATEBAND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::PROJECTTEMPLATEBAND) [4/13=30.8%] comm_template_comp_mod.f90(204,12)
  -> EXTERN: (204,12) for_deallocate
  -> EXTERN: (216,47) for_alloc_allocatable
  -> EXTERN: (224,10) mpi_reduce_
  -> EXTERN: (227,3) for_dealloc_allocatable
  -> EXTERN: (227,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(219,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(219,8)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between projecttemplateband(:,:) (219:8) and projecttemplateband(:,:) (219:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between projecttemplateband(:,:) (219:8) and projecttemplateband(:,:) (219:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_template_comp_mod.f90(219,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference projecttemplateband(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(219,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(223,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(223,11)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(223,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (223:11) has aligned access
      remark #15388: vectorization support: reference at (223:11) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.031
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.920 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(223,11)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(223,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(225,25)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(225,25)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(225,25)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference projecttemplateband(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(225,25)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(214,51):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(214,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(219,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(219,8):remark #34026: call to memset implemented as a call to optimized library version
comm_template_comp_mod.f90(204,12):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_projecttemplateband_] comm_template_comp_mod.f90:204

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     277
            Global    :      81
            Local     :     196
        Regenerable   :      29
        Spilled       :      17
        
    Routine stack
        Variables     :     212 bytes*
            Reads     :       5 [2.29e+00 ~ 0.2%]
            Writes    :      17 [1.26e+01 ~ 1.2%]
        Spills        :      96 bytes*
            Reads     :      21 [1.87e+01 ~ 1.7%]
            Writes    :      15 [9.73e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::UPDATETEMPLATEPRECOND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::UPDATETEMPLATEPRECOND) [5/13=38.5%] comm_template_comp_mod.f90(392,14)


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(392,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_updatetemplateprecond_] comm_template_comp_mod.f90:392

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :       7
            Global    :       0
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::APPLYTEMPLATEPRECOND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::APPLYTEMPLATEPRECOND) [6/13=46.2%] comm_template_comp_mod.f90(402,14)
  -> EXTERN: (416,5) for_alloc_allocatable
  -> EXTERN: (416,5) for_check_mult_overflow64
  -> EXTERN: (422,21) strcmp
  -> INDIRECT-: (428,16)  (*((P64*) comm_template_comp_mod_mp_applytemplateprecond_$C$65_V$43ae.0.11))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (431,13) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (434,13)  (*((P64*) comm_template_comp_mod_mp_applytemplateprecond_$C$65_V$43ae.0.11))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (435,8) for_dealloc_allocatable
  -> EXTERN: (439,5) __resetsp_inlined
  -> EXTERN: (439,5) for_realloc_lhs
  -> EXTERN: (439,5) __getsp_inlined
  -> EXTERN: (439,9) _alloca
  -> EXTERN: (446,21) strcmp
  -> INDIRECT-: (452,16)  (*((P64*) comm_template_comp_mod_mp_applytemplateprecond_$C$65_V$43ae.0.11))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (455,8) for_alloc_allocatable
  -> EXTERN: (457,13) CR_INSERT_COMP_2D
  -> INDIRECT-: (459,13)  (*((P64*) comm_template_comp_mod_mp_applytemplateprecond_$C$65_V$43ae.0.11))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (460,8) for_dealloc_allocatable
  -> EXTERN: (463,5) for_dealloc_allocatable
  -> EXTERN: (465,3) for_dealloc_allocatable
  -> EXTERN: (465,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(417,5)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (417:5) and Y(:) (417:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (417:5) and Y(:) (417:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(417,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference Y(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(417,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(446,21)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_template_comp_mod.f90(422,21)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(439,9)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (439:9) and at (439:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (439:9) and at (439:9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(439,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (439:9) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(439,9)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(439,9)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (439:9) and at (439:9)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (439:9) and at (439:9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(439,9)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (439:9) has aligned access
      remark #15388: vectorization support: reference at (439:9) has aligned access
      remark #15389: vectorization support: reference p_cr(1,1,:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.139
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 9 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 1.960 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(439,9)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference at (439:9) has aligned access
      remark #15388: vectorization support: reference at (439:9) has aligned access
      remark #15389: vectorization support: reference p_cr(1,1,:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.000
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(439,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (439:5) and Y(:) (439:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (439:5) and Y(:) (439:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(439,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference Y(:) has aligned access
      remark #15388: vectorization support: reference at (439:5) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(439,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(446,21)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_template_comp_mod.f90(446,21)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(409,63):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(408,63):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(417,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(417,5):remark #34026: call to memset implemented as a call to optimized library version
comm_template_comp_mod.f90(419,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(419,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(439,9):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(439,9):remark #34026: call to memset implemented as a call to optimized library version
comm_template_comp_mod.f90(439,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(439,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(439,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_template_comp_mod.f90(443,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(443,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(446,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(448,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(422,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(424,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(402,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_applytemplateprecond_] comm_template_comp_mod.f90:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     498
            Global    :     108
            Local     :     390
        Regenerable   :      70
        Spilled       :      36
        
    Routine stack
        Variables     :    1016 bytes*
            Reads     :      87 [4.66e+00 ~ 3.0%]
            Writes    :     191 [1.83e+01 ~ 11.9%]
        Spills        :     248 bytes*
            Reads     :      62 [7.32e-01 ~ 0.5%]
            Writes    :      44 [4.12e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::SAMPLETEMPSPECIND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::SAMPLETEMPSPECIND) [7/13=53.8%] comm_template_comp_mod.f90(468,14)


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(468,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_sampletempspecind_] comm_template_comp_mod.f90:468

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::UPDATETEMPMIXMAT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::UPDATETEMPMIXMAT) [8/13=61.5%] comm_template_comp_mod.f90(476,14)


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(476,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_updatetempmixmat_] comm_template_comp_mod.f90:476

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::CONSTRUCTOR) [9/13=69.2%] comm_template_comp_mod.f90(63,12)
  -> EXTERN: (74,5) for_allocate
  -> EXTERN: (77,5) memcpy
  -> EXTERN: (78,5) memcpy
  -> EXTERN: (79,5) memcpy
  -> EXTERN: (82,5) for_cpystr
  -> EXTERN: (82,29) for_trim
  -> EXTERN: (103,5) for_concat
  -> EXTERN: (103,11) for_trim
  -> EXTERN: (104,5) __resetsp_inlined
  -> EXTERN: (104,5) __getsp_inlined
  -> EXTERN: (104,22) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (104,48) for_trim
  -> EXTERN: (104,57) for_concat
  -> EXTERN: (104,57) _alloca
  -> EXTERN: (104,59) for_trim
  -> EXTERN: (104,64) _alloca
  -> EXTERN: (105,9) for_trim
  -> EXTERN: (105,14) _alloca
  -> EXTERN: (105,24) __resetsp_inlined
  -> EXTERN: (105,24) for_cpstr
  -> EXTERN: (105,24) __getsp_inlined
  -> EXTERN: (106,8) __resetsp_inlined
  -> EXTERN: (106,8) __getsp_inlined
  -> EXTERN: (106,29) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (106,55) for_trim
  -> EXTERN: (106,64) _alloca
  -> EXTERN: (106,64) for_concat
  -> EXTERN: (106,66) for_trim
  -> EXTERN: (106,71) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(88,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%P(:) has unaligned access
   remark #15388: vectorization support: reference at (88:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(107,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%P_CG(:) has unaligned access
   remark #15388: vectorization support: reference at (107:8) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(109,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference constructor%P_CG(:) has unaligned access
   remark #15389: vectorization support: reference constructor%P(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(74,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(74,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_template_comp_mod.f90(77,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(77,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_template_comp_mod.f90(77,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_template_comp_mod.f90(78,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(78,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_template_comp_mod.f90(78,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_template_comp_mod.f90(79,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(79,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_template_comp_mod.f90(79,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_template_comp_mod.f90(63,12):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_constructor_] comm_template_comp_mod.f90:63

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     277
            Global    :      71
            Local     :     206
        Regenerable   :      77
        Spilled       :       7
        
    Routine stack
        Variables     :    2912 bytes*
            Reads     :      24 [1.80e+01 ~ 2.9%]
            Writes    :      32 [2.50e+01 ~ 4.1%]
        Spills        :      16 bytes*
            Reads     :       2 [1.50e+00 ~ 0.2%]
            Writes    :       2 [1.50e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::INITTEMPLATEPRECOND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::INITTEMPLATEPRECOND) [10/13=76.9%] comm_template_comp_mod.f90(274,14)
  -> EXTERN: (289,10) mpi_comm_rank_
  -> EXTERN: (292,10) wall_time_
  -> EXTERN: (293,5) for_alloc_allocatable
  -> EXTERN: (293,5) for_check_mult_overflow64
  -> EXTERN: (293,5) for_alloc_allocatable
  -> EXTERN: (293,5) for_check_mult_overflow64
  -> EXTERN: (299,21) strcmp
  -> INDIRECT-: (305,17)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (310,18) COMM_MAP_MOD^CONSTRUCTOR_CLONE
  -> INDIRECT-: (311,13)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$28_V$e63 *)comm_data_mod_mp_data__V$2677)[(EXPR_CONV.SI32.SI64(comm_template_comp_mod_mp_inittemplateprecond_$PT1$51_V$3e8b.0.9->COMM_TEMPLATE_COMP_MOD$.btCOMM_TEMPLATE_COMP$BAND_V$d57)), l:comm_data_mod_mp_data__V$2680[0(SI32), l:0(SI64)]] + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (317,24) strcmp
  -> INDIRECT-: (323,20)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C2$52_V$3ea4.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (331,17)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C2$52_V$3ea4.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (333,14)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (337,10) mpi_reduce_
  -> EXTERN: (340,5) for_alloc_allocatable
  -> EXTERN: (347,24) strcmp
  -> INDIRECT-: (353,20)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (358,17)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (365,24) strcmp
  -> INDIRECT-: (371,20)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (376,17)  (*((P64*) comm_template_comp_mod_mp_inittemplateprecond_$C1$54_V$3ec8.0.9))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (383,13) INVERT_MATRIX_WITH_MASK_DP
  -> EXTERN: (384,8) for_check_mult_overflow64
  -> EXTERN: (384,8) for_alloc_allocatable
  -> EXTERN: (385,8) for_dealloc_allocatable
  -> EXTERN: (385,8) for_realloc_lhs
  -> EXTERN: (388,5) for_dealloc_allocatable
  -> EXTERN: (388,5) for_dealloc_allocatable
  -> EXTERN: (390,3) for_dealloc_allocatable
  -> EXTERN: (390,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(294,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(294,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between MAT(:,:) (294:5) and MAT(:,:) (294:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between MAT(:,:) (294:5) and MAT(:,:) (294:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_template_comp_mod.f90(294,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference MAT(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(294,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(365,24)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(299,21)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(317,24)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_template_comp_mod.f90(317,24)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(329,24)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed ANTI dependence between at (329:24) and at (329:24)
         remark #17106: parallel dependence: assumed FLOW dependence between at (329:24) and at (329:24)
         remark #17106: parallel dependence: assumed ANTI dependence between at (329:24) and at (329:24)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_template_comp_mod.f90(329,24)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_template_comp_mod.f90(329,24)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference at (329:24) has aligned access
            remark #15388: vectorization support: reference INVN(:,:) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15399: vectorization support: unroll factor set to 4
            remark #15309: vectorization support: normalized vectorization overhead 1.031
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 2 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 8 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 1.920 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at comm_template_comp_mod.f90(329,24)
         <Alternate Alignment Vectorized Loop>
         LOOP END

         LOOP BEGIN at comm_template_comp_mod.f90(329,24)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(340,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(362,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(347,24)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(357,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <MAT2(i1,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <MAT2(i1,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.136
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.500 
      remark #15478: estimated potential speedup: 1.080 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(357,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(365,24)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(365,24)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(375,11)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(375,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference MAT2(:,i1) has aligned access
      remark #15388: vectorization support: reference MAT2(:,i1) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_template_comp_mod.f90(375,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(379,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <MAT2(i1,i1)>, stride is unknown to compiler   [ comm_template_comp_mod.f90(380,11) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <MAT2(i1,i1)>, stride is unknown to compiler   [ comm_template_comp_mod.f90(380,25) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.190 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(379,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_template_comp_mod.f90(385,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between p_cr(1,1,:,:) (385:8) and p_cr(1,1,:,:) (385:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between p_cr(1,1,:,:) (385:8) and p_cr(1,1,:,:) (385:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_template_comp_mod.f90(385,8)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between p_cr(1,1,:,:) (385:8) and p_cr(1,1,:,:) (385:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between p_cr(1,1,:,:) (385:8) and p_cr(1,1,:,:) (385:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_template_comp_mod.f90(385,8)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(385,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference p_cr(1,1,:,:) has aligned access
         remark #15388: vectorization support: reference MAT2(:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 5.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.260 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(385,8)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_template_comp_mod.f90(385,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(284,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(284,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(294,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(294,5):remark #34026: call to memset implemented as a call to optimized library version
comm_template_comp_mod.f90(296,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(296,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(340,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_template_comp_mod.f90(340,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_template_comp_mod.f90(344,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(344,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(362,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(362,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(385,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(385,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_template_comp_mod.f90(385,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_template_comp_mod.f90(365,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(367,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(347,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(349,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(299,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(301,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(314,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_template_comp_mod.f90(314,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(317,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(319,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(274,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_inittemplateprecond_] comm_template_comp_mod.f90:274

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     938
            Global    :     220
            Local     :     718
        Regenerable   :     123
        Spilled       :      49
        
    Routine stack
        Variables     :    2028 bytes*
            Reads     :     179 [6.06e+01 ~ 3.2%]
            Writes    :     355 [1.27e+02 ~ 6.6%]
        Spills        :     352 bytes*
            Reads     :      92 [2.58e+01 ~ 1.4%]
            Writes    :      48 [2.96e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::INITTEMPLATEHDF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::INITTEMPLATEHDF) [11/13=84.6%] comm_template_comp_mod.f90(245,14)
  -> EXTERN: (271,3) for_dealloc_allocatable


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(255,48):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_template_comp_mod.f90(245,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_inittemplatehdf_] comm_template_comp_mod.f90:245

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rsi rdi r8 r12 zmm0-zmm6]
        
    Routine temporaries
        Total         :      53
            Global    :       7
            Local     :      46
        Regenerable   :      10
        Spilled       :       1
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       1 [3.39e-02 ~ 0.1%]
            Writes    :      10 [8.07e+00 ~ 21.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::DUMPTEMPLATETOFITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::DUMPTEMPLATETOFITS) [12/13=92.3%] comm_template_comp_mod.f90(230,14)
  -> EXTERN: (238,25) for_write_seq_lis
  -> EXTERN: (238,25) for_write_seq_lis_xmit


    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(230,14):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_dumptemplatetofits_] comm_template_comp_mod.f90:230

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :      30
            Global    :       8
            Local     :      22
        Regenerable   :      15
        Spilled       :       1
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [2.50e+00 ~ 8.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_TEMPLATE_COMP_MOD::INITIALIZE_TEMPLATE_COMPS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_TEMPLATE_COMP_MOD::INITIALIZE_TEMPLATE_COMPS) [13/13=100.0%] comm_template_comp_mod.f90(115,12)
  -> EXTERN: (127,13) GETLUN
  -> EXTERN: (131,5) __resetsp_inlined
  -> EXTERN: (131,5) for_open
  -> EXTERN: (131,5) __getsp_inlined
  -> EXTERN: (131,21) for_trim
  -> EXTERN: (131,44) for_concat
  -> EXTERN: (131,44) _alloca
  -> EXTERN: (131,46) for_trim
  -> EXTERN: (133,8) for_read_seq_fmt
  -> EXTERN: (134,8) for_cpystr
  -> EXTERN: (134,15) for_trim
  -> EXTERN: (134,20) for_adjustl
  -> EXTERN: (136,8) for_read_int_lis_xmit
  -> EXTERN: (136,8) for_read_int_lis_xmit
  -> EXTERN: (136,8) for_read_int_lis_xmit
  -> EXTERN: (136,8) for_read_int_lis_xmit
  -> EXTERN: (136,8) for_read_int_lis_xmit
  -> EXTERN: (136,8) for_read_int_lis
  -> EXTERN: (138,15) for_trim
  -> EXTERN: (138,27) for_cpstr
  -> EXTERN: (138,30) for_trim
  -> (143,40) COMM_TEMPLATE_COMP_MOD::CONSTRUCTOR (isz = 837) (sz = 868)
     [[ Inlining would exceed -inline-max-size value (868>253) <2>]]
  -> (146,16) COMM_TEMPLATE_COMP_MOD::CONSTRUCTOR (isz = 837) (sz = 868)
     [[ Inlining would exceed -inline-max-size value (868>253) <2>]]
  -> INDIRECT-: (147,16)  (*((P64*) *((P64*) (comm_template_comp_mod_mp_initialize_template_comps_$INITIALIZE_TEMPLATE_COMPS_V$2a44.0.3 + 56(SI64)))))[4(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (151,11) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_template_comp_mod.f90(143,40)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_template_comp_mod.f90(137,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_template_comp_mod.f90(115,12):remark #34051: REGISTER ALLOCATION : [comm_template_comp_mod_mp_initialize_template_comps_] comm_template_comp_mod.f90:115

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     236
            Global    :      62
            Local     :     174
        Regenerable   :     129
        Spilled       :      12
        
    Routine stack
        Variables     :    9628 bytes*
            Reads     :      28 [2.74e+01 ~ 2.4%]
            Writes    :      93 [8.96e+01 ~ 8.0%]
        Spills        :      56 bytes*
            Reads     :      15 [1.19e+01 ~ 1.1%]
            Writes    :       7 [8.92e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

<2> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

