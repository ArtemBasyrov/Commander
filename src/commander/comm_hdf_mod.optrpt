Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_hdf_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_hdf_mod._) [1/137=0.7%] comm_hdf_mod.f90(4,8)


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(4,8):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod._] comm_hdf_mod.f90:4

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::CLEANUP_COMM_HDF_MOD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::CLEANUP_COMM_HDF_MOD) [2/137=1.5%] comm_hdf_mod.f90(167,14)
  -> EXTERN: (170,10) H5CLOSE_F
  -> EXTERN: (171,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(167,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_cleanup_comm_hdf_mod_] comm_hdf_mod.f90:167

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [1.00e+00 ~ 5.3%]
            Writes    :       2 [1.00e+00 ~ 5.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::OPEN_HDF_FILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::OPEN_HDF_FILE) [3/137=2.2%] comm_hdf_mod.f90(177,14)
  -> INLINE: (184,10) COMM_HDF_MOD::INITIALIZE_COMM_HDF_MOD (isz = 23) (sz = 26)
    -> EXTERN: (162,10) H5OPEN_F
    -> EXTERN: (163,10) ASSERT
  -> EXTERN: (187,5) for_cpystr
  -> EXTERN: (189,13) H5FOPEN_F
  -> EXTERN: (191,13) H5FCREATE_F
  -> EXTERN: (193,13) H5FOPEN_F
  -> EXTERN: (195,8) for_write_seq_lis_xmit
  -> EXTERN: (195,8) for_write_seq_lis
  -> EXTERN: (196,8) for_stop_core
  -> EXTERN: (200,5) for_cpystr


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(177,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_open_hdf_file_] comm_hdf_mod.f90:177

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r9 r13-r15]
        
    Routine temporaries
        Total         :      84
            Global    :      13
            Local     :      71
        Regenerable   :      48
        Spilled       :       4
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :       1 [2.97e-01 ~ 0.5%]
            Writes    :       7 [4.49e-01 ~ 0.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::CLOSE_HDF_FILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::CLOSE_HDF_FILE) [4/137=2.9%] comm_hdf_mod.f90(204,14)
  -> INLINE: (207,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
    -> EXTERN: (226,10) H5DCLOSE_F
    -> EXTERN: (227,10) ASSERT
    -> EXTERN: (229,5) for_cpystr
  -> EXTERN: (208,10) H5FCLOSE_F
  -> EXTERN: (209,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(204,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_close_hdf_file_] comm_hdf_mod.f90:204

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rdx rcx rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      32
            Global    :       8
            Local     :      24
        Regenerable   :      15
        Spilled       :       2
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       4 [1.60e+00 ~ 4.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::OPEN_HDF_SET

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::OPEN_HDF_SET) [5/137=3.6%] comm_hdf_mod.f90(212,14)
  -> EXTERN: (216,9) for_trim
  -> EXTERN: (216,28) __resetsp_inlined
  -> EXTERN: (216,28) for_cpstr
  -> EXTERN: (216,28) __getsp_inlined
  -> EXTERN: (216,31) for_trim
  -> EXTERN: (216,36) _alloca
  -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
    -> EXTERN: (226,10) H5DCLOSE_F
    -> EXTERN: (227,10) ASSERT
    -> EXTERN: (229,5) for_cpystr
  -> EXTERN: (218,5) for_cpystr
  -> EXTERN: (219,10) H5DOPEN_F


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(212,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_open_hdf_set_] comm_hdf_mod.f90:212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      68
            Global    :      22
            Local     :      46
        Regenerable   :      20
        Spilled       :       7
        
    Routine stack
        Variables     :     516 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [1.31e-01 ~ 0.2%]
        Spills        :      16 bytes*
            Reads     :       4 [1.57e+00 ~ 2.5%]
            Writes    :       2 [2.00e+00 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::CLOSE_HDF_SET

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::CLOSE_HDF_SET) [6/137=4.4%] comm_hdf_mod.f90(222,14)
  -> EXTERN: (226,10) H5DCLOSE_F
  -> EXTERN: (227,10) ASSERT
  -> EXTERN: (229,5) for_cpystr


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(222,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_close_hdf_set_] comm_hdf_mod.f90:222

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rdx rcx rsi rdi r8 r12]
        
    Routine temporaries
        Total         :      24
            Global    :       7
            Local     :      17
        Regenerable   :      10
        Spilled       :       1
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [5.97e-01 ~ 2.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::GET_RANK_HDF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::GET_RANK_HDF) [7/137=5.1%] comm_hdf_mod.f90(235,12)
  -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (242,10) H5DGET_SPACE_F
  -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
  -> EXTERN: (244,10) H5SCLOSE_F


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(235,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_get_rank_hdf_] comm_hdf_mod.f90:235

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      82
            Global    :      24
            Local     :      58
        Regenerable   :      26
        Spilled       :       8
        
    Routine stack
        Variables     :     524 bytes*
            Reads     :       1 [1.00e+00 ~ 1.2%]
            Writes    :       2 [1.31e-01 ~ 0.2%]
        Spills        :      24 bytes*
            Reads     :       5 [2.57e+00 ~ 3.2%]
            Writes    :       3 [3.00e+00 ~ 3.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_0D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_0D_DP) [8/137=5.8%] comm_hdf_mod.f90(280,14)
  -> INLINE: (285,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (286,10) H5DREAD_DOUBLE_SCALAR
  -> EXTERN: (287,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(280,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_0d_dp_] comm_hdf_mod.f90:280

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      86
            Global    :      24
            Local     :      62
        Regenerable   :      31
        Spilled       :       9
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       4 [1.13e+00 ~ 1.3%]
        Spills        :      32 bytes*
            Reads     :       6 [3.57e+00 ~ 4.0%]
            Writes    :       4 [4.00e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_0D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_0D_SP) [9/137=6.6%] comm_hdf_mod.f90(290,14)
  -> INLINE: (295,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (296,10) H5DREAD_REAL_SCALAR
  -> EXTERN: (297,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(290,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_0d_sp_] comm_hdf_mod.f90:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      86
            Global    :      24
            Local     :      62
        Regenerable   :      31
        Spilled       :       9
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       4 [1.13e+00 ~ 1.3%]
        Spills        :      32 bytes*
            Reads     :       6 [3.57e+00 ~ 4.0%]
            Writes    :       4 [4.00e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_0D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_0D_INT) [10/137=7.3%] comm_hdf_mod.f90(300,14)
  -> INLINE: (305,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (306,10) H5DREAD_INTEGER_SCALAR
  -> EXTERN: (307,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(300,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_0d_int_] comm_hdf_mod.f90:300

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15]
        
    Routine temporaries
        Total         :      86
            Global    :      24
            Local     :      62
        Regenerable   :      31
        Spilled       :       9
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       4 [1.13e+00 ~ 1.3%]
        Spills        :      32 bytes*
            Reads     :       6 [3.57e+00 ~ 4.0%]
            Writes    :       4 [4.00e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_1D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_1D_DP) [11/137=8.0%] comm_hdf_mod.f90(310,14)
  -> INLINE: (315,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (316,10) __resetsp_inlined
  -> EXTERN: (316,10) H5DREAD_DOUBLE_1
  -> EXTERN: (316,10) _alloca
  -> EXTERN: (316,10) __getsp_inlined
  -> EXTERN: (317,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(316,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (316:55) has aligned access   [ comm_hdf_mod.f90(316,55) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(316,55) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (316:55) has aligned access   [ comm_hdf_mod.f90(316,55) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(316,55) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,55)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference val(:) has aligned access
   remark #15388: vectorization support: reference at (316:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,55)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,55)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,55)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (316:55) has aligned access
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(316,55)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(310,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_1d_dp_] comm_hdf_mod.f90:310

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     127
            Global    :      46
            Local     :      81
        Regenerable   :      31
        Spilled       :      12
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [2.13e+00 ~ 1.1%]
        Spills        :      56 bytes*
            Reads     :      17 [7.87e+00 ~ 4.1%]
            Writes    :       7 [6.30e+00 ~ 3.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_1D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_1D_SP) [12/137=8.8%] comm_hdf_mod.f90(320,14)
  -> INLINE: (325,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (326,10) __resetsp_inlined
  -> EXTERN: (326,10) H5DREAD_REAL_1
  -> EXTERN: (326,10) _alloca
  -> EXTERN: (326,10) __getsp_inlined
  -> EXTERN: (327,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(326,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (326:53) has aligned access   [ comm_hdf_mod.f90(326,53) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(326,53) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 3.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (326:53) has aligned access   [ comm_hdf_mod.f90(326,53) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(326,53) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference val(:) has aligned access
   remark #15388: vectorization support: reference at (326:53) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,53)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,53)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,53)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (326:53) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(326,53)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(320,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_1d_sp_] comm_hdf_mod.f90:320

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     136
            Global    :      52
            Local     :      84
        Regenerable   :      31
        Spilled       :      12
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [2.13e+00 ~ 1.3%]
        Spills        :      56 bytes*
            Reads     :      10 [6.79e+00 ~ 4.1%]
            Writes    :       7 [7.00e+00 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_1D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_1D_INT) [13/137=9.5%] comm_hdf_mod.f90(330,14)
  -> INLINE: (335,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (336,10) __resetsp_inlined
  -> EXTERN: (336,10) H5DREAD_INTEGER_1
  -> EXTERN: (336,10) _alloca
  -> EXTERN: (336,10) __getsp_inlined
  -> EXTERN: (337,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(336,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (336:56) has aligned access   [ comm_hdf_mod.f90(336,56) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(336,56) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (336:56) has aligned access   [ comm_hdf_mod.f90(336,56) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(336,56) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,56)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference val(:) has aligned access
   remark #15388: vectorization support: reference at (336:56) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,56)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,56)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,56)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (336:56) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(336,56)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(330,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_1d_int_] comm_hdf_mod.f90:330

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     136
            Global    :      52
            Local     :      84
        Regenerable   :      31
        Spilled       :      12
        
    Routine stack
        Variables     :     528 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       5 [2.13e+00 ~ 1.3%]
        Spills        :      56 bytes*
            Reads     :      10 [6.79e+00 ~ 4.1%]
            Writes    :       7 [7.00e+00 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_2D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_2D_DP) [14/137=10.2%] comm_hdf_mod.f90(340,14)
  -> INLINE: (345,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (346,10) __resetsp_inlined
  -> EXTERN: (346,10) H5DREAD_DOUBLE_2
  -> EXTERN: (346,10) _alloca
  -> EXTERN: (346,10) __getsp_inlined
  -> EXTERN: (347,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(346,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (346:55) has aligned access   [ comm_hdf_mod.f90(346,55) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(346,55) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(346,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (346:55) has aligned access   [ comm_hdf_mod.f90(346,55) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(346,55) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(346,55)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (346:60) has aligned access   [ comm_hdf_mod.f90(346,60) ]
   remark #15388: vectorization support: reference at (346:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(346,55)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference val(:,:) has aligned access
      remark #15388: vectorization support: reference at (346:55) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(346,55)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (346:55) has aligned access
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(346,55)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(340,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_2d_dp_] comm_hdf_mod.f90:340

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     176
            Global    :      64
            Local     :     112
        Regenerable   :      35
        Spilled       :      21
        
    Routine stack
        Variables     :     544 bytes*
            Reads     :       1 [1.00e+00 ~ 0.1%]
            Writes    :       7 [4.13e+00 ~ 0.5%]
        Spills        :     128 bytes*
            Reads     :      28 [1.08e+01 ~ 1.4%]
            Writes    :      21 [1.08e+01 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_2D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_2D_SP) [15/137=10.9%] comm_hdf_mod.f90(350,14)
  -> INLINE: (355,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (356,10) __resetsp_inlined
  -> EXTERN: (356,10) H5DREAD_REAL_2
  -> EXTERN: (356,10) _alloca
  -> EXTERN: (356,10) __getsp_inlined
  -> EXTERN: (357,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(356,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (356:53) has aligned access   [ comm_hdf_mod.f90(356,53) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(356,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(356,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (356:53)>, stride is unknown to compiler   [ comm_hdf_mod.f90(356,53) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(356,53) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (356:53) has unaligned access   [ comm_hdf_mod.f90(356,53) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(356,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(356,53)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (356:58) has aligned access   [ comm_hdf_mod.f90(356,58) ]
   remark #15388: vectorization support: reference at (356:53) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(356,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference val(:,:) has aligned access
      remark #15388: vectorization support: reference at (356:53) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(356,53)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:)>, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (356:53)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (356:53) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.440 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(356,53)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(350,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_2d_sp_] comm_hdf_mod.f90:350

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     188
            Global    :      75
            Local     :     113
        Regenerable   :      32
        Spilled       :      29
        
    Routine stack
        Variables     :     544 bytes*
            Reads     :       1 [1.00e+00 ~ 0.2%]
            Writes    :       7 [4.13e+00 ~ 0.7%]
        Spills        :     168 bytes*
            Reads     :      42 [2.13e+01 ~ 3.7%]
            Writes    :      26 [1.20e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_2D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_2D_INT) [16/137=11.7%] comm_hdf_mod.f90(360,14)
  -> INLINE: (365,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (366,10) __resetsp_inlined
  -> EXTERN: (366,10) H5DREAD_INTEGER_2
  -> EXTERN: (366,10) _alloca
  -> EXTERN: (366,10) __getsp_inlined
  -> EXTERN: (367,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(366,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (366:56) has aligned access   [ comm_hdf_mod.f90(366,56) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(366,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(366,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (366:56)>, stride is unknown to compiler   [ comm_hdf_mod.f90(366,56) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(366,56) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (366:56) has unaligned access   [ comm_hdf_mod.f90(366,56) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(366,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.079
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 0.420 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(366,56)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (366:61) has aligned access   [ comm_hdf_mod.f90(366,61) ]
   remark #15388: vectorization support: reference at (366:56) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(366,56)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference val(:,:) has aligned access
      remark #15388: vectorization support: reference at (366:56) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(366,56)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:)>, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (366:56)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (366:56) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(366,56)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(360,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_2d_int_] comm_hdf_mod.f90:360

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     188
            Global    :      75
            Local     :     113
        Regenerable   :      32
        Spilled       :      29
        
    Routine stack
        Variables     :     544 bytes*
            Reads     :       1 [1.00e+00 ~ 0.2%]
            Writes    :       7 [4.13e+00 ~ 0.7%]
        Spills        :     168 bytes*
            Reads     :      42 [2.13e+01 ~ 3.7%]
            Writes    :      26 [1.20e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_3D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_3D_DP) [17/137=12.4%] comm_hdf_mod.f90(370,14)
  -> INLINE: (375,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (376,10) __resetsp_inlined
  -> EXTERN: (376,10) H5DREAD_DOUBLE_3
  -> EXTERN: (376,10) _alloca
  -> EXTERN: (376,10) for_contig_array
  -> EXTERN: (376,10) __getsp_inlined
  -> EXTERN: (377,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(376,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(376,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (376:55) has aligned access   [ comm_hdf_mod.f90(376,55) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(376,55) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(376,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (376:55) has aligned access   [ comm_hdf_mod.f90(376,55) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(376,55) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 2.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.570 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(376,55)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (376:60) has aligned access   [ comm_hdf_mod.f90(376,60) ]
   remark #15388: vectorization support: reference at (376:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(376,55)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(376,55)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(376,55)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference val(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (376:55) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(376,55)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (376:55) has aligned access
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.310 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(376,55)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(370,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_3d_dp_] comm_hdf_mod.f90:370

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     241
            Global    :     102
            Local     :     139
        Regenerable   :      36
        Spilled       :      45
        
    Routine stack
        Variables     :     556 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       9 [6.13e+00 ~ 0.2%]
        Spills        :     312 bytes*
            Reads     :      90 [1.10e+02 ~ 3.1%]
            Writes    :      56 [2.74e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_3D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_3D_SP) [18/137=13.1%] comm_hdf_mod.f90(380,14)
  -> INLINE: (385,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (386,10) __resetsp_inlined
  -> EXTERN: (386,10) H5DREAD_REAL_3
  -> EXTERN: (386,10) _alloca
  -> EXTERN: (386,10) for_contig_array
  -> EXTERN: (386,10) __getsp_inlined
  -> EXTERN: (387,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(386,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(386,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (386:53) has aligned access   [ comm_hdf_mod.f90(386,53) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(386,53) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(386,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (386:53)>, stride is unknown to compiler   [ comm_hdf_mod.f90(386,53) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(386,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (386:53) has unaligned access   [ comm_hdf_mod.f90(386,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(386,53) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(386,53)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (386:58) has aligned access   [ comm_hdf_mod.f90(386,58) ]
   remark #15388: vectorization support: reference at (386:53) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(386,53)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(386,53)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(386,53)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference val(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (386:53) has aligned access
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(386,53)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (386:53)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (386:53) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.083
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 0.440 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(386,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(380,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_3d_sp_] comm_hdf_mod.f90:380

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     240
            Global    :     108
            Local     :     132
        Regenerable   :      33
        Spilled       :      52
        
    Routine stack
        Variables     :     556 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       9 [6.13e+00 ~ 0.2%]
        Spills        :     368 bytes*
            Reads     :      97 [1.35e+02 ~ 5.3%]
            Writes    :      62 [2.96e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_3D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_3D_INT) [19/137=13.9%] comm_hdf_mod.f90(390,14)
  -> INLINE: (395,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (396,10) __resetsp_inlined
  -> EXTERN: (396,10) H5DREAD_INTEGER_3
  -> EXTERN: (396,10) _alloca
  -> EXTERN: (396,10) for_contig_array
  -> EXTERN: (396,10) __getsp_inlined
  -> EXTERN: (397,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(396,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(396,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (396:56) has aligned access   [ comm_hdf_mod.f90(396,56) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(396,56) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(396,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (396:56)>, stride is unknown to compiler   [ comm_hdf_mod.f90(396,56) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(396,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (396:56) has unaligned access   [ comm_hdf_mod.f90(396,56) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(396,56) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.079
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.420 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(396,56)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (396:61) has aligned access   [ comm_hdf_mod.f90(396,61) ]
   remark #15388: vectorization support: reference at (396:56) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(396,56)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(396,56)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(396,56)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference val(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (396:56) has aligned access
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(396,56)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (396:56)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (396:56) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <val(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(396,56)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(390,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_3d_int_] comm_hdf_mod.f90:390

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     240
            Global    :     108
            Local     :     132
        Regenerable   :      33
        Spilled       :      52
        
    Routine stack
        Variables     :     556 bytes*
            Reads     :       1 [1.00e+00 ~ 0.0%]
            Writes    :       9 [6.13e+00 ~ 0.2%]
        Spills        :     368 bytes*
            Reads     :      97 [1.35e+02 ~ 5.3%]
            Writes    :      62 [2.96e+01 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_4D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_4D_DP) [20/137=14.6%] comm_hdf_mod.f90(400,14)
  -> INLINE: (405,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (406,10) for_array_copy_out
  -> EXTERN: (406,10) H5DREAD_DOUBLE_4
  -> EXTERN: (406,10) for_array_copy_in
  -> EXTERN: (407,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(406,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (406:60) has aligned access   [ comm_hdf_mod.f90(406,60) ]
   remark #15388: vectorization support: reference at (406:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(400,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_4d_dp_] comm_hdf_mod.f90:400

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     113
            Global    :      26
            Local     :      87
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     568 bytes*
            Reads     :       2 [2.00e+00 ~ 1.6%]
            Writes    :      10 [7.13e+00 ~ 5.6%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 3.0%]
            Writes    :       4 [4.00e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_4D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_4D_SP) [21/137=15.3%] comm_hdf_mod.f90(410,14)
  -> INLINE: (415,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (416,10) for_array_copy_out
  -> EXTERN: (416,10) H5DREAD_REAL_4
  -> EXTERN: (416,10) for_array_copy_in
  -> EXTERN: (417,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(416,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (416:58) has aligned access   [ comm_hdf_mod.f90(416,58) ]
   remark #15388: vectorization support: reference at (416:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(410,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_4d_sp_] comm_hdf_mod.f90:410

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     113
            Global    :      26
            Local     :      87
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     568 bytes*
            Reads     :       2 [2.00e+00 ~ 1.6%]
            Writes    :      10 [7.13e+00 ~ 5.6%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 3.0%]
            Writes    :       4 [4.00e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_4D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_4D_INT) [22/137=16.1%] comm_hdf_mod.f90(420,14)
  -> INLINE: (425,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (426,10) for_array_copy_out
  -> EXTERN: (426,10) H5DREAD_INTEGER_4
  -> EXTERN: (426,10) for_array_copy_in
  -> EXTERN: (427,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(426,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (426:61) has aligned access   [ comm_hdf_mod.f90(426,61) ]
   remark #15388: vectorization support: reference at (426:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(420,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_4d_int_] comm_hdf_mod.f90:420

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     113
            Global    :      26
            Local     :      87
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     568 bytes*
            Reads     :       2 [2.00e+00 ~ 1.6%]
            Writes    :      10 [7.13e+00 ~ 5.6%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 3.0%]
            Writes    :       4 [4.00e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_5D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_5D_DP) [23/137=16.8%] comm_hdf_mod.f90(430,14)
  -> INLINE: (435,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (436,10) for_array_copy_out
  -> EXTERN: (436,10) H5DREAD_DOUBLE_5
  -> EXTERN: (436,10) for_array_copy_in
  -> EXTERN: (437,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(436,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (436:60) has aligned access   [ comm_hdf_mod.f90(436,60) ]
   remark #15388: vectorization support: reference at (436:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(436,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(430,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_5d_dp_] comm_hdf_mod.f90:430

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     116
            Global    :      26
            Local     :      90
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     580 bytes*
            Reads     :       2 [2.00e+00 ~ 1.5%]
            Writes    :      12 [9.13e+00 ~ 6.8%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.8%]
            Writes    :       4 [4.00e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_5D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_5D_SP) [24/137=17.5%] comm_hdf_mod.f90(440,14)
  -> INLINE: (445,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (446,10) for_array_copy_out
  -> EXTERN: (446,10) H5DREAD_REAL_5
  -> EXTERN: (446,10) for_array_copy_in
  -> EXTERN: (447,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(446,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (446:58) has aligned access   [ comm_hdf_mod.f90(446,58) ]
   remark #15388: vectorization support: reference at (446:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(446,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(440,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_5d_sp_] comm_hdf_mod.f90:440

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     116
            Global    :      26
            Local     :      90
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     580 bytes*
            Reads     :       2 [2.00e+00 ~ 1.5%]
            Writes    :      12 [9.13e+00 ~ 6.8%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.8%]
            Writes    :       4 [4.00e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_5D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_5D_INT) [25/137=18.2%] comm_hdf_mod.f90(450,14)
  -> INLINE: (455,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (456,10) for_array_copy_out
  -> EXTERN: (456,10) H5DREAD_INTEGER_5
  -> EXTERN: (456,10) for_array_copy_in
  -> EXTERN: (457,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(456,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (456:61) has aligned access   [ comm_hdf_mod.f90(456,61) ]
   remark #15388: vectorization support: reference at (456:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(456,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(450,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_5d_int_] comm_hdf_mod.f90:450

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     116
            Global    :      26
            Local     :      90
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     580 bytes*
            Reads     :       2 [2.00e+00 ~ 1.5%]
            Writes    :      12 [9.13e+00 ~ 6.8%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.8%]
            Writes    :       4 [4.00e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_6D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_6D_DP) [26/137=19.0%] comm_hdf_mod.f90(460,14)
  -> INLINE: (465,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (466,10) for_array_copy_out
  -> EXTERN: (466,10) H5DREAD_DOUBLE_6
  -> EXTERN: (466,10) for_array_copy_in
  -> EXTERN: (467,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(466,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (466:60) has aligned access   [ comm_hdf_mod.f90(466,60) ]
   remark #15388: vectorization support: reference at (466:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(460,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_6d_dp_] comm_hdf_mod.f90:460

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     123
            Global    :      26
            Local     :      97
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     592 bytes*
            Reads     :       3 [3.00e+00 ~ 2.1%]
            Writes    :      13 [1.01e+01 ~ 7.1%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.6%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_6D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_6D_SP) [27/137=19.7%] comm_hdf_mod.f90(470,14)
  -> INLINE: (475,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (476,10) for_array_copy_out
  -> EXTERN: (476,10) H5DREAD_REAL_6
  -> EXTERN: (476,10) for_array_copy_in
  -> EXTERN: (477,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(476,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (476:58) has aligned access   [ comm_hdf_mod.f90(476,58) ]
   remark #15388: vectorization support: reference at (476:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(470,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_6d_sp_] comm_hdf_mod.f90:470

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     123
            Global    :      26
            Local     :      97
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     592 bytes*
            Reads     :       3 [3.00e+00 ~ 2.1%]
            Writes    :      13 [1.01e+01 ~ 7.1%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.6%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_6D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_6D_INT) [28/137=20.4%] comm_hdf_mod.f90(480,14)
  -> INLINE: (485,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (486,10) for_array_copy_out
  -> EXTERN: (486,10) H5DREAD_INTEGER_6
  -> EXTERN: (486,10) for_array_copy_in
  -> EXTERN: (487,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(486,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (486:61) has aligned access   [ comm_hdf_mod.f90(486,61) ]
   remark #15388: vectorization support: reference at (486:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(480,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_6d_int_] comm_hdf_mod.f90:480

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     123
            Global    :      26
            Local     :      97
        Regenerable   :      33
        Spilled       :       9
        
    Routine stack
        Variables     :     592 bytes*
            Reads     :       3 [3.00e+00 ~ 2.1%]
            Writes    :      13 [1.01e+01 ~ 7.1%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 2.6%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_7D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_7D_DP) [29/137=21.2%] comm_hdf_mod.f90(490,14)
  -> INLINE: (495,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (496,10) for_array_copy_out
  -> EXTERN: (496,10) H5DREAD_DOUBLE_7
  -> EXTERN: (496,10) for_array_copy_in
  -> EXTERN: (497,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(496,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (496:60) has aligned access   [ comm_hdf_mod.f90(496,60) ]
   remark #15388: vectorization support: reference at (496:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(496,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(490,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_7d_dp_] comm_hdf_mod.f90:490

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     135
            Global    :      32
            Local     :     103
        Regenerable   :      36
        Spilled       :       9
        
    Routine stack
        Variables     :     604 bytes*
            Reads     :       3 [2.10e+01 ~ 5.3%]
            Writes    :      15 [3.61e+01 ~ 9.2%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 1.0%]
            Writes    :       4 [4.00e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_7D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_7D_SP) [30/137=21.9%] comm_hdf_mod.f90(500,14)
  -> INLINE: (505,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (506,10) for_array_copy_out
  -> EXTERN: (506,10) H5DREAD_REAL_7
  -> EXTERN: (506,10) for_array_copy_in
  -> EXTERN: (507,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(506,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (506:58) has aligned access   [ comm_hdf_mod.f90(506,58) ]
   remark #15388: vectorization support: reference at (506:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(506,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(500,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_7d_sp_] comm_hdf_mod.f90:500

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     135
            Global    :      32
            Local     :     103
        Regenerable   :      36
        Spilled       :       9
        
    Routine stack
        Variables     :     604 bytes*
            Reads     :       3 [2.10e+01 ~ 5.3%]
            Writes    :      15 [3.61e+01 ~ 9.2%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 1.0%]
            Writes    :       4 [4.00e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_7D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_7D_INT) [31/137=22.6%] comm_hdf_mod.f90(510,14)
  -> INLINE: (515,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (516,10) for_array_copy_out
  -> EXTERN: (516,10) H5DREAD_INTEGER_7
  -> EXTERN: (516,10) for_array_copy_in
  -> EXTERN: (517,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(516,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (516:61) has aligned access   [ comm_hdf_mod.f90(516,61) ]
   remark #15388: vectorization support: reference at (516:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(516,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(510,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_7d_int_] comm_hdf_mod.f90:510

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     135
            Global    :      32
            Local     :     103
        Regenerable   :      36
        Spilled       :       9
        
    Routine stack
        Variables     :     604 bytes*
            Reads     :       3 [2.10e+01 ~ 5.3%]
            Writes    :      15 [3.61e+01 ~ 9.2%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 1.0%]
            Writes    :       4 [4.00e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_1D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_1D_DP) [32/137=23.4%] comm_hdf_mod.f90(520,14)
  -> EXTERN: (520,50) for_deallocate
  -> EXTERN: (526,24) for_dealloc_allocatable
  -> (527,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (528,5) for_alloc_allocatable
  -> EXTERN: (528,5) for_check_mult_overflow64
  -> INLINE: (529,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (530,10) H5DREAD_DOUBLE_1
  -> EXTERN: (531,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(520,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_1d_dp_] comm_hdf_mod.f90:520

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     186
            Global    :      31
            Local     :     155
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     612 bytes*
            Reads     :       2 [2.00e+00 ~ 1.1%]
            Writes    :      13 [1.01e+01 ~ 5.8%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.8%]
            Writes    :       6 [5.03e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::GET_SIZE_HDF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::GET_SIZE_HDF) [33/137=24.1%] comm_hdf_mod.f90(247,14)
  -> INLINE: (255,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (256,10) H5DGET_SPACE_F
  -> EXTERN: (257,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
  -> EXTERN: (258,5) for_alloc_allocatable
  -> EXTERN: (258,5) for_check_mult_overflow64
  -> EXTERN: (258,5) for_alloc_allocatable
  -> EXTERN: (258,5) for_check_mult_overflow64
  -> EXTERN: (259,10) H5SGET_SIMPLE_EXTENT_DIMS_F
  -> EXTERN: (260,10) H5SCLOSE_F
  -> EXTERN: (263,5) for_dealloc_allocatable
  -> EXTERN: (263,5) for_dealloc_allocatable
  -> EXTERN: (264,3) for_dealloc_allocatable
  -> EXTERN: (264,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(262,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference ext(:) has aligned access
   remark #15388: vectorization support: reference EXT_HDF(:) has aligned access   [ comm_hdf_mod.f90(262,15) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.640 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(262,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(262,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(262,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference EXT_HDF(:) has aligned access   [ comm_hdf_mod.f90(262,15) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <ext(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(262,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(254,61):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(254,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(247,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_get_size_hdf_] comm_hdf_mod.f90:247

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     315
            Global    :      55
            Local     :     260
        Regenerable   :      56
        Spilled       :       9
        
    Routine stack
        Variables     :     684 bytes*
            Reads     :      15 [1.50e+01 ~ 3.2%]
            Writes    :      32 [3.01e+01 ~ 6.4%]
        Spills        :      32 bytes*
            Reads     :       7 [3.79e+00 ~ 0.8%]
            Writes    :       4 [4.00e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_1D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_1D_SP) [34/137=24.8%] comm_hdf_mod.f90(534,14)
  -> EXTERN: (534,50) for_deallocate
  -> EXTERN: (540,24) for_dealloc_allocatable
  -> (541,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (542,5) for_alloc_allocatable
  -> EXTERN: (542,5) for_check_mult_overflow64
  -> INLINE: (543,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (544,10) H5DREAD_REAL_1
  -> EXTERN: (545,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(534,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_1d_sp_] comm_hdf_mod.f90:534

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     185
            Global    :      32
            Local     :     153
        Regenerable   :      46
        Spilled       :      11
        
    Routine stack
        Variables     :     612 bytes*
            Reads     :       2 [2.00e+00 ~ 1.1%]
            Writes    :      13 [1.01e+01 ~ 5.8%]
        Spills        :      48 bytes*
            Reads     :       9 [4.83e+00 ~ 2.8%]
            Writes    :       6 [5.03e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_1D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_1D_INT) [35/137=25.5%] comm_hdf_mod.f90(548,14)
  -> EXTERN: (548,51) for_deallocate
  -> EXTERN: (554,24) for_dealloc_allocatable
  -> (555,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (556,5) for_alloc_allocatable
  -> EXTERN: (556,5) for_check_mult_overflow64
  -> INLINE: (557,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (558,10) H5DREAD_INTEGER_1
  -> EXTERN: (559,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(548,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_1d_int_] comm_hdf_mod.f90:548

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     185
            Global    :      32
            Local     :     153
        Regenerable   :      46
        Spilled       :      11
        
    Routine stack
        Variables     :     612 bytes*
            Reads     :       2 [2.00e+00 ~ 1.1%]
            Writes    :      13 [1.01e+01 ~ 5.8%]
        Spills        :      48 bytes*
            Reads     :       9 [4.83e+00 ~ 2.8%]
            Writes    :       6 [5.03e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_2D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_2D_DP) [36/137=26.3%] comm_hdf_mod.f90(562,14)
  -> EXTERN: (562,50) for_deallocate
  -> EXTERN: (568,24) for_dealloc_allocatable
  -> (569,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (570,5) for_alloc_allocatable
  -> EXTERN: (570,5) for_check_mult_overflow64
  -> INLINE: (571,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (572,10) H5DREAD_DOUBLE_2
  -> EXTERN: (573,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(572,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (572:60) has aligned access   [ comm_hdf_mod.f90(572,60) ]
   remark #15388: vectorization support: reference at (572:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(562,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_2d_dp_] comm_hdf_mod.f90:562

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     198
            Global    :      31
            Local     :     167
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :     632 bytes*
            Reads     :       4 [4.00e+00 ~ 2.1%]
            Writes    :      15 [1.21e+01 ~ 6.3%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.6%]
            Writes    :       6 [5.03e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_2D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_2D_SP) [37/137=27.0%] comm_hdf_mod.f90(576,14)
  -> EXTERN: (576,50) for_deallocate
  -> EXTERN: (582,24) for_dealloc_allocatable
  -> (583,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (584,5) for_alloc_allocatable
  -> EXTERN: (584,5) for_check_mult_overflow64
  -> INLINE: (585,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (586,10) H5DREAD_REAL_2
  -> EXTERN: (587,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(586,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (586:58) has aligned access   [ comm_hdf_mod.f90(586,58) ]
   remark #15388: vectorization support: reference at (586:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(576,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_2d_sp_] comm_hdf_mod.f90:576

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     197
            Global    :      32
            Local     :     165
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     632 bytes*
            Reads     :       4 [4.00e+00 ~ 2.1%]
            Writes    :      15 [1.21e+01 ~ 6.3%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.6%]
            Writes    :       6 [5.03e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_2D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_2D_INT) [38/137=27.7%] comm_hdf_mod.f90(590,14)
  -> EXTERN: (590,51) for_deallocate
  -> EXTERN: (596,24) for_dealloc_allocatable
  -> (597,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (598,5) for_alloc_allocatable
  -> EXTERN: (598,5) for_check_mult_overflow64
  -> INLINE: (599,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (600,10) H5DREAD_INTEGER_2
  -> EXTERN: (601,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(600,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (600:61) has aligned access   [ comm_hdf_mod.f90(600,61) ]
   remark #15388: vectorization support: reference at (600:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(590,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_2d_int_] comm_hdf_mod.f90:590

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     197
            Global    :      32
            Local     :     165
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     632 bytes*
            Reads     :       4 [4.00e+00 ~ 2.1%]
            Writes    :      15 [1.21e+01 ~ 6.3%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.6%]
            Writes    :       6 [5.03e+00 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_3D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_3D_DP) [39/137=28.5%] comm_hdf_mod.f90(604,14)
  -> EXTERN: (604,50) for_deallocate
  -> EXTERN: (610,24) for_dealloc_allocatable
  -> (611,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (612,5) for_alloc_allocatable
  -> EXTERN: (612,5) for_check_mult_overflow64
  -> INLINE: (613,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (614,10) H5DREAD_DOUBLE_3
  -> EXTERN: (615,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(614,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (614:60) has aligned access   [ comm_hdf_mod.f90(614,60) ]
   remark #15388: vectorization support: reference at (614:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(614,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(604,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_3d_dp_] comm_hdf_mod.f90:604

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     204
            Global    :      31
            Local     :     173
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :     648 bytes*
            Reads     :       5 [5.00e+00 ~ 2.5%]
            Writes    :      17 [1.41e+01 ~ 7.0%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.4%]
            Writes    :       6 [5.03e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_3D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_3D_SP) [40/137=29.2%] comm_hdf_mod.f90(618,14)
  -> EXTERN: (618,50) for_deallocate
  -> EXTERN: (624,24) for_dealloc_allocatable
  -> (625,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (626,5) for_alloc_allocatable
  -> EXTERN: (626,5) for_check_mult_overflow64
  -> INLINE: (627,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (628,10) H5DREAD_REAL_3
  -> EXTERN: (629,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(628,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (628:58) has aligned access   [ comm_hdf_mod.f90(628,58) ]
   remark #15388: vectorization support: reference at (628:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(628,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(618,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_3d_sp_] comm_hdf_mod.f90:618

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     203
            Global    :      32
            Local     :     171
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     648 bytes*
            Reads     :       5 [5.00e+00 ~ 2.5%]
            Writes    :      17 [1.41e+01 ~ 7.0%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.4%]
            Writes    :       6 [5.03e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_3D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_3D_INT) [41/137=29.9%] comm_hdf_mod.f90(632,14)
  -> EXTERN: (632,51) for_deallocate
  -> EXTERN: (638,24) for_dealloc_allocatable
  -> (639,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (640,5) for_alloc_allocatable
  -> EXTERN: (640,5) for_check_mult_overflow64
  -> INLINE: (641,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (642,10) H5DREAD_INTEGER_3
  -> EXTERN: (643,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(642,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (642:61) has aligned access   [ comm_hdf_mod.f90(642,61) ]
   remark #15388: vectorization support: reference at (642:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(642,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(632,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_3d_int_] comm_hdf_mod.f90:632

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     203
            Global    :      32
            Local     :     171
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     648 bytes*
            Reads     :       5 [5.00e+00 ~ 2.5%]
            Writes    :      17 [1.41e+01 ~ 7.0%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.4%]
            Writes    :       6 [5.03e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_4D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_4D_DP) [42/137=30.7%] comm_hdf_mod.f90(646,14)
  -> EXTERN: (646,50) for_deallocate
  -> EXTERN: (652,24) for_dealloc_allocatable
  -> (653,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (654,5) for_alloc_allocatable
  -> EXTERN: (654,5) for_check_mult_overflow64
  -> INLINE: (655,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (656,10) H5DREAD_DOUBLE_4
  -> EXTERN: (657,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(656,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (656:60) has aligned access   [ comm_hdf_mod.f90(656,60) ]
   remark #15388: vectorization support: reference at (656:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(646,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_4d_dp_] comm_hdf_mod.f90:646

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     215
            Global    :      31
            Local     :     184
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :     664 bytes*
            Reads     :       7 [7.00e+00 ~ 3.1%]
            Writes    :      18 [1.51e+01 ~ 6.8%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.2%]
            Writes    :       6 [5.03e+00 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_4D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_4D_SP) [43/137=31.4%] comm_hdf_mod.f90(660,14)
  -> EXTERN: (660,50) for_deallocate
  -> EXTERN: (666,24) for_dealloc_allocatable
  -> (667,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (668,5) for_alloc_allocatable
  -> EXTERN: (668,5) for_check_mult_overflow64
  -> INLINE: (669,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (670,10) H5DREAD_REAL_4
  -> EXTERN: (671,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(670,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (670:58) has aligned access   [ comm_hdf_mod.f90(670,58) ]
   remark #15388: vectorization support: reference at (670:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(660,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_4d_sp_] comm_hdf_mod.f90:660

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     214
            Global    :      32
            Local     :     182
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     664 bytes*
            Reads     :       7 [7.00e+00 ~ 3.1%]
            Writes    :      18 [1.51e+01 ~ 6.8%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.2%]
            Writes    :       6 [5.03e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_4D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_4D_INT) [44/137=32.1%] comm_hdf_mod.f90(674,14)
  -> EXTERN: (674,51) for_deallocate
  -> EXTERN: (680,24) for_dealloc_allocatable
  -> (681,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (682,5) for_alloc_allocatable
  -> EXTERN: (682,5) for_check_mult_overflow64
  -> INLINE: (683,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (684,10) H5DREAD_INTEGER_4
  -> EXTERN: (685,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(684,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (684:61) has aligned access   [ comm_hdf_mod.f90(684,61) ]
   remark #15388: vectorization support: reference at (684:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(674,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_4d_int_] comm_hdf_mod.f90:674

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     214
            Global    :      32
            Local     :     182
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     664 bytes*
            Reads     :       7 [7.00e+00 ~ 3.1%]
            Writes    :      18 [1.51e+01 ~ 6.8%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.2%]
            Writes    :       6 [5.03e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_5D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_5D_DP) [45/137=32.8%] comm_hdf_mod.f90(688,14)
  -> EXTERN: (688,50) for_deallocate
  -> EXTERN: (694,24) for_dealloc_allocatable
  -> (695,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (696,5) for_alloc_allocatable
  -> EXTERN: (696,5) for_check_mult_overflow64
  -> INLINE: (697,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (698,10) H5DREAD_DOUBLE_5
  -> EXTERN: (699,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(698,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (698:60) has aligned access   [ comm_hdf_mod.f90(698,60) ]
   remark #15388: vectorization support: reference at (698:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(698,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(688,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_5d_dp_] comm_hdf_mod.f90:688

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     221
            Global    :      31
            Local     :     190
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :     680 bytes*
            Reads     :       8 [8.00e+00 ~ 3.4%]
            Writes    :      20 [1.71e+01 ~ 7.3%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.1%]
            Writes    :       6 [5.03e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_5D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_5D_SP) [46/137=33.6%] comm_hdf_mod.f90(702,14)
  -> EXTERN: (702,50) for_deallocate
  -> EXTERN: (708,24) for_dealloc_allocatable
  -> (709,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (710,5) for_alloc_allocatable
  -> EXTERN: (710,5) for_check_mult_overflow64
  -> INLINE: (711,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (712,10) H5DREAD_REAL_5
  -> EXTERN: (713,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(712,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (712:58) has aligned access   [ comm_hdf_mod.f90(712,58) ]
   remark #15388: vectorization support: reference at (712:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(712,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(702,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_5d_sp_] comm_hdf_mod.f90:702

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     220
            Global    :      32
            Local     :     188
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     680 bytes*
            Reads     :       8 [8.00e+00 ~ 3.4%]
            Writes    :      20 [1.71e+01 ~ 7.2%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.1%]
            Writes    :       6 [5.03e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_5D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_5D_INT) [47/137=34.3%] comm_hdf_mod.f90(716,14)
  -> EXTERN: (716,51) for_deallocate
  -> EXTERN: (722,24) for_dealloc_allocatable
  -> (723,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (724,5) for_alloc_allocatable
  -> EXTERN: (724,5) for_check_mult_overflow64
  -> INLINE: (725,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (726,10) H5DREAD_INTEGER_5
  -> EXTERN: (727,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(726,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (726:61) has aligned access   [ comm_hdf_mod.f90(726,61) ]
   remark #15388: vectorization support: reference at (726:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(726,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(716,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_5d_int_] comm_hdf_mod.f90:716

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     220
            Global    :      32
            Local     :     188
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     680 bytes*
            Reads     :       8 [8.00e+00 ~ 3.4%]
            Writes    :      20 [1.71e+01 ~ 7.2%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 2.1%]
            Writes    :       6 [5.03e+00 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_6D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_6D_DP) [48/137=35.0%] comm_hdf_mod.f90(730,14)
  -> EXTERN: (730,50) for_deallocate
  -> EXTERN: (736,24) for_dealloc_allocatable
  -> (737,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (738,5) for_alloc_allocatable
  -> EXTERN: (738,5) for_check_mult_overflow64
  -> INLINE: (739,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (740,10) H5DREAD_DOUBLE_6
  -> EXTERN: (741,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(740,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (740:60) has aligned access   [ comm_hdf_mod.f90(740,60) ]
   remark #15388: vectorization support: reference at (740:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(730,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_6d_dp_] comm_hdf_mod.f90:730

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     231
            Global    :      31
            Local     :     200
        Regenerable   :      48
        Spilled       :      11
        
    Routine stack
        Variables     :     696 bytes*
            Reads     :      10 [1.00e+01 ~ 3.9%]
            Writes    :      21 [1.81e+01 ~ 7.1%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 1.9%]
            Writes    :       6 [5.03e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_6D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_6D_SP) [49/137=35.8%] comm_hdf_mod.f90(744,14)
  -> EXTERN: (744,50) for_deallocate
  -> EXTERN: (750,24) for_dealloc_allocatable
  -> (751,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (752,5) for_alloc_allocatable
  -> EXTERN: (752,5) for_check_mult_overflow64
  -> INLINE: (753,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (754,10) H5DREAD_REAL_6
  -> EXTERN: (755,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(754,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (754:58) has aligned access   [ comm_hdf_mod.f90(754,58) ]
   remark #15388: vectorization support: reference at (754:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(744,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_6d_sp_] comm_hdf_mod.f90:744

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     230
            Global    :      32
            Local     :     198
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     696 bytes*
            Reads     :      10 [1.00e+01 ~ 3.9%]
            Writes    :      21 [1.81e+01 ~ 7.1%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 1.9%]
            Writes    :       6 [5.03e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_6D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_6D_INT) [50/137=36.5%] comm_hdf_mod.f90(758,14)
  -> EXTERN: (758,51) for_deallocate
  -> EXTERN: (764,24) for_dealloc_allocatable
  -> (765,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (766,5) for_alloc_allocatable
  -> EXTERN: (766,5) for_check_mult_overflow64
  -> INLINE: (767,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (768,10) H5DREAD_INTEGER_6
  -> EXTERN: (769,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(768,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (768:61) has aligned access   [ comm_hdf_mod.f90(768,61) ]
   remark #15388: vectorization support: reference at (768:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(758,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_6d_int_] comm_hdf_mod.f90:758

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     230
            Global    :      32
            Local     :     198
        Regenerable   :      47
        Spilled       :      11
        
    Routine stack
        Variables     :     696 bytes*
            Reads     :      10 [1.00e+01 ~ 3.9%]
            Writes    :      21 [1.81e+01 ~ 7.1%]
        Spills        :      48 bytes*
            Reads     :      10 [4.96e+00 ~ 1.9%]
            Writes    :       6 [5.03e+00 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_7D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_7D_DP) [51/137=37.2%] comm_hdf_mod.f90(772,14)
  -> EXTERN: (772,50) for_deallocate
  -> EXTERN: (778,24) for_dealloc_allocatable
  -> (779,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (780,5) for_alloc_allocatable
  -> EXTERN: (780,5) for_check_mult_overflow64
  -> INLINE: (781,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (782,10) H5DREAD_DOUBLE_7
  -> EXTERN: (783,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(782,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (782:60) has aligned access   [ comm_hdf_mod.f90(782,60) ]
   remark #15388: vectorization support: reference at (782:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(782,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(772,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_7d_dp_] comm_hdf_mod.f90:772

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     246
            Global    :      36
            Local     :     210
        Regenerable   :      51
        Spilled       :       9
        
    Routine stack
        Variables     :     712 bytes*
            Reads     :      11 [2.90e+01 ~ 5.6%]
            Writes    :      23 [4.41e+01 ~ 8.5%]
        Spills        :      32 bytes*
            Reads     :       8 [4.79e+00 ~ 0.9%]
            Writes    :       4 [4.00e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_7D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_7D_SP) [52/137=38.0%] comm_hdf_mod.f90(786,14)
  -> EXTERN: (786,50) for_deallocate
  -> EXTERN: (792,24) for_dealloc_allocatable
  -> (793,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (794,5) for_alloc_allocatable
  -> EXTERN: (794,5) for_check_mult_overflow64
  -> INLINE: (795,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (796,10) H5DREAD_REAL_7
  -> EXTERN: (797,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(796,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (796:58) has aligned access   [ comm_hdf_mod.f90(796,58) ]
   remark #15388: vectorization support: reference at (796:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(796,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(786,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_7d_sp_] comm_hdf_mod.f90:786

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     245
            Global    :      37
            Local     :     208
        Regenerable   :      50
        Spilled       :       9
        
    Routine stack
        Variables     :     712 bytes*
            Reads     :      11 [2.90e+01 ~ 5.6%]
            Writes    :      23 [4.41e+01 ~ 8.5%]
        Spills        :      32 bytes*
            Reads     :       8 [4.79e+00 ~ 0.9%]
            Writes    :       4 [4.00e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_ALLOC_HDF_7D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_ALLOC_HDF_7D_INT) [53/137=38.7%] comm_hdf_mod.f90(800,14)
  -> EXTERN: (800,51) for_deallocate
  -> EXTERN: (806,24) for_dealloc_allocatable
  -> (807,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (808,5) for_alloc_allocatable
  -> EXTERN: (808,5) for_check_mult_overflow64
  -> INLINE: (809,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (810,10) H5DREAD_INTEGER_7
  -> EXTERN: (811,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(810,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (810:61) has aligned access   [ comm_hdf_mod.f90(810,61) ]
   remark #15388: vectorization support: reference at (810:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(810,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(800,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_alloc_hdf_7d_int_] comm_hdf_mod.f90:800

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     245
            Global    :      37
            Local     :     208
        Regenerable   :      50
        Spilled       :       9
        
    Routine stack
        Variables     :     712 bytes*
            Reads     :      11 [2.90e+01 ~ 5.6%]
            Writes    :      23 [4.41e+01 ~ 8.5%]
        Spills        :      32 bytes*
            Reads     :       8 [4.79e+00 ~ 0.9%]
            Writes    :       4 [4.00e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_0D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_0D_DP) [54/137=39.4%] comm_hdf_mod.f90(819,14)
  -> INLINE: (824,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (825,10) H5DWRITE_DOUBLE_SCALAR
  -> EXTERN: (826,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(819,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_0d_dp_] comm_hdf_mod.f90:819

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     119
            Global    :      28
            Local     :      91
        Regenerable   :      57
        Spilled       :       9
        
    Routine stack
        Variables     :     552 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [5.13e+00 ~ 3.6%]
        Spills        :      32 bytes*
            Reads     :       5 [5.00e+00 ~ 3.5%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_0D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_0D_SP) [55/137=40.1%] comm_hdf_mod.f90(829,14)
  -> INLINE: (834,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (835,10) H5DWRITE_REAL_SCALAR
  -> EXTERN: (836,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(829,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_0d_sp_] comm_hdf_mod.f90:829

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     119
            Global    :      28
            Local     :      91
        Regenerable   :      57
        Spilled       :       9
        
    Routine stack
        Variables     :     552 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [5.13e+00 ~ 3.6%]
        Spills        :      32 bytes*
            Reads     :       5 [5.00e+00 ~ 3.5%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_0D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_0D_INT) [56/137=40.9%] comm_hdf_mod.f90(839,14)
  -> INLINE: (844,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (845,10) H5DWRITE_INTEGER_SCALAR
  -> EXTERN: (846,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(839,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_0d_int_] comm_hdf_mod.f90:839

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     119
            Global    :      28
            Local     :      91
        Regenerable   :      57
        Spilled       :       9
        
    Routine stack
        Variables     :     552 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [5.13e+00 ~ 3.6%]
        Spills        :      32 bytes*
            Reads     :       5 [5.00e+00 ~ 3.5%]
            Writes    :       4 [4.00e+00 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_1D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_1D_DP) [57/137=41.6%] comm_hdf_mod.f90(849,14)
  -> INLINE: (854,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (855,10) __resetsp_inlined
  -> EXTERN: (855,10) H5DWRITE_DOUBLE_1
  -> EXTERN: (855,10) _alloca
  -> EXTERN: (855,10) __getsp_inlined
  -> EXTERN: (856,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(855,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (855:56) has aligned access   [ comm_hdf_mod.f90(855,56) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(855,56) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(855,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(855,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (855:56) has aligned access   [ comm_hdf_mod.f90(855,56) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(855,56) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(855,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(849,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_1d_dp_] comm_hdf_mod.f90:849

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     144
            Global    :      40
            Local     :     104
        Regenerable   :      57
        Spilled       :      12
        
    Routine stack
        Variables     :     624 bytes*
            Reads     :       1 [9.00e-01 ~ 0.4%]
            Writes    :      21 [1.50e+01 ~ 7.1%]
        Spills        :      56 bytes*
            Reads     :      12 [1.04e+01 ~ 5.0%]
            Writes    :       7 [7.00e+00 ~ 3.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_1D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_1D_SP) [58/137=42.3%] comm_hdf_mod.f90(859,14)
  -> INLINE: (864,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (865,10) __resetsp_inlined
  -> EXTERN: (865,10) H5DWRITE_REAL_1
  -> EXTERN: (865,10) _alloca
  -> EXTERN: (865,10) __getsp_inlined
  -> EXTERN: (866,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(865,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (865:54) has aligned access   [ comm_hdf_mod.f90(865,54) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(865,54) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 3.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(865,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(865,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (865:54) has aligned access   [ comm_hdf_mod.f90(865,54) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(865,54) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(865,10)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(859,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_1d_sp_] comm_hdf_mod.f90:859

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     148
            Global    :      44
            Local     :     104
        Regenerable   :      57
        Spilled       :      12
        
    Routine stack
        Variables     :     624 bytes*
            Reads     :       1 [9.00e-01 ~ 0.5%]
            Writes    :      21 [1.50e+01 ~ 7.6%]
        Spills        :      56 bytes*
            Reads     :      17 [1.09e+01 ~ 5.5%]
            Writes    :       7 [7.00e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_1D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_1D_INT) [59/137=43.1%] comm_hdf_mod.f90(869,14)
  -> INLINE: (874,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (875,10) __resetsp_inlined
  -> EXTERN: (875,10) H5DWRITE_INTEGER_1
  -> EXTERN: (875,10) _alloca
  -> EXTERN: (875,10) __getsp_inlined
  -> EXTERN: (876,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(875,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (875:57) has aligned access   [ comm_hdf_mod.f90(875,57) ]
   remark #15389: vectorization support: reference val(:) has unaligned access   [ comm_hdf_mod.f90(875,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(875,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(875,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (875:57) has aligned access   [ comm_hdf_mod.f90(875,57) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(875,57) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(875,10)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(869,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_1d_int_] comm_hdf_mod.f90:869

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     148
            Global    :      44
            Local     :     104
        Regenerable   :      57
        Spilled       :      12
        
    Routine stack
        Variables     :     624 bytes*
            Reads     :       1 [9.00e-01 ~ 0.5%]
            Writes    :      21 [1.50e+01 ~ 7.6%]
        Spills        :      56 bytes*
            Reads     :      17 [1.09e+01 ~ 5.5%]
            Writes    :       7 [7.00e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_2D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_2D_DP) [60/137=43.8%] comm_hdf_mod.f90(879,14)
  -> INLINE: (884,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (885,10) __resetsp_inlined
  -> EXTERN: (885,10) H5DWRITE_DOUBLE_2
  -> EXTERN: (885,10) _alloca
  -> EXTERN: (885,10) __getsp_inlined
  -> EXTERN: (886,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(884,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (884:40) has aligned access   [ comm_hdf_mod.f90(884,40) ]
   remark #15388: vectorization support: reference at (884:40) has aligned access   [ comm_hdf_mod.f90(884,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(884,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(885,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (885:56) has aligned access   [ comm_hdf_mod.f90(885,56) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(885,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(885,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (885:56) has aligned access   [ comm_hdf_mod.f90(885,56) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(885,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(885,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(885,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (885:61) has aligned access   [ comm_hdf_mod.f90(885,61) ]
   remark #15388: vectorization support: reference at (885:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(879,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_2d_dp_] comm_hdf_mod.f90:879

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     175
            Global    :      52
            Local     :     123
        Regenerable   :      58
        Spilled       :      20
        
    Routine stack
        Variables     :     644 bytes*
            Reads     :       2 [2.00e+00 ~ 0.4%]
            Writes    :      24 [1.81e+01 ~ 3.4%]
        Spills        :     120 bytes*
            Reads     :      28 [1.32e+01 ~ 2.5%]
            Writes    :      19 [1.20e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_2D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_2D_SP) [61/137=44.5%] comm_hdf_mod.f90(889,14)
  -> INLINE: (894,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (895,10) __resetsp_inlined
  -> EXTERN: (895,10) H5DWRITE_REAL_2
  -> EXTERN: (895,10) _alloca
  -> EXTERN: (895,10) __getsp_inlined
  -> EXTERN: (896,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(894,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (894:40) has aligned access   [ comm_hdf_mod.f90(894,40) ]
   remark #15388: vectorization support: reference at (894:40) has aligned access   [ comm_hdf_mod.f90(894,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(894,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(895,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (895:54) has aligned access   [ comm_hdf_mod.f90(895,54) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(895,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(895,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (895:54)>, stride is unknown to compiler   [ comm_hdf_mod.f90(895,54) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(895,54) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (895:54) has unaligned access   [ comm_hdf_mod.f90(895,54) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(895,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(895,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(895,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (895:59) has aligned access   [ comm_hdf_mod.f90(895,59) ]
   remark #15388: vectorization support: reference at (895:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(889,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_2d_sp_] comm_hdf_mod.f90:889

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     183
            Global    :      58
            Local     :     125
        Regenerable   :      58
        Spilled       :      23
        
    Routine stack
        Variables     :     644 bytes*
            Reads     :       2 [2.00e+00 ~ 0.5%]
            Writes    :      24 [1.81e+01 ~ 4.2%]
        Spills        :     144 bytes*
            Reads     :      32 [1.89e+01 ~ 4.4%]
            Writes    :      21 [1.25e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_2D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_2D_INT) [62/137=45.3%] comm_hdf_mod.f90(899,14)
  -> INLINE: (904,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (905,10) __resetsp_inlined
  -> EXTERN: (905,10) H5DWRITE_INTEGER_2
  -> EXTERN: (905,10) _alloca
  -> EXTERN: (905,10) __getsp_inlined
  -> EXTERN: (906,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(904,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (904:40) has aligned access   [ comm_hdf_mod.f90(904,40) ]
   remark #15388: vectorization support: reference at (904:40) has aligned access   [ comm_hdf_mod.f90(904,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(904,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.800 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(905,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (905:57) has aligned access   [ comm_hdf_mod.f90(905,57) ]
      remark #15388: vectorization support: reference val(:,:) has aligned access   [ comm_hdf_mod.f90(905,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(905,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (905:57)>, stride is unknown to compiler   [ comm_hdf_mod.f90(905,57) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(905,57) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (905:57) has unaligned access   [ comm_hdf_mod.f90(905,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(905,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.079
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 0.420 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(905,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(905,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (905:62) has aligned access   [ comm_hdf_mod.f90(905,62) ]
   remark #15388: vectorization support: reference at (905:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(899,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_2d_int_] comm_hdf_mod.f90:899

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     183
            Global    :      58
            Local     :     125
        Regenerable   :      58
        Spilled       :      23
        
    Routine stack
        Variables     :     644 bytes*
            Reads     :       2 [2.00e+00 ~ 0.5%]
            Writes    :      24 [1.81e+01 ~ 4.2%]
        Spills        :     144 bytes*
            Reads     :      32 [1.89e+01 ~ 4.4%]
            Writes    :      21 [1.25e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_3D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_3D_DP) [63/137=46.0%] comm_hdf_mod.f90(909,14)
  -> INLINE: (914,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (915,10) __resetsp_inlined
  -> EXTERN: (915,10) H5DWRITE_DOUBLE_3
  -> EXTERN: (915,10) _alloca
  -> EXTERN: (915,10) for_contig_array
  -> EXTERN: (915,10) __getsp_inlined
  -> EXTERN: (916,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(914,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (914:40) has aligned access   [ comm_hdf_mod.f90(914,40) ]
   remark #15388: vectorization support: reference at (914:40) has aligned access   [ comm_hdf_mod.f90(914,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(914,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.850 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(915,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(915,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (915:56) has aligned access   [ comm_hdf_mod.f90(915,56) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(915,56) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(915,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (915:56) has aligned access   [ comm_hdf_mod.f90(915,56) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(915,56) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 2.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.570 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(915,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(915,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (915:61) has aligned access   [ comm_hdf_mod.f90(915,61) ]
   remark #15388: vectorization support: reference at (915:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(915,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(909,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_3d_dp_] comm_hdf_mod.f90:909

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     211
            Global    :      73
            Local     :     138
        Regenerable   :      58
        Spilled       :      33
        
    Routine stack
        Variables     :     660 bytes*
            Reads     :       2 [2.00e+00 ~ 0.1%]
            Writes    :      27 [2.11e+01 ~ 1.1%]
        Spills        :     216 bytes*
            Reads     :      53 [6.60e+01 ~ 3.4%]
            Writes    :      34 [2.86e+01 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_3D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_3D_SP) [64/137=46.7%] comm_hdf_mod.f90(919,14)
  -> INLINE: (924,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (925,10) __resetsp_inlined
  -> EXTERN: (925,10) H5DWRITE_REAL_3
  -> EXTERN: (925,10) _alloca
  -> EXTERN: (925,10) for_contig_array
  -> EXTERN: (925,10) __getsp_inlined
  -> EXTERN: (926,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(924,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (924:40) has aligned access   [ comm_hdf_mod.f90(924,40) ]
   remark #15388: vectorization support: reference at (924:40) has aligned access   [ comm_hdf_mod.f90(924,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(924,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.850 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(925,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(925,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (925:54) has aligned access   [ comm_hdf_mod.f90(925,54) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(925,54) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(925,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (925:54)>, stride is unknown to compiler   [ comm_hdf_mod.f90(925,54) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(925,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (925:54) has unaligned access   [ comm_hdf_mod.f90(925,54) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(925,54) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(925,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(925,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (925:59) has aligned access   [ comm_hdf_mod.f90(925,59) ]
   remark #15388: vectorization support: reference at (925:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(925,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(919,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_3d_sp_] comm_hdf_mod.f90:919

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     214
            Global    :      77
            Local     :     137
        Regenerable   :      58
        Spilled       :      37
        
    Routine stack
        Variables     :     660 bytes*
            Reads     :       2 [2.00e+00 ~ 0.1%]
            Writes    :      27 [2.11e+01 ~ 1.5%]
        Spills        :     248 bytes*
            Reads     :      57 [7.84e+01 ~ 5.5%]
            Writes    :      38 [2.86e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_3D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_3D_INT) [65/137=47.4%] comm_hdf_mod.f90(929,14)
  -> INLINE: (934,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (935,10) __resetsp_inlined
  -> EXTERN: (935,10) H5DWRITE_INTEGER_3
  -> EXTERN: (935,10) _alloca
  -> EXTERN: (935,10) for_contig_array
  -> EXTERN: (935,10) __getsp_inlined
  -> EXTERN: (936,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(934,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (934:40) has aligned access   [ comm_hdf_mod.f90(934,40) ]
   remark #15388: vectorization support: reference at (934:40) has aligned access   [ comm_hdf_mod.f90(934,40) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(934,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.429
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 0.850 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(935,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(935,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (935:57) has aligned access   [ comm_hdf_mod.f90(935,57) ]
         remark #15388: vectorization support: reference val(:,:,:) has aligned access   [ comm_hdf_mod.f90(935,57) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(935,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (935:57)>, stride is unknown to compiler   [ comm_hdf_mod.f90(935,57) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(935,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (935:57) has unaligned access   [ comm_hdf_mod.f90(935,57) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <val(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(935,57) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.079
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.420 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(935,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(935,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (935:62) has aligned access   [ comm_hdf_mod.f90(935,62) ]
   remark #15388: vectorization support: reference at (935:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(935,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(929,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_3d_int_] comm_hdf_mod.f90:929

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     214
            Global    :      77
            Local     :     137
        Regenerable   :      58
        Spilled       :      37
        
    Routine stack
        Variables     :     660 bytes*
            Reads     :       2 [2.00e+00 ~ 0.1%]
            Writes    :      27 [2.11e+01 ~ 1.5%]
        Spills        :     248 bytes*
            Reads     :      57 [7.84e+01 ~ 5.5%]
            Writes    :      38 [2.86e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_4D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_4D_DP) [66/137=48.2%] comm_hdf_mod.f90(939,14)
  -> INLINE: (944,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (945,10) for_array_copy_out
  -> EXTERN: (945,10) H5DWRITE_DOUBLE_4
  -> EXTERN: (945,10) for_array_copy_in
  -> EXTERN: (946,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(944,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (944:40) has aligned access   [ comm_hdf_mod.f90(944,40) ]
   remark #15388: vectorization support: reference at (944:40) has aligned access   [ comm_hdf_mod.f90(944,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(944,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(945,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (945:61) has aligned access   [ comm_hdf_mod.f90(945,61) ]
   remark #15388: vectorization support: reference at (945:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(939,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_4d_dp_] comm_hdf_mod.f90:939

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     170
            Global    :      36
            Local     :     134
        Regenerable   :      59
        Spilled       :      13
        
    Routine stack
        Variables     :     676 bytes*
            Reads     :       3 [3.00e+00 ~ 1.3%]
            Writes    :      26 [2.01e+01 ~ 8.7%]
        Spills        :      64 bytes*
            Reads     :      11 [1.01e+01 ~ 4.4%]
            Writes    :       8 [8.00e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_4D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_4D_SP) [67/137=48.9%] comm_hdf_mod.f90(949,14)
  -> INLINE: (954,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (955,10) for_array_copy_out
  -> EXTERN: (955,10) H5DWRITE_REAL_4
  -> EXTERN: (955,10) for_array_copy_in
  -> EXTERN: (956,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(954,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (954:40) has aligned access   [ comm_hdf_mod.f90(954,40) ]
   remark #15388: vectorization support: reference at (954:40) has aligned access   [ comm_hdf_mod.f90(954,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(954,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(955,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (955:59) has aligned access   [ comm_hdf_mod.f90(955,59) ]
   remark #15388: vectorization support: reference at (955:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(949,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_4d_sp_] comm_hdf_mod.f90:949

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     170
            Global    :      36
            Local     :     134
        Regenerable   :      59
        Spilled       :      13
        
    Routine stack
        Variables     :     676 bytes*
            Reads     :       3 [3.00e+00 ~ 1.3%]
            Writes    :      26 [2.01e+01 ~ 8.7%]
        Spills        :      64 bytes*
            Reads     :      11 [1.01e+01 ~ 4.4%]
            Writes    :       8 [8.00e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_4D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_4D_INT) [68/137=49.6%] comm_hdf_mod.f90(959,14)
  -> INLINE: (964,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (965,10) for_array_copy_out
  -> EXTERN: (965,10) H5DWRITE_INTEGER_4
  -> EXTERN: (965,10) for_array_copy_in
  -> EXTERN: (966,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(964,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (964:40) has aligned access   [ comm_hdf_mod.f90(964,40) ]
   remark #15388: vectorization support: reference at (964:40) has aligned access   [ comm_hdf_mod.f90(964,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(964,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15427: loop was completely unrolled
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.060 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(965,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (965:62) has aligned access   [ comm_hdf_mod.f90(965,62) ]
   remark #15388: vectorization support: reference at (965:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(959,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_4d_int_] comm_hdf_mod.f90:959

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     170
            Global    :      36
            Local     :     134
        Regenerable   :      59
        Spilled       :      13
        
    Routine stack
        Variables     :     676 bytes*
            Reads     :       3 [3.00e+00 ~ 1.3%]
            Writes    :      26 [2.01e+01 ~ 8.7%]
        Spills        :      64 bytes*
            Reads     :      11 [1.01e+01 ~ 4.4%]
            Writes    :       8 [8.00e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_5D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_5D_DP) [69/137=50.4%] comm_hdf_mod.f90(969,14)
  -> INLINE: (974,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (975,10) for_array_copy_out
  -> EXTERN: (975,10) H5DWRITE_DOUBLE_5
  -> EXTERN: (975,10) for_array_copy_in
  -> EXTERN: (976,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(974,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (974:40) has aligned access   [ comm_hdf_mod.f90(974,40) ]
   remark #15388: vectorization support: reference at (974:40) has aligned access   [ comm_hdf_mod.f90(974,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.850 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(974,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(974,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(974,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(975,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (975:61) has aligned access   [ comm_hdf_mod.f90(975,61) ]
   remark #15388: vectorization support: reference at (975:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(975,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(969,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_5d_dp_] comm_hdf_mod.f90:969

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     175
            Global    :      38
            Local     :     137
        Regenerable   :      59
        Spilled       :      16
        
    Routine stack
        Variables     :     692 bytes*
            Reads     :       3 [2.90e+00 ~ 1.2%]
            Writes    :      29 [2.30e+01 ~ 9.6%]
        Spills        :      80 bytes*
            Reads     :      14 [1.31e+01 ~ 5.5%]
            Writes    :      10 [1.00e+01 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_5D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_5D_SP) [70/137=51.1%] comm_hdf_mod.f90(979,14)
  -> INLINE: (984,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (985,10) for_array_copy_out
  -> EXTERN: (985,10) H5DWRITE_REAL_5
  -> EXTERN: (985,10) for_array_copy_in
  -> EXTERN: (986,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(984,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (984:40) has aligned access   [ comm_hdf_mod.f90(984,40) ]
   remark #15388: vectorization support: reference at (984:40) has aligned access   [ comm_hdf_mod.f90(984,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.850 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(984,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(984,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(984,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(985,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (985:59) has aligned access   [ comm_hdf_mod.f90(985,59) ]
   remark #15388: vectorization support: reference at (985:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(985,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(979,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_5d_sp_] comm_hdf_mod.f90:979

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     175
            Global    :      38
            Local     :     137
        Regenerable   :      59
        Spilled       :      16
        
    Routine stack
        Variables     :     692 bytes*
            Reads     :       3 [2.90e+00 ~ 1.2%]
            Writes    :      29 [2.30e+01 ~ 9.6%]
        Spills        :      80 bytes*
            Reads     :      14 [1.31e+01 ~ 5.5%]
            Writes    :      10 [1.00e+01 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_5D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_5D_INT) [71/137=51.8%] comm_hdf_mod.f90(989,14)
  -> INLINE: (994,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (995,10) for_array_copy_out
  -> EXTERN: (995,10) H5DWRITE_INTEGER_5
  -> EXTERN: (995,10) for_array_copy_in
  -> EXTERN: (996,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(994,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (994:40) has aligned access   [ comm_hdf_mod.f90(994,40) ]
   remark #15388: vectorization support: reference at (994:40) has aligned access   [ comm_hdf_mod.f90(994,40) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.850 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(994,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(994,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.050 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(994,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(995,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (995:62) has aligned access   [ comm_hdf_mod.f90(995,62) ]
   remark #15388: vectorization support: reference at (995:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(995,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(989,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_5d_int_] comm_hdf_mod.f90:989

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     175
            Global    :      38
            Local     :     137
        Regenerable   :      59
        Spilled       :      16
        
    Routine stack
        Variables     :     692 bytes*
            Reads     :       3 [2.90e+00 ~ 1.2%]
            Writes    :      29 [2.30e+01 ~ 9.6%]
        Spills        :      80 bytes*
            Reads     :      14 [1.31e+01 ~ 5.5%]
            Writes    :      10 [1.00e+01 ~ 4.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_6D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_6D_DP) [72/137=52.6%] comm_hdf_mod.f90(999,14)
  -> INLINE: (1004,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1005,10) for_array_copy_out
  -> EXTERN: (1005,10) H5DWRITE_DOUBLE_6
  -> EXTERN: (1005,10) for_array_copy_in
  -> EXTERN: (1006,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1004,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1004:40) has aligned access   [ comm_hdf_mod.f90(1004,40) ]
   remark #15388: vectorization support: reference at (1004:40) has aligned access   [ comm_hdf_mod.f90(1004,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1004,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.040 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1004,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1005,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1005:61) has aligned access   [ comm_hdf_mod.f90(1005,61) ]
   remark #15388: vectorization support: reference at (1005:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(999,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_6d_dp_] comm_hdf_mod.f90:999

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     180
            Global    :      38
            Local     :     142
        Regenerable   :      59
        Spilled       :      17
        
    Routine stack
        Variables     :     732 bytes*
            Reads     :       7 [6.90e+00 ~ 2.7%]
            Writes    :      37 [3.10e+01 ~ 12.1%]
        Spills        :      96 bytes*
            Reads     :      16 [1.51e+01 ~ 5.9%]
            Writes    :      12 [1.20e+01 ~ 4.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_6D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_6D_SP) [73/137=53.3%] comm_hdf_mod.f90(1009,14)
  -> INLINE: (1014,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1015,10) for_array_copy_out
  -> EXTERN: (1015,10) H5DWRITE_REAL_6
  -> EXTERN: (1015,10) for_array_copy_in
  -> EXTERN: (1016,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1014,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1014:40) has aligned access   [ comm_hdf_mod.f90(1014,40) ]
   remark #15388: vectorization support: reference at (1014:40) has aligned access   [ comm_hdf_mod.f90(1014,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1014,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.040 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1014,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1015,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1015:59) has aligned access   [ comm_hdf_mod.f90(1015,59) ]
   remark #15388: vectorization support: reference at (1015:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1009,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_6d_sp_] comm_hdf_mod.f90:1009

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     180
            Global    :      38
            Local     :     142
        Regenerable   :      59
        Spilled       :      17
        
    Routine stack
        Variables     :     732 bytes*
            Reads     :       7 [6.90e+00 ~ 2.7%]
            Writes    :      37 [3.10e+01 ~ 12.1%]
        Spills        :      96 bytes*
            Reads     :      16 [1.51e+01 ~ 5.9%]
            Writes    :      12 [1.20e+01 ~ 4.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_6D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_6D_INT) [74/137=54.0%] comm_hdf_mod.f90(1019,14)
  -> INLINE: (1024,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1025,10) for_array_copy_out
  -> EXTERN: (1025,10) H5DWRITE_INTEGER_6
  -> EXTERN: (1025,10) for_array_copy_in
  -> EXTERN: (1026,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1024,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1024:40) has aligned access   [ comm_hdf_mod.f90(1024,40) ]
   remark #15388: vectorization support: reference at (1024:40) has aligned access   [ comm_hdf_mod.f90(1024,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1024,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.040 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1024,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1025,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1025:62) has aligned access   [ comm_hdf_mod.f90(1025,62) ]
   remark #15388: vectorization support: reference at (1025:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1019,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_6d_int_] comm_hdf_mod.f90:1019

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     180
            Global    :      38
            Local     :     142
        Regenerable   :      59
        Spilled       :      17
        
    Routine stack
        Variables     :     732 bytes*
            Reads     :       7 [6.90e+00 ~ 2.7%]
            Writes    :      37 [3.10e+01 ~ 12.1%]
        Spills        :      96 bytes*
            Reads     :      16 [1.51e+01 ~ 5.9%]
            Writes    :      12 [1.20e+01 ~ 4.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_7D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_7D_DP) [75/137=54.7%] comm_hdf_mod.f90(1029,14)
  -> INLINE: (1034,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1035,10) for_array_copy_out
  -> EXTERN: (1035,10) H5DWRITE_DOUBLE_7
  -> EXTERN: (1035,10) for_array_copy_in
  -> EXTERN: (1036,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1034,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1034:40) has aligned access   [ comm_hdf_mod.f90(1034,40) ]
   remark #15388: vectorization support: reference at (1034:40) has aligned access   [ comm_hdf_mod.f90(1034,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.150 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1034,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1034,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.030 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1034,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1035,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1035:61) has aligned access   [ comm_hdf_mod.f90(1035,61) ]
   remark #15388: vectorization support: reference at (1035:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1035,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1029,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_7d_dp_] comm_hdf_mod.f90:1029

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     195
            Global    :      43
            Local     :     152
        Regenerable   :      62
        Spilled       :      20
        
    Routine stack
        Variables     :     752 bytes*
            Reads     :       7 [4.29e+01 ~ 5.9%]
            Writes    :      41 [1.31e+02 ~ 18.0%]
        Spills        :     120 bytes*
            Reads     :      21 [3.30e+01 ~ 4.5%]
            Writes    :      15 [1.49e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_7D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_7D_SP) [76/137=55.5%] comm_hdf_mod.f90(1039,14)
  -> INLINE: (1044,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1045,10) for_array_copy_out
  -> EXTERN: (1045,10) H5DWRITE_REAL_7
  -> EXTERN: (1045,10) for_array_copy_in
  -> EXTERN: (1046,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1044,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1044:40) has aligned access   [ comm_hdf_mod.f90(1044,40) ]
   remark #15388: vectorization support: reference at (1044:40) has aligned access   [ comm_hdf_mod.f90(1044,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.150 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1044,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1044,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.030 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1044,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1045,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1045:59) has aligned access   [ comm_hdf_mod.f90(1045,59) ]
   remark #15388: vectorization support: reference at (1045:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1045,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1039,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_7d_sp_] comm_hdf_mod.f90:1039

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     195
            Global    :      43
            Local     :     152
        Regenerable   :      62
        Spilled       :      20
        
    Routine stack
        Variables     :     752 bytes*
            Reads     :       7 [4.29e+01 ~ 5.9%]
            Writes    :      41 [1.31e+02 ~ 18.0%]
        Spills        :     120 bytes*
            Reads     :      21 [3.30e+01 ~ 4.5%]
            Writes    :      15 [1.49e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_7D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_7D_INT) [77/137=56.2%] comm_hdf_mod.f90(1049,14)
  -> INLINE: (1054,10) COMM_HDF_MOD::CREATE_HDF_SET (isz = 221) (sz = 234)
    -> EXTERN: (2327,9) for_trim
    -> EXTERN: (2327,28) __getsp_inlined
    -> EXTERN: (2327,28) for_cpstr
    -> EXTERN: (2327,28) __resetsp_inlined
    -> EXTERN: (2327,31) for_trim
    -> EXTERN: (2327,36) _alloca
    -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (2328,5) for_cpystr
    -> EXTERN: (2329,10) __getsp_inlined
    -> EXTERN: (2329,10) _alloca
    -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
    -> EXTERN: (2329,10) __resetsp_inlined
    -> EXTERN: (2330,10) ASSERT
    -> EXTERN: (2331,10) H5DCREATE_F
    -> EXTERN: (2332,10) ASSERT
    -> EXTERN: (2333,10) H5SCLOSE_F
    -> EXTERN: (2334,10) ASSERT
  -> EXTERN: (1055,10) for_array_copy_out
  -> EXTERN: (1055,10) H5DWRITE_INTEGER_7
  -> EXTERN: (1055,10) for_array_copy_in
  -> EXTERN: (1056,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1054,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1054:40) has aligned access   [ comm_hdf_mod.f90(1054,40) ]
   remark #15388: vectorization support: reference at (1054:40) has aligned access   [ comm_hdf_mod.f90(1054,40) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.150 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1054,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1054,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference at (2329:10) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.030 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10) inlined into comm_hdf_mod.f90(1054,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1055,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1055:62) has aligned access   [ comm_hdf_mod.f90(1055,62) ]
   remark #15388: vectorization support: reference at (1055:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1055,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1049,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_7d_int_] comm_hdf_mod.f90:1049

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     195
            Global    :      43
            Local     :     152
        Regenerable   :      62
        Spilled       :      20
        
    Routine stack
        Variables     :     752 bytes*
            Reads     :       7 [4.29e+01 ~ 5.9%]
            Writes    :      41 [1.31e+02 ~ 18.0%]
        Spills        :     120 bytes*
            Reads     :      21 [3.30e+01 ~ 4.5%]
            Writes    :      15 [1.49e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_0D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_0D_DP) [78/137=56.9%] comm_hdf_mod.f90(1067,14)
  -> EXTERN: (1067,14) _alloca
  -> EXTERN: (1067,14) __getsp_inlined
  -> EXTERN: (1077,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1078,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1079,5) for_alloc_allocatable
  -> EXTERN: (1079,5) for_check_mult_overflow64
  -> INLINE: (1079,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1080,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1081,10) __resetsp_inlined
  -> EXTERN: (1081,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1081,10) _alloca
  -> EXTERN: (1081,10) __getsp_inlined
  -> EXTERN: (1083,5) __resetsp_inlined
  -> EXTERN: (1083,5) __getsp_inlined
  -> (1083,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1083,18) _alloca
  -> EXTERN: (1084,10) __resetsp_inlined
  -> EXTERN: (1084,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1084,10) _alloca
  -> EXTERN: (1084,10) _alloca
  -> EXTERN: (1084,10) __getsp_inlined
  -> EXTERN: (1086,10) H5DREAD_DOUBLE_SCALAR
  -> EXTERN: (1088,10) H5SCLOSE_F
  -> EXTERN: (1089,10) H5SCLOSE_F
  -> EXTERN: (1090,5) for_dealloc_allocatable
  -> EXTERN: (1091,3) __resetsp_inlined
  -> EXTERN: (1091,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1081,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1081:40) has aligned access   [ comm_hdf_mod.f90(1081,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1081,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1083,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1083:14)>, stride is 3   [ comm_hdf_mod.f90(1083,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1083,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1083:14) has unaligned access   [ comm_hdf_mod.f90(1083,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1084,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1084:58) has aligned access   [ comm_hdf_mod.f90(1084,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1084,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1084,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1084,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1084:71) has aligned access   [ comm_hdf_mod.f90(1084,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1084,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1084,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1074,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1067,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_0d_dp_] comm_hdf_mod.f90:1067

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::PARSE_HDF_SLICE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::PARSE_HDF_SLICE) [79/137=57.7%] comm_hdf_mod.f90(2433,12)
  -> EXTERN: (2439,5) _alloca
  -> EXTERN: (2439,32) __resetsp_inlined
  -> EXTERN: (2439,32) _alloca
  -> EXTERN: (2439,32) __getsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2437,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <slice(:,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2437,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference slice(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 0.660 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2437,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <slice(:,:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2437,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <slice(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.375
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 0.800 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2439,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized
   remark #25439: unrolled with remainder by 2  

   LOOP BEGIN at comm_hdf_mod.f90(2439,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (2439:27) has aligned access   [ comm_hdf_mod.f90(2439,27) ]
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <hslice(:,:)>, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.088
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 23 
      remark #15477: vector cost: 17.000 
      remark #15478: estimated potential speedup: 1.240 
      remark #15488: --- end vector cost summary ---
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2439,5)
<Remainder>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2439,32)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2439:32)>, stride is 2
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (2439:32)>, masked, stride is 2
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ext(:)>, masked, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(:,:)>, masked, stride is 3
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15460: masked strided loads: 2 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 83.250 
   remark #15478: estimated potential speedup: 0.270 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2439,32)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (2439:32) has aligned access
      remark #15388: vectorization support: reference at (2439:32) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <hslice(:,:)>, masked, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.052
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15458: masked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 23 
      remark #15477: vector cost: 48.500 
      remark #15478: estimated potential speedup: 0.450 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2439,32)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2439:32)>, stride is 2
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, masked, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2439:32)>, masked, stride is 2
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15460: masked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 22 
   remark #15477: vector cost: 59.250 
   remark #15478: estimated potential speedup: 0.370 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2439,32)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between hslice(:,:) (2439:32) and hslice(:,:) (2439:32)
      remark #17106: parallel dependence: assumed OUTPUT dependence between hslice(:,:) (2439:32) and hslice(:,:) (2439:32)
      remark #15388: vectorization support: reference at (2439:32) has aligned access
      remark #15388: vectorization support: reference at (2439:32) has aligned access
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <hslice(:,:)>, masked, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15427: loop was completely unrolled
      remark #15309: vectorization support: normalized vectorization overhead 0.032
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15456: masked unaligned unit stride loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 22 
      remark #15477: vector cost: 46.500 
      remark #15478: estimated potential speedup: 0.450 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2441,5)
   remark #25045: Fused Loops: ( 2441 2443 )

   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(2,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(3,:)>, stride is 3   [ comm_hdf_mod.f90(2441,31) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(3,:)>, stride is 3   [ comm_hdf_mod.f90(2441,43) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2443,5) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2443,5) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 5 
   remark #15453: unmasked strided stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 36 
   remark #15477: vector cost: 77.250 
   remark #15478: estimated potential speedup: 0.460 
   remark #15482: vectorized math library calls: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2443,5)
   remark #25046: Loop lost in Fusion 
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2433,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_parse_hdf_slice_] comm_hdf_mod.f90:2433

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :      95
            Global    :      42
            Local     :      53
        Regenerable   :       3
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_0D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_0D_SP) [80/137=58.4%] comm_hdf_mod.f90(1093,14)
  -> EXTERN: (1093,14) _alloca
  -> EXTERN: (1093,14) __getsp_inlined
  -> EXTERN: (1103,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1104,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1105,5) for_alloc_allocatable
  -> EXTERN: (1105,5) for_check_mult_overflow64
  -> INLINE: (1105,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1106,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1107,10) __resetsp_inlined
  -> EXTERN: (1107,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1107,10) _alloca
  -> EXTERN: (1107,10) __getsp_inlined
  -> EXTERN: (1109,5) __resetsp_inlined
  -> EXTERN: (1109,5) __getsp_inlined
  -> (1109,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1109,18) _alloca
  -> EXTERN: (1110,10) __resetsp_inlined
  -> EXTERN: (1110,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1110,10) _alloca
  -> EXTERN: (1110,10) _alloca
  -> EXTERN: (1110,10) __getsp_inlined
  -> EXTERN: (1112,10) H5DREAD_REAL_SCALAR
  -> EXTERN: (1114,10) H5SCLOSE_F
  -> EXTERN: (1115,10) H5SCLOSE_F
  -> EXTERN: (1116,5) for_dealloc_allocatable
  -> EXTERN: (1117,3) __resetsp_inlined
  -> EXTERN: (1117,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1107,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1107:40) has aligned access   [ comm_hdf_mod.f90(1107,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1107,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1109,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1109:14)>, stride is 3   [ comm_hdf_mod.f90(1109,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1109,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1109:14) has unaligned access   [ comm_hdf_mod.f90(1109,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1110,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1110:58) has aligned access   [ comm_hdf_mod.f90(1110,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1110,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1110,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1110,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1110:71) has aligned access   [ comm_hdf_mod.f90(1110,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1110,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1110,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1100,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1093,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_0d_sp_] comm_hdf_mod.f90:1093

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_0D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_0D_INT) [81/137=59.1%] comm_hdf_mod.f90(1119,14)
  -> EXTERN: (1119,14) _alloca
  -> EXTERN: (1119,14) __getsp_inlined
  -> EXTERN: (1129,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1130,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1131,5) for_alloc_allocatable
  -> EXTERN: (1131,5) for_check_mult_overflow64
  -> INLINE: (1131,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1132,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1133,10) __resetsp_inlined
  -> EXTERN: (1133,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1133,10) _alloca
  -> EXTERN: (1133,10) __getsp_inlined
  -> EXTERN: (1135,5) __resetsp_inlined
  -> EXTERN: (1135,5) __getsp_inlined
  -> (1135,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1135,18) _alloca
  -> EXTERN: (1136,10) __resetsp_inlined
  -> EXTERN: (1136,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1136,10) _alloca
  -> EXTERN: (1136,10) _alloca
  -> EXTERN: (1136,10) __getsp_inlined
  -> EXTERN: (1138,10) H5DREAD_INTEGER_SCALAR
  -> EXTERN: (1140,10) H5SCLOSE_F
  -> EXTERN: (1141,10) H5SCLOSE_F
  -> EXTERN: (1142,5) for_dealloc_allocatable
  -> EXTERN: (1143,3) __resetsp_inlined
  -> EXTERN: (1143,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1133,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1133:40) has aligned access   [ comm_hdf_mod.f90(1133,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1133,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1135,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1135:14)>, stride is 3   [ comm_hdf_mod.f90(1135,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1135,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1135:14) has unaligned access   [ comm_hdf_mod.f90(1135,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1136,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1136:58) has aligned access   [ comm_hdf_mod.f90(1136,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1136,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1136,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1136,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1136:71) has aligned access   [ comm_hdf_mod.f90(1136,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1136,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1136,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1126,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1119,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_0d_int_] comm_hdf_mod.f90:1119

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_1D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_1D_DP) [82/137=59.9%] comm_hdf_mod.f90(1145,14)
  -> EXTERN: (1145,14) _alloca
  -> EXTERN: (1145,14) __getsp_inlined
  -> EXTERN: (1155,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1156,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1157,5) for_alloc_allocatable
  -> EXTERN: (1157,5) for_check_mult_overflow64
  -> INLINE: (1157,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1158,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1159,10) __resetsp_inlined
  -> EXTERN: (1159,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1159,10) _alloca
  -> EXTERN: (1159,10) __getsp_inlined
  -> EXTERN: (1161,5) __resetsp_inlined
  -> EXTERN: (1161,5) __getsp_inlined
  -> (1161,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1161,18) _alloca
  -> EXTERN: (1162,10) __resetsp_inlined
  -> EXTERN: (1162,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1162,10) _alloca
  -> EXTERN: (1162,10) _alloca
  -> EXTERN: (1162,10) __getsp_inlined
  -> EXTERN: (1164,10) __resetsp_inlined
  -> EXTERN: (1164,10) H5DREAD_DOUBLE_1
  -> EXTERN: (1164,10) _alloca
  -> EXTERN: (1164,10) __getsp_inlined
  -> EXTERN: (1166,10) H5SCLOSE_F
  -> EXTERN: (1167,10) H5SCLOSE_F
  -> EXTERN: (1168,5) for_dealloc_allocatable
  -> EXTERN: (1169,3) __resetsp_inlined
  -> EXTERN: (1169,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1159,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1159:40) has aligned access   [ comm_hdf_mod.f90(1159,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1159,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1161,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1161:14)>, stride is 3   [ comm_hdf_mod.f90(1161,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1161,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1161:14) has unaligned access   [ comm_hdf_mod.f90(1161,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1162,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1162:58) has aligned access   [ comm_hdf_mod.f90(1162,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1162,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1162,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1162,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1162:71) has aligned access   [ comm_hdf_mod.f90(1162,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1162,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1162,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1164:55) has aligned access   [ comm_hdf_mod.f90(1164,55) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1164,55) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1164:55) has aligned access   [ comm_hdf_mod.f90(1164,55) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1164,55) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,55)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference arr(:) has aligned access
   remark #15388: vectorization support: reference at (1164:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.640 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,55)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,55)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,55)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1164:55) has aligned access
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1164,55)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1152,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1145,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_1d_dp_] comm_hdf_mod.f90:1145

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     403
            Global    :     106
            Local     :     297
        Regenerable   :      96
        Spilled       :      22
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.0%]
            Writes    :      41 [3.73e+01 ~ 4.7%]
        Spills        :     136 bytes*
            Reads     :      43 [2.77e+01 ~ 3.5%]
            Writes    :      17 [1.63e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_1D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_1D_SP) [83/137=60.6%] comm_hdf_mod.f90(1171,14)
  -> EXTERN: (1171,14) _alloca
  -> EXTERN: (1171,14) __getsp_inlined
  -> EXTERN: (1181,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1182,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1183,5) for_alloc_allocatable
  -> EXTERN: (1183,5) for_check_mult_overflow64
  -> INLINE: (1183,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1184,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1185,10) __resetsp_inlined
  -> EXTERN: (1185,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1185,10) _alloca
  -> EXTERN: (1185,10) __getsp_inlined
  -> EXTERN: (1187,5) __resetsp_inlined
  -> EXTERN: (1187,5) __getsp_inlined
  -> (1187,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1187,18) _alloca
  -> EXTERN: (1188,10) __resetsp_inlined
  -> EXTERN: (1188,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1188,10) _alloca
  -> EXTERN: (1188,10) _alloca
  -> EXTERN: (1188,10) __getsp_inlined
  -> EXTERN: (1190,10) __resetsp_inlined
  -> EXTERN: (1190,10) H5DREAD_REAL_1
  -> EXTERN: (1190,10) _alloca
  -> EXTERN: (1190,10) __getsp_inlined
  -> EXTERN: (1192,10) H5SCLOSE_F
  -> EXTERN: (1193,10) H5SCLOSE_F
  -> EXTERN: (1194,5) for_dealloc_allocatable
  -> EXTERN: (1195,3) __resetsp_inlined
  -> EXTERN: (1195,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1185,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1185:40) has aligned access   [ comm_hdf_mod.f90(1185,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1185,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1187,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1187:14)>, stride is 3   [ comm_hdf_mod.f90(1187,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1187,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1187:14) has unaligned access   [ comm_hdf_mod.f90(1187,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1188,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1188:58) has aligned access   [ comm_hdf_mod.f90(1188,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1188,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1188,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1188,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1188:71) has aligned access   [ comm_hdf_mod.f90(1188,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1188,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1188,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1190:53) has aligned access   [ comm_hdf_mod.f90(1190,53) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1190,53) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 3.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1190:53) has aligned access   [ comm_hdf_mod.f90(1190,53) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1190,53) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference arr(:) has aligned access
   remark #15388: vectorization support: reference at (1190:53) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,53)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,53)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,53)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1190:53) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1190,53)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1178,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1171,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_1d_sp_] comm_hdf_mod.f90:1171

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     412
            Global    :     112
            Local     :     300
        Regenerable   :      96
        Spilled       :      22
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.0%]
            Writes    :      41 [3.73e+01 ~ 4.8%]
        Spills        :     136 bytes*
            Reads     :      36 [2.67e+01 ~ 3.4%]
            Writes    :      17 [1.70e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_1D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_1D_INT) [84/137=61.3%] comm_hdf_mod.f90(1197,14)
  -> EXTERN: (1197,14) _alloca
  -> EXTERN: (1197,14) __getsp_inlined
  -> EXTERN: (1207,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1208,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1209,5) for_alloc_allocatable
  -> EXTERN: (1209,5) for_check_mult_overflow64
  -> INLINE: (1209,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1210,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1211,10) __resetsp_inlined
  -> EXTERN: (1211,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1211,10) _alloca
  -> EXTERN: (1211,10) __getsp_inlined
  -> EXTERN: (1213,5) __resetsp_inlined
  -> EXTERN: (1213,5) __getsp_inlined
  -> (1213,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1213,18) _alloca
  -> EXTERN: (1214,10) __resetsp_inlined
  -> EXTERN: (1214,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1214,10) _alloca
  -> EXTERN: (1214,10) _alloca
  -> EXTERN: (1214,10) __getsp_inlined
  -> EXTERN: (1216,10) __resetsp_inlined
  -> EXTERN: (1216,10) H5DREAD_INTEGER_1
  -> EXTERN: (1216,10) _alloca
  -> EXTERN: (1216,10) __getsp_inlined
  -> EXTERN: (1218,10) H5SCLOSE_F
  -> EXTERN: (1219,10) H5SCLOSE_F
  -> EXTERN: (1220,5) for_dealloc_allocatable
  -> EXTERN: (1221,3) __resetsp_inlined
  -> EXTERN: (1221,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1211,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1211:40) has aligned access   [ comm_hdf_mod.f90(1211,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1211,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1213,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1213:14)>, stride is 3   [ comm_hdf_mod.f90(1213,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1213,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1213:14) has unaligned access   [ comm_hdf_mod.f90(1213,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1214,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1214:58) has aligned access   [ comm_hdf_mod.f90(1214,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1214,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1214,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1214,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1214:71) has aligned access   [ comm_hdf_mod.f90(1214,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1214,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1214,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1216:56) has aligned access   [ comm_hdf_mod.f90(1216,56) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1216,56) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1216:56) has aligned access   [ comm_hdf_mod.f90(1216,56) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1216,56) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,10)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,56)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference arr(:) has aligned access
   remark #15388: vectorization support: reference at (1216:56) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 5.240 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,56)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,56)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,56)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1216:56) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1216,56)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1204,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1197,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_1d_int_] comm_hdf_mod.f90:1197

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     412
            Global    :     112
            Local     :     300
        Regenerable   :      96
        Spilled       :      22
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.0%]
            Writes    :      41 [3.73e+01 ~ 4.8%]
        Spills        :     136 bytes*
            Reads     :      36 [2.67e+01 ~ 3.4%]
            Writes    :      17 [1.70e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_2D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_2D_DP) [85/137=62.0%] comm_hdf_mod.f90(1223,14)
  -> EXTERN: (1223,14) _alloca
  -> EXTERN: (1223,14) __getsp_inlined
  -> EXTERN: (1233,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1234,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1235,5) for_alloc_allocatable
  -> EXTERN: (1235,5) for_check_mult_overflow64
  -> INLINE: (1235,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1236,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1237,10) __resetsp_inlined
  -> EXTERN: (1237,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1237,10) _alloca
  -> EXTERN: (1237,10) __getsp_inlined
  -> EXTERN: (1239,5) __resetsp_inlined
  -> EXTERN: (1239,5) __getsp_inlined
  -> (1239,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1239,18) _alloca
  -> EXTERN: (1240,10) __resetsp_inlined
  -> EXTERN: (1240,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1240,10) _alloca
  -> EXTERN: (1240,10) _alloca
  -> EXTERN: (1240,10) __getsp_inlined
  -> EXTERN: (1242,10) __resetsp_inlined
  -> EXTERN: (1242,10) H5DREAD_DOUBLE_2
  -> EXTERN: (1242,10) _alloca
  -> EXTERN: (1242,10) __getsp_inlined
  -> EXTERN: (1244,10) H5SCLOSE_F
  -> EXTERN: (1245,10) H5SCLOSE_F
  -> EXTERN: (1246,5) for_dealloc_allocatable
  -> EXTERN: (1247,3) __resetsp_inlined
  -> EXTERN: (1247,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1233,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1233:46) has aligned access   [ comm_hdf_mod.f90(1233,46) ]
   remark #15388: vectorization support: reference at (1233:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1237,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1237:40) has aligned access   [ comm_hdf_mod.f90(1237,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1237,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1239,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1239:14)>, stride is 3   [ comm_hdf_mod.f90(1239,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1239,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1239:14) has unaligned access   [ comm_hdf_mod.f90(1239,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1240,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1240:58) has aligned access   [ comm_hdf_mod.f90(1240,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1240,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1240,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1240,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1240:71) has aligned access   [ comm_hdf_mod.f90(1240,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1240,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1240,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1242,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1242:55) has aligned access   [ comm_hdf_mod.f90(1242,55) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1242,55) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1242,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1242:55) has aligned access   [ comm_hdf_mod.f90(1242,55) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1242,55) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1242:60) has aligned access   [ comm_hdf_mod.f90(1242,60) ]
   remark #15388: vectorization support: reference at (1242:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1242,55)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference arr(:,:) has aligned access
      remark #15388: vectorization support: reference at (1242:55) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1242,55)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1242:55) has aligned access
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1242,55)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1230,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1223,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_2d_dp_] comm_hdf_mod.f90:1223

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     455
            Global    :     124
            Local     :     331
        Regenerable   :      96
        Spilled       :      32
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 0.7%]
            Writes    :      45 [4.13e+01 ~ 2.9%]
        Spills        :     224 bytes*
            Reads     :      59 [3.25e+01 ~ 2.3%]
            Writes    :      35 [2.20e+01 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_2D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_2D_SP) [86/137=62.8%] comm_hdf_mod.f90(1249,14)
  -> EXTERN: (1249,14) _alloca
  -> EXTERN: (1249,14) __getsp_inlined
  -> EXTERN: (1259,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1260,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1261,5) for_alloc_allocatable
  -> EXTERN: (1261,5) for_check_mult_overflow64
  -> INLINE: (1261,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1262,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1263,10) __resetsp_inlined
  -> EXTERN: (1263,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1263,10) _alloca
  -> EXTERN: (1263,10) __getsp_inlined
  -> EXTERN: (1265,5) __resetsp_inlined
  -> EXTERN: (1265,5) __getsp_inlined
  -> (1265,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1265,18) _alloca
  -> EXTERN: (1266,10) __resetsp_inlined
  -> EXTERN: (1266,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1266,10) _alloca
  -> EXTERN: (1266,10) _alloca
  -> EXTERN: (1266,10) __getsp_inlined
  -> EXTERN: (1268,10) __resetsp_inlined
  -> EXTERN: (1268,10) H5DREAD_REAL_2
  -> EXTERN: (1268,10) _alloca
  -> EXTERN: (1268,10) __getsp_inlined
  -> EXTERN: (1270,10) H5SCLOSE_F
  -> EXTERN: (1271,10) H5SCLOSE_F
  -> EXTERN: (1272,5) for_dealloc_allocatable
  -> EXTERN: (1273,3) __resetsp_inlined
  -> EXTERN: (1273,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1259,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1259:46) has aligned access   [ comm_hdf_mod.f90(1259,46) ]
   remark #15388: vectorization support: reference at (1259:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1263,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1263:40) has aligned access   [ comm_hdf_mod.f90(1263,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1263,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1265,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1265:14)>, stride is 3   [ comm_hdf_mod.f90(1265,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1265,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1265:14) has unaligned access   [ comm_hdf_mod.f90(1265,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1266,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1266:58) has aligned access   [ comm_hdf_mod.f90(1266,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1266,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1266,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1266,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1266:71) has aligned access   [ comm_hdf_mod.f90(1266,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1266,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1266,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1268,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1268:53) has aligned access   [ comm_hdf_mod.f90(1268,53) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1268,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1268,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1268:53)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1268,53) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1268,53) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1268:53) has unaligned access   [ comm_hdf_mod.f90(1268,53) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1268,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1268,53)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1268:58) has aligned access   [ comm_hdf_mod.f90(1268,58) ]
   remark #15388: vectorization support: reference at (1268:53) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1268,53)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference arr(:,:) has aligned access
      remark #15388: vectorization support: reference at (1268:53) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1268,53)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:)>, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1268:53)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1268:53) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 0.440 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1268,53)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1256,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1249,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_2d_sp_] comm_hdf_mod.f90:1249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     470
            Global    :     135
            Local     :     335
        Regenerable   :      96
        Spilled       :      40
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 0.8%]
            Writes    :      45 [4.13e+01 ~ 3.4%]
        Spills        :     272 bytes*
            Reads     :      69 [4.38e+01 ~ 3.6%]
            Writes    :      40 [2.44e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_2D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_2D_INT) [87/137=63.5%] comm_hdf_mod.f90(1275,14)
  -> EXTERN: (1275,14) _alloca
  -> EXTERN: (1275,14) __getsp_inlined
  -> EXTERN: (1285,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1286,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1287,5) for_alloc_allocatable
  -> EXTERN: (1287,5) for_check_mult_overflow64
  -> INLINE: (1287,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1288,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1289,10) __resetsp_inlined
  -> EXTERN: (1289,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1289,10) _alloca
  -> EXTERN: (1289,10) __getsp_inlined
  -> EXTERN: (1291,5) __resetsp_inlined
  -> EXTERN: (1291,5) __getsp_inlined
  -> (1291,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1291,18) _alloca
  -> EXTERN: (1292,10) __resetsp_inlined
  -> EXTERN: (1292,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1292,10) _alloca
  -> EXTERN: (1292,10) _alloca
  -> EXTERN: (1292,10) __getsp_inlined
  -> EXTERN: (1294,10) __resetsp_inlined
  -> EXTERN: (1294,10) H5DREAD_INTEGER_2
  -> EXTERN: (1294,10) _alloca
  -> EXTERN: (1294,10) __getsp_inlined
  -> EXTERN: (1296,10) H5SCLOSE_F
  -> EXTERN: (1297,10) H5SCLOSE_F
  -> EXTERN: (1298,5) for_dealloc_allocatable
  -> EXTERN: (1299,3) __resetsp_inlined
  -> EXTERN: (1299,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1285,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1285:46) has aligned access   [ comm_hdf_mod.f90(1285,46) ]
   remark #15388: vectorization support: reference at (1285:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1289,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1289:40) has aligned access   [ comm_hdf_mod.f90(1289,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1289,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1291,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1291:14)>, stride is 3   [ comm_hdf_mod.f90(1291,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1291,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1291:14) has unaligned access   [ comm_hdf_mod.f90(1291,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1292,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1292:58) has aligned access   [ comm_hdf_mod.f90(1292,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1292,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1292,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1292,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1292:71) has aligned access   [ comm_hdf_mod.f90(1292,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1292,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1292,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1294,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1294:56) has aligned access   [ comm_hdf_mod.f90(1294,56) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1294,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1294,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1294:56)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1294,56) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1294,56) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1294:56) has unaligned access   [ comm_hdf_mod.f90(1294,56) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1294,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.079
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 0.420 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1294,56)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1294:61) has aligned access   [ comm_hdf_mod.f90(1294,61) ]
   remark #15388: vectorization support: reference at (1294:56) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1294,56)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference arr(:,:) has aligned access
      remark #15388: vectorization support: reference at (1294:56) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1294,56)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:)>, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1294:56)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1294:56) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1294,56)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1282,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1275,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_2d_int_] comm_hdf_mod.f90:1275

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     470
            Global    :     135
            Local     :     335
        Regenerable   :      96
        Spilled       :      40
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 0.8%]
            Writes    :      45 [4.13e+01 ~ 3.4%]
        Spills        :     272 bytes*
            Reads     :      69 [4.38e+01 ~ 3.6%]
            Writes    :      40 [2.44e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_3D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_3D_DP) [88/137=64.2%] comm_hdf_mod.f90(1301,14)
  -> EXTERN: (1301,14) _alloca
  -> EXTERN: (1301,14) __getsp_inlined
  -> EXTERN: (1311,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1312,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1313,5) for_alloc_allocatable
  -> EXTERN: (1313,5) for_check_mult_overflow64
  -> INLINE: (1313,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1314,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1315,10) __resetsp_inlined
  -> EXTERN: (1315,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1315,10) _alloca
  -> EXTERN: (1315,10) __getsp_inlined
  -> EXTERN: (1317,5) __resetsp_inlined
  -> EXTERN: (1317,5) __getsp_inlined
  -> (1317,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1317,18) _alloca
  -> EXTERN: (1318,10) __resetsp_inlined
  -> EXTERN: (1318,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1318,10) _alloca
  -> EXTERN: (1318,10) _alloca
  -> EXTERN: (1318,10) __getsp_inlined
  -> EXTERN: (1320,10) __resetsp_inlined
  -> EXTERN: (1320,10) H5DREAD_DOUBLE_3
  -> EXTERN: (1320,10) _alloca
  -> EXTERN: (1320,10) for_contig_array
  -> EXTERN: (1320,10) __getsp_inlined
  -> EXTERN: (1322,10) H5SCLOSE_F
  -> EXTERN: (1323,10) H5SCLOSE_F
  -> EXTERN: (1324,5) for_dealloc_allocatable
  -> EXTERN: (1325,3) __resetsp_inlined
  -> EXTERN: (1325,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1311,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1311:46) has aligned access   [ comm_hdf_mod.f90(1311,46) ]
   remark #15388: vectorization support: reference at (1311:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1311,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1315,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1315:40) has aligned access   [ comm_hdf_mod.f90(1315,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1315,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1317,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1317:14)>, stride is 3   [ comm_hdf_mod.f90(1317,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1317,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1317:14) has unaligned access   [ comm_hdf_mod.f90(1317,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1318,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1318:58) has aligned access   [ comm_hdf_mod.f90(1318,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1318,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1318,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1318,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1318:71) has aligned access   [ comm_hdf_mod.f90(1318,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1318,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1318,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1320,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1320,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1320:55) has aligned access   [ comm_hdf_mod.f90(1320,55) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1320,55) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1320,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1320:55) has aligned access   [ comm_hdf_mod.f90(1320,55) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1320,55) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 2.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.570 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1320,55)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1320:60) has aligned access   [ comm_hdf_mod.f90(1320,60) ]
   remark #15388: vectorization support: reference at (1320:55) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1320,55)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1320,55)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1320,55)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (1320:55) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1320,55)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1320:55) has aligned access
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.310 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1320,55)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1308,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1301,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_3d_dp_] comm_hdf_mod.f90:1301

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     523
            Global    :     162
            Local     :     361
        Regenerable   :      97
        Spilled       :      53
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.2%]
            Writes    :      49 [4.53e+01 ~ 1.1%]
        Spills        :     384 bytes*
            Reads     :     114 [1.33e+02 ~ 3.2%]
            Writes    :      68 [4.29e+01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_3D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_3D_SP) [89/137=65.0%] comm_hdf_mod.f90(1327,14)
  -> EXTERN: (1327,14) _alloca
  -> EXTERN: (1327,14) __getsp_inlined
  -> EXTERN: (1337,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1338,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1339,5) for_alloc_allocatable
  -> EXTERN: (1339,5) for_check_mult_overflow64
  -> INLINE: (1339,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1340,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1341,10) __resetsp_inlined
  -> EXTERN: (1341,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1341,10) _alloca
  -> EXTERN: (1341,10) __getsp_inlined
  -> EXTERN: (1343,5) __resetsp_inlined
  -> EXTERN: (1343,5) __getsp_inlined
  -> (1343,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1343,18) _alloca
  -> EXTERN: (1344,10) __resetsp_inlined
  -> EXTERN: (1344,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1344,10) _alloca
  -> EXTERN: (1344,10) _alloca
  -> EXTERN: (1344,10) __getsp_inlined
  -> EXTERN: (1346,10) __resetsp_inlined
  -> EXTERN: (1346,10) H5DREAD_REAL_3
  -> EXTERN: (1346,10) _alloca
  -> EXTERN: (1346,10) for_contig_array
  -> EXTERN: (1346,10) __getsp_inlined
  -> EXTERN: (1348,10) H5SCLOSE_F
  -> EXTERN: (1349,10) H5SCLOSE_F
  -> EXTERN: (1350,5) for_dealloc_allocatable
  -> EXTERN: (1351,3) __resetsp_inlined
  -> EXTERN: (1351,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1337,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1337:46) has aligned access   [ comm_hdf_mod.f90(1337,46) ]
   remark #15388: vectorization support: reference at (1337:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1337,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1341,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1341:40) has aligned access   [ comm_hdf_mod.f90(1341,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1341,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1343,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1343:14)>, stride is 3   [ comm_hdf_mod.f90(1343,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1343,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1343:14) has unaligned access   [ comm_hdf_mod.f90(1343,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1344,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1344:58) has aligned access   [ comm_hdf_mod.f90(1344,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1344,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1344,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1344,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1344:71) has aligned access   [ comm_hdf_mod.f90(1344,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1344,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1344,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1346,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1346,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1346:53) has aligned access   [ comm_hdf_mod.f90(1346,53) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1346,53) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1346,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1346:53)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1346,53) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1346,53) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1346:53) has unaligned access   [ comm_hdf_mod.f90(1346,53) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1346,53) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1346,53)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1346:58) has aligned access   [ comm_hdf_mod.f90(1346,58) ]
   remark #15388: vectorization support: reference at (1346:53) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1346,53)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1346,53)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1346,53)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (1346:53) has aligned access
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1346,53)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1346:53)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1346:53) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.083
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.000 
         remark #15478: estimated potential speedup: 0.440 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1346,53)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1334,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1327,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_3d_sp_] comm_hdf_mod.f90:1327

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     525
            Global    :     168
            Local     :     357
        Regenerable   :      97
        Spilled       :      60
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.3%]
            Writes    :      49 [4.53e+01 ~ 1.4%]
        Spills        :     440 bytes*
            Reads     :     118 [1.58e+02 ~ 5.0%]
            Writes    :      74 [5.64e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_3D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_3D_INT) [90/137=65.7%] comm_hdf_mod.f90(1353,14)
  -> EXTERN: (1353,14) _alloca
  -> EXTERN: (1353,14) __getsp_inlined
  -> EXTERN: (1363,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1364,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1365,5) for_alloc_allocatable
  -> EXTERN: (1365,5) for_check_mult_overflow64
  -> INLINE: (1365,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1366,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1367,10) __resetsp_inlined
  -> EXTERN: (1367,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1367,10) _alloca
  -> EXTERN: (1367,10) __getsp_inlined
  -> EXTERN: (1369,5) __resetsp_inlined
  -> EXTERN: (1369,5) __getsp_inlined
  -> (1369,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1369,18) _alloca
  -> EXTERN: (1370,10) __resetsp_inlined
  -> EXTERN: (1370,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1370,10) _alloca
  -> EXTERN: (1370,10) _alloca
  -> EXTERN: (1370,10) __getsp_inlined
  -> EXTERN: (1372,10) __resetsp_inlined
  -> EXTERN: (1372,10) H5DREAD_INTEGER_3
  -> EXTERN: (1372,10) _alloca
  -> EXTERN: (1372,10) for_contig_array
  -> EXTERN: (1372,10) __getsp_inlined
  -> EXTERN: (1374,10) H5SCLOSE_F
  -> EXTERN: (1375,10) H5SCLOSE_F
  -> EXTERN: (1376,5) for_dealloc_allocatable
  -> EXTERN: (1377,3) __resetsp_inlined
  -> EXTERN: (1377,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1363,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1363:46) has aligned access   [ comm_hdf_mod.f90(1363,46) ]
   remark #15388: vectorization support: reference at (1363:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1363,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1367,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1367:40) has aligned access   [ comm_hdf_mod.f90(1367,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1367,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1369,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1369:14)>, stride is 3   [ comm_hdf_mod.f90(1369,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1369,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1369:14) has unaligned access   [ comm_hdf_mod.f90(1369,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1370,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1370:58) has aligned access   [ comm_hdf_mod.f90(1370,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1370,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1370,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1370,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1370:71) has aligned access   [ comm_hdf_mod.f90(1370,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1370,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1370,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1372,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1372,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1372:56) has aligned access   [ comm_hdf_mod.f90(1372,56) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1372,56) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1372,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1372:56)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1372,56) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1372,56) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1372:56) has unaligned access   [ comm_hdf_mod.f90(1372,56) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1372,56) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.079
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.420 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1372,56)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1372:61) has aligned access   [ comm_hdf_mod.f90(1372,61) ]
   remark #15388: vectorization support: reference at (1372:56) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1372,56)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1372,56)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1372,56)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access
         remark #15388: vectorization support: reference at (1372:56) has aligned access
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1372,56)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1372:56)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1372:56) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1372,56)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1360,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1353,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_3d_int_] comm_hdf_mod.f90:1353

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     525
            Global    :     168
            Local     :     357
        Regenerable   :      97
        Spilled       :      60
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.3%]
            Writes    :      49 [4.53e+01 ~ 1.4%]
        Spills        :     440 bytes*
            Reads     :     118 [1.58e+02 ~ 5.0%]
            Writes    :      74 [5.64e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_4D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_4D_DP) [91/137=66.4%] comm_hdf_mod.f90(1379,14)
  -> EXTERN: (1379,14) _alloca
  -> EXTERN: (1379,14) __getsp_inlined
  -> EXTERN: (1389,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1390,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1391,5) for_alloc_allocatable
  -> EXTERN: (1391,5) for_check_mult_overflow64
  -> INLINE: (1391,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1392,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1393,10) __resetsp_inlined
  -> EXTERN: (1393,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1393,10) _alloca
  -> EXTERN: (1393,10) __getsp_inlined
  -> EXTERN: (1395,5) __resetsp_inlined
  -> EXTERN: (1395,5) __getsp_inlined
  -> (1395,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1395,18) _alloca
  -> EXTERN: (1396,10) __resetsp_inlined
  -> EXTERN: (1396,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1396,10) _alloca
  -> EXTERN: (1396,10) _alloca
  -> EXTERN: (1396,10) __getsp_inlined
  -> EXTERN: (1398,10) for_array_copy_out
  -> EXTERN: (1398,10) H5DREAD_DOUBLE_4
  -> EXTERN: (1398,10) for_array_copy_in
  -> EXTERN: (1400,10) H5SCLOSE_F
  -> EXTERN: (1401,10) H5SCLOSE_F
  -> EXTERN: (1402,5) for_dealloc_allocatable
  -> EXTERN: (1403,3) __resetsp_inlined
  -> EXTERN: (1403,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1389,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1389:46) has aligned access   [ comm_hdf_mod.f90(1389,46) ]
   remark #15388: vectorization support: reference at (1389:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1393,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1393:40) has aligned access   [ comm_hdf_mod.f90(1393,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1393,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1395,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1395:14)>, stride is 3   [ comm_hdf_mod.f90(1395,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1395,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1395:14) has unaligned access   [ comm_hdf_mod.f90(1395,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1396,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1396:58) has aligned access   [ comm_hdf_mod.f90(1396,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1396,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1396,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1396,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1396:71) has aligned access   [ comm_hdf_mod.f90(1396,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1396,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1396,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1398,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1398:60) has aligned access   [ comm_hdf_mod.f90(1398,60) ]
   remark #15388: vectorization support: reference at (1398:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1386,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1379,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_4d_dp_] comm_hdf_mod.f90:1379

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      87
            Local     :     317
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     128 bytes*
            Reads     :      35 [2.57e+01 ~ 3.3%]
            Writes    :      16 [1.60e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_4D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_4D_SP) [92/137=67.2%] comm_hdf_mod.f90(1405,14)
  -> EXTERN: (1405,14) _alloca
  -> EXTERN: (1405,14) __getsp_inlined
  -> EXTERN: (1415,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1416,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1417,5) for_alloc_allocatable
  -> EXTERN: (1417,5) for_check_mult_overflow64
  -> INLINE: (1417,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1418,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1419,10) __resetsp_inlined
  -> EXTERN: (1419,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1419,10) _alloca
  -> EXTERN: (1419,10) __getsp_inlined
  -> EXTERN: (1421,5) __resetsp_inlined
  -> EXTERN: (1421,5) __getsp_inlined
  -> (1421,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1421,18) _alloca
  -> EXTERN: (1422,10) __resetsp_inlined
  -> EXTERN: (1422,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1422,10) _alloca
  -> EXTERN: (1422,10) _alloca
  -> EXTERN: (1422,10) __getsp_inlined
  -> EXTERN: (1424,10) for_array_copy_out
  -> EXTERN: (1424,10) H5DREAD_REAL_4
  -> EXTERN: (1424,10) for_array_copy_in
  -> EXTERN: (1426,10) H5SCLOSE_F
  -> EXTERN: (1427,10) H5SCLOSE_F
  -> EXTERN: (1428,5) for_dealloc_allocatable
  -> EXTERN: (1429,3) __resetsp_inlined
  -> EXTERN: (1429,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1415,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1415:46) has aligned access   [ comm_hdf_mod.f90(1415,46) ]
   remark #15388: vectorization support: reference at (1415:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1419,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1419:40) has aligned access   [ comm_hdf_mod.f90(1419,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1419,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1421,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1421:14)>, stride is 3   [ comm_hdf_mod.f90(1421,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1421,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1421:14) has unaligned access   [ comm_hdf_mod.f90(1421,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1422,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1422:58) has aligned access   [ comm_hdf_mod.f90(1422,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1422,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1422,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1422,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1422:71) has aligned access   [ comm_hdf_mod.f90(1422,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1422,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1422,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1424,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1424:58) has aligned access   [ comm_hdf_mod.f90(1424,58) ]
   remark #15388: vectorization support: reference at (1424:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1412,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1405,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_4d_sp_] comm_hdf_mod.f90:1405

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      87
            Local     :     317
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     128 bytes*
            Reads     :      35 [2.57e+01 ~ 3.3%]
            Writes    :      16 [1.60e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_4D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_4D_INT) [93/137=67.9%] comm_hdf_mod.f90(1431,14)
  -> EXTERN: (1431,14) _alloca
  -> EXTERN: (1431,14) __getsp_inlined
  -> EXTERN: (1441,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1442,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1443,5) for_alloc_allocatable
  -> EXTERN: (1443,5) for_check_mult_overflow64
  -> INLINE: (1443,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1444,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1445,10) __resetsp_inlined
  -> EXTERN: (1445,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1445,10) _alloca
  -> EXTERN: (1445,10) __getsp_inlined
  -> EXTERN: (1447,5) __resetsp_inlined
  -> EXTERN: (1447,5) __getsp_inlined
  -> (1447,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1447,18) _alloca
  -> EXTERN: (1448,10) __resetsp_inlined
  -> EXTERN: (1448,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1448,10) _alloca
  -> EXTERN: (1448,10) _alloca
  -> EXTERN: (1448,10) __getsp_inlined
  -> EXTERN: (1450,10) for_array_copy_out
  -> EXTERN: (1450,10) H5DREAD_INTEGER_4
  -> EXTERN: (1450,10) for_array_copy_in
  -> EXTERN: (1452,10) H5SCLOSE_F
  -> EXTERN: (1453,10) H5SCLOSE_F
  -> EXTERN: (1454,5) for_dealloc_allocatable
  -> EXTERN: (1455,3) __resetsp_inlined
  -> EXTERN: (1455,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1441,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1441:46) has aligned access   [ comm_hdf_mod.f90(1441,46) ]
   remark #15388: vectorization support: reference at (1441:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1445,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1445:40) has aligned access   [ comm_hdf_mod.f90(1445,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1445,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1447,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1447:14)>, stride is 3   [ comm_hdf_mod.f90(1447,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1447,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1447:14) has unaligned access   [ comm_hdf_mod.f90(1447,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1448,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1448:58) has aligned access   [ comm_hdf_mod.f90(1448,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1448,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1448,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1448,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1448:71) has aligned access   [ comm_hdf_mod.f90(1448,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1448,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1448,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1450,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1450:61) has aligned access   [ comm_hdf_mod.f90(1450,61) ]
   remark #15388: vectorization support: reference at (1450:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1438,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1431,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_4d_int_] comm_hdf_mod.f90:1431

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      87
            Local     :     317
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     128 bytes*
            Reads     :      35 [2.57e+01 ~ 3.3%]
            Writes    :      16 [1.60e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_5D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_5D_DP) [94/137=68.6%] comm_hdf_mod.f90(1457,14)
  -> EXTERN: (1457,14) _alloca
  -> EXTERN: (1457,14) __getsp_inlined
  -> EXTERN: (1467,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1468,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1469,5) for_alloc_allocatable
  -> EXTERN: (1469,5) for_check_mult_overflow64
  -> INLINE: (1469,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1470,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1471,10) __resetsp_inlined
  -> EXTERN: (1471,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1471,10) _alloca
  -> EXTERN: (1471,10) __getsp_inlined
  -> EXTERN: (1473,5) __resetsp_inlined
  -> EXTERN: (1473,5) __getsp_inlined
  -> (1473,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1473,18) _alloca
  -> EXTERN: (1474,10) __resetsp_inlined
  -> EXTERN: (1474,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1474,10) _alloca
  -> EXTERN: (1474,10) _alloca
  -> EXTERN: (1474,10) __getsp_inlined
  -> EXTERN: (1476,10) for_array_copy_out
  -> EXTERN: (1476,10) H5DREAD_DOUBLE_5
  -> EXTERN: (1476,10) for_array_copy_in
  -> EXTERN: (1478,10) H5SCLOSE_F
  -> EXTERN: (1479,10) H5SCLOSE_F
  -> EXTERN: (1480,5) for_dealloc_allocatable
  -> EXTERN: (1481,3) __resetsp_inlined
  -> EXTERN: (1481,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1467,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1467:46) has aligned access   [ comm_hdf_mod.f90(1467,46) ]
   remark #15388: vectorization support: reference at (1467:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1467,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1471,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1471:40) has aligned access   [ comm_hdf_mod.f90(1471,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1471,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1473,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1473:14)>, stride is 3   [ comm_hdf_mod.f90(1473,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1473,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1473:14) has unaligned access   [ comm_hdf_mod.f90(1473,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1474,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1474:58) has aligned access   [ comm_hdf_mod.f90(1474,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1474,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1474,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1474,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1474:71) has aligned access   [ comm_hdf_mod.f90(1474,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1474,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1474,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1476,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1476:60) has aligned access   [ comm_hdf_mod.f90(1476,60) ]
   remark #15388: vectorization support: reference at (1476:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1476,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1464,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1457,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_5d_dp_] comm_hdf_mod.f90:1457

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     410
            Global    :      87
            Local     :     323
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.1%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_5D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_5D_SP) [95/137=69.3%] comm_hdf_mod.f90(1483,14)
  -> EXTERN: (1483,14) _alloca
  -> EXTERN: (1483,14) __getsp_inlined
  -> EXTERN: (1493,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1494,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1495,5) for_alloc_allocatable
  -> EXTERN: (1495,5) for_check_mult_overflow64
  -> INLINE: (1495,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1496,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1497,10) __resetsp_inlined
  -> EXTERN: (1497,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1497,10) _alloca
  -> EXTERN: (1497,10) __getsp_inlined
  -> EXTERN: (1499,5) __resetsp_inlined
  -> EXTERN: (1499,5) __getsp_inlined
  -> (1499,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1499,18) _alloca
  -> EXTERN: (1500,10) __resetsp_inlined
  -> EXTERN: (1500,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1500,10) _alloca
  -> EXTERN: (1500,10) _alloca
  -> EXTERN: (1500,10) __getsp_inlined
  -> EXTERN: (1502,10) for_array_copy_out
  -> EXTERN: (1502,10) H5DREAD_REAL_5
  -> EXTERN: (1502,10) for_array_copy_in
  -> EXTERN: (1504,10) H5SCLOSE_F
  -> EXTERN: (1505,10) H5SCLOSE_F
  -> EXTERN: (1506,5) for_dealloc_allocatable
  -> EXTERN: (1507,3) __resetsp_inlined
  -> EXTERN: (1507,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1493,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1493:46) has aligned access   [ comm_hdf_mod.f90(1493,46) ]
   remark #15388: vectorization support: reference at (1493:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1493,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1497,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1497:40) has aligned access   [ comm_hdf_mod.f90(1497,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1497,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1499,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1499:14)>, stride is 3   [ comm_hdf_mod.f90(1499,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1499,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1499:14) has unaligned access   [ comm_hdf_mod.f90(1499,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1500,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1500:58) has aligned access   [ comm_hdf_mod.f90(1500,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1500,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1500,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1500,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1500:71) has aligned access   [ comm_hdf_mod.f90(1500,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1500,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1500,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1502,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1502:58) has aligned access   [ comm_hdf_mod.f90(1502,58) ]
   remark #15388: vectorization support: reference at (1502:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1502,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1490,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1483,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_5d_sp_] comm_hdf_mod.f90:1483

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     410
            Global    :      87
            Local     :     323
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.1%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_5D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_5D_INT) [96/137=70.1%] comm_hdf_mod.f90(1509,14)
  -> EXTERN: (1509,14) _alloca
  -> EXTERN: (1509,14) __getsp_inlined
  -> EXTERN: (1519,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1520,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1521,5) for_alloc_allocatable
  -> EXTERN: (1521,5) for_check_mult_overflow64
  -> INLINE: (1521,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1522,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1523,10) __resetsp_inlined
  -> EXTERN: (1523,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1523,10) _alloca
  -> EXTERN: (1523,10) __getsp_inlined
  -> EXTERN: (1525,5) __resetsp_inlined
  -> EXTERN: (1525,5) __getsp_inlined
  -> (1525,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1525,18) _alloca
  -> EXTERN: (1526,10) __resetsp_inlined
  -> EXTERN: (1526,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1526,10) _alloca
  -> EXTERN: (1526,10) _alloca
  -> EXTERN: (1526,10) __getsp_inlined
  -> EXTERN: (1528,10) for_array_copy_out
  -> EXTERN: (1528,10) H5DREAD_INTEGER_5
  -> EXTERN: (1528,10) for_array_copy_in
  -> EXTERN: (1530,10) H5SCLOSE_F
  -> EXTERN: (1531,10) H5SCLOSE_F
  -> EXTERN: (1532,5) for_dealloc_allocatable
  -> EXTERN: (1533,3) __resetsp_inlined
  -> EXTERN: (1533,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1519,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1519:46) has aligned access   [ comm_hdf_mod.f90(1519,46) ]
   remark #15388: vectorization support: reference at (1519:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1519,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1523,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1523:40) has aligned access   [ comm_hdf_mod.f90(1523,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1523,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1525,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1525:14)>, stride is 3   [ comm_hdf_mod.f90(1525,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1525,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1525:14) has unaligned access   [ comm_hdf_mod.f90(1525,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1526,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1526:58) has aligned access   [ comm_hdf_mod.f90(1526,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1526,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1526,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1526,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1526:71) has aligned access   [ comm_hdf_mod.f90(1526,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1526,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1526,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1528,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1528:61) has aligned access   [ comm_hdf_mod.f90(1528,61) ]
   remark #15388: vectorization support: reference at (1528:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1528,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1516,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1509,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_5d_int_] comm_hdf_mod.f90:1509

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     410
            Global    :      87
            Local     :     323
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.1%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_6D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_6D_DP) [97/137=70.8%] comm_hdf_mod.f90(1535,14)
  -> EXTERN: (1535,14) _alloca
  -> EXTERN: (1535,14) __getsp_inlined
  -> EXTERN: (1545,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1546,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1547,5) for_alloc_allocatable
  -> EXTERN: (1547,5) for_check_mult_overflow64
  -> INLINE: (1547,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1548,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1549,10) __resetsp_inlined
  -> EXTERN: (1549,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1549,10) _alloca
  -> EXTERN: (1549,10) __getsp_inlined
  -> EXTERN: (1551,5) __resetsp_inlined
  -> EXTERN: (1551,5) __getsp_inlined
  -> (1551,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1551,18) _alloca
  -> EXTERN: (1552,10) __resetsp_inlined
  -> EXTERN: (1552,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1552,10) _alloca
  -> EXTERN: (1552,10) _alloca
  -> EXTERN: (1552,10) __getsp_inlined
  -> EXTERN: (1554,10) for_array_copy_out
  -> EXTERN: (1554,10) H5DREAD_DOUBLE_6
  -> EXTERN: (1554,10) for_array_copy_in
  -> EXTERN: (1556,10) H5SCLOSE_F
  -> EXTERN: (1557,10) H5SCLOSE_F
  -> EXTERN: (1558,5) for_dealloc_allocatable
  -> EXTERN: (1559,3) __resetsp_inlined
  -> EXTERN: (1559,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1545,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1545:46) has aligned access   [ comm_hdf_mod.f90(1545,46) ]
   remark #15388: vectorization support: reference at (1545:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1549,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1549:40) has aligned access   [ comm_hdf_mod.f90(1549,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1549,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1551,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1551:14)>, stride is 3   [ comm_hdf_mod.f90(1551,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1551,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1551:14) has unaligned access   [ comm_hdf_mod.f90(1551,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1552,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1552:58) has aligned access   [ comm_hdf_mod.f90(1552,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1552,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1552,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1552,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1552:71) has aligned access   [ comm_hdf_mod.f90(1552,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1552,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1552,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1554,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1554:60) has aligned access   [ comm_hdf_mod.f90(1554,60) ]
   remark #15388: vectorization support: reference at (1554:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1542,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1535,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_6d_dp_] comm_hdf_mod.f90:1535

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     424
            Global    :      87
            Local     :     337
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.0%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_6D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_6D_SP) [98/137=71.5%] comm_hdf_mod.f90(1561,14)
  -> EXTERN: (1561,14) _alloca
  -> EXTERN: (1561,14) __getsp_inlined
  -> EXTERN: (1571,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1572,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1573,5) for_alloc_allocatable
  -> EXTERN: (1573,5) for_check_mult_overflow64
  -> INLINE: (1573,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1574,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1575,10) __resetsp_inlined
  -> EXTERN: (1575,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1575,10) _alloca
  -> EXTERN: (1575,10) __getsp_inlined
  -> EXTERN: (1577,5) __resetsp_inlined
  -> EXTERN: (1577,5) __getsp_inlined
  -> (1577,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1577,18) _alloca
  -> EXTERN: (1578,10) __resetsp_inlined
  -> EXTERN: (1578,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1578,10) _alloca
  -> EXTERN: (1578,10) _alloca
  -> EXTERN: (1578,10) __getsp_inlined
  -> EXTERN: (1580,10) for_array_copy_out
  -> EXTERN: (1580,10) H5DREAD_REAL_6
  -> EXTERN: (1580,10) for_array_copy_in
  -> EXTERN: (1582,10) H5SCLOSE_F
  -> EXTERN: (1583,10) H5SCLOSE_F
  -> EXTERN: (1584,5) for_dealloc_allocatable
  -> EXTERN: (1585,3) __resetsp_inlined
  -> EXTERN: (1585,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1571,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1571:46) has aligned access   [ comm_hdf_mod.f90(1571,46) ]
   remark #15388: vectorization support: reference at (1571:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1575,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1575:40) has aligned access   [ comm_hdf_mod.f90(1575,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1575,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1577,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1577:14)>, stride is 3   [ comm_hdf_mod.f90(1577,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1577,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1577:14) has unaligned access   [ comm_hdf_mod.f90(1577,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1578,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1578:58) has aligned access   [ comm_hdf_mod.f90(1578,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1578,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1578,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1578,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1578:71) has aligned access   [ comm_hdf_mod.f90(1578,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1578,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1578,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1580,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1580:58) has aligned access   [ comm_hdf_mod.f90(1580,58) ]
   remark #15388: vectorization support: reference at (1580:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1568,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1561,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_6d_sp_] comm_hdf_mod.f90:1561

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     424
            Global    :      87
            Local     :     337
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.0%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_6D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_6D_INT) [99/137=72.3%] comm_hdf_mod.f90(1587,14)
  -> EXTERN: (1587,14) _alloca
  -> EXTERN: (1587,14) __getsp_inlined
  -> EXTERN: (1597,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1598,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1599,5) for_alloc_allocatable
  -> EXTERN: (1599,5) for_check_mult_overflow64
  -> INLINE: (1599,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1600,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1601,10) __resetsp_inlined
  -> EXTERN: (1601,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1601,10) _alloca
  -> EXTERN: (1601,10) __getsp_inlined
  -> EXTERN: (1603,5) __resetsp_inlined
  -> EXTERN: (1603,5) __getsp_inlined
  -> (1603,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1603,18) _alloca
  -> EXTERN: (1604,10) __resetsp_inlined
  -> EXTERN: (1604,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1604,10) _alloca
  -> EXTERN: (1604,10) _alloca
  -> EXTERN: (1604,10) __getsp_inlined
  -> EXTERN: (1606,10) for_array_copy_out
  -> EXTERN: (1606,10) H5DREAD_INTEGER_6
  -> EXTERN: (1606,10) for_array_copy_in
  -> EXTERN: (1608,10) H5SCLOSE_F
  -> EXTERN: (1609,10) H5SCLOSE_F
  -> EXTERN: (1610,5) for_dealloc_allocatable
  -> EXTERN: (1611,3) __resetsp_inlined
  -> EXTERN: (1611,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1597,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1597:46) has aligned access   [ comm_hdf_mod.f90(1597,46) ]
   remark #15388: vectorization support: reference at (1597:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1601,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1601:40) has aligned access   [ comm_hdf_mod.f90(1601,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1601,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1603,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1603:14)>, stride is 3   [ comm_hdf_mod.f90(1603,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1603,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1603:14) has unaligned access   [ comm_hdf_mod.f90(1603,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1604,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1604:58) has aligned access   [ comm_hdf_mod.f90(1604,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1604,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1604,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1604,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1604:71) has aligned access   [ comm_hdf_mod.f90(1604,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1604,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1604,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1606,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1606:61) has aligned access   [ comm_hdf_mod.f90(1606,61) ]
   remark #15388: vectorization support: reference at (1606:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1594,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1587,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_6d_int_] comm_hdf_mod.f90:1587

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     424
            Global    :      87
            Local     :     337
        Regenerable   :      96
        Spilled       :      23
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     144 bytes*
            Reads     :      44 [3.21e+01 ~ 4.0%]
            Writes    :      18 [1.80e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_7D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_7D_DP) [100/137=73.0%] comm_hdf_mod.f90(1613,14)
  -> EXTERN: (1613,14) _alloca
  -> EXTERN: (1613,14) __getsp_inlined
  -> EXTERN: (1623,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1624,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1625,5) for_alloc_allocatable
  -> EXTERN: (1625,5) for_check_mult_overflow64
  -> INLINE: (1625,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1626,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1627,10) __resetsp_inlined
  -> EXTERN: (1627,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1627,10) _alloca
  -> EXTERN: (1627,10) __getsp_inlined
  -> EXTERN: (1629,5) __resetsp_inlined
  -> EXTERN: (1629,5) __getsp_inlined
  -> (1629,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1629,18) _alloca
  -> EXTERN: (1630,10) __resetsp_inlined
  -> EXTERN: (1630,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1630,10) _alloca
  -> EXTERN: (1630,10) _alloca
  -> EXTERN: (1630,10) __getsp_inlined
  -> EXTERN: (1632,10) for_array_copy_out
  -> EXTERN: (1632,10) H5DREAD_DOUBLE_7
  -> EXTERN: (1632,10) for_array_copy_in
  -> EXTERN: (1634,10) H5SCLOSE_F
  -> EXTERN: (1635,10) H5SCLOSE_F
  -> EXTERN: (1636,5) for_dealloc_allocatable
  -> EXTERN: (1637,3) __resetsp_inlined
  -> EXTERN: (1637,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1623,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1623:46) has aligned access   [ comm_hdf_mod.f90(1623,46) ]
   remark #15388: vectorization support: reference at (1623:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1623,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1627,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1627:40) has aligned access   [ comm_hdf_mod.f90(1627,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1627,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1629,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1629:14)>, stride is 3   [ comm_hdf_mod.f90(1629,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1629,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1629:14) has unaligned access   [ comm_hdf_mod.f90(1629,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1630,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1630:58) has aligned access   [ comm_hdf_mod.f90(1630,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1630,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1630,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1630,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1630:71) has aligned access   [ comm_hdf_mod.f90(1630,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1630,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1630,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1632,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1632:60) has aligned access   [ comm_hdf_mod.f90(1632,60) ]
   remark #15388: vectorization support: reference at (1632:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1632,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1620,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1613,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_7d_dp_] comm_hdf_mod.f90:1613

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     440
            Global    :      92
            Local     :     348
        Regenerable   :      99
        Spilled       :      24
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     152 bytes*
            Reads     :      46 [4.01e+01 ~ 3.1%]
            Writes    :      19 [1.90e+01 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_7D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_7D_SP) [101/137=73.7%] comm_hdf_mod.f90(1639,14)
  -> EXTERN: (1639,14) _alloca
  -> EXTERN: (1639,14) __getsp_inlined
  -> EXTERN: (1649,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1650,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1651,5) for_alloc_allocatable
  -> EXTERN: (1651,5) for_check_mult_overflow64
  -> INLINE: (1651,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1652,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1653,10) __resetsp_inlined
  -> EXTERN: (1653,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1653,10) _alloca
  -> EXTERN: (1653,10) __getsp_inlined
  -> EXTERN: (1655,5) __resetsp_inlined
  -> EXTERN: (1655,5) __getsp_inlined
  -> (1655,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1655,18) _alloca
  -> EXTERN: (1656,10) __resetsp_inlined
  -> EXTERN: (1656,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1656,10) _alloca
  -> EXTERN: (1656,10) _alloca
  -> EXTERN: (1656,10) __getsp_inlined
  -> EXTERN: (1658,10) for_array_copy_out
  -> EXTERN: (1658,10) H5DREAD_REAL_7
  -> EXTERN: (1658,10) for_array_copy_in
  -> EXTERN: (1660,10) H5SCLOSE_F
  -> EXTERN: (1661,10) H5SCLOSE_F
  -> EXTERN: (1662,5) for_dealloc_allocatable
  -> EXTERN: (1663,3) __resetsp_inlined
  -> EXTERN: (1663,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1649,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1649:46) has aligned access   [ comm_hdf_mod.f90(1649,46) ]
   remark #15388: vectorization support: reference at (1649:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1649,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1653,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1653:40) has aligned access   [ comm_hdf_mod.f90(1653,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1653,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1655,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1655:14)>, stride is 3   [ comm_hdf_mod.f90(1655,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1655,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1655:14) has unaligned access   [ comm_hdf_mod.f90(1655,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1656,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1656:58) has aligned access   [ comm_hdf_mod.f90(1656,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1656,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1656,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1656,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1656:71) has aligned access   [ comm_hdf_mod.f90(1656,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1656,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1656,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1658,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1658:58) has aligned access   [ comm_hdf_mod.f90(1658,58) ]
   remark #15388: vectorization support: reference at (1658:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1658,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1646,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1639,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_7d_sp_] comm_hdf_mod.f90:1639

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     440
            Global    :      92
            Local     :     348
        Regenerable   :      99
        Spilled       :      24
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     152 bytes*
            Reads     :      46 [4.01e+01 ~ 3.1%]
            Writes    :      19 [1.90e+01 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::READ_HDF_SLICE_7D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::READ_HDF_SLICE_7D_INT) [102/137=74.5%] comm_hdf_mod.f90(1665,14)
  -> EXTERN: (1665,14) _alloca
  -> EXTERN: (1665,14) __getsp_inlined
  -> EXTERN: (1675,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1676,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1677,5) for_alloc_allocatable
  -> EXTERN: (1677,5) for_check_mult_overflow64
  -> INLINE: (1677,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1678,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1679,10) __resetsp_inlined
  -> EXTERN: (1679,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1679,10) _alloca
  -> EXTERN: (1679,10) __getsp_inlined
  -> EXTERN: (1681,5) __resetsp_inlined
  -> EXTERN: (1681,5) __getsp_inlined
  -> (1681,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1681,18) _alloca
  -> EXTERN: (1682,10) __resetsp_inlined
  -> EXTERN: (1682,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1682,10) _alloca
  -> EXTERN: (1682,10) _alloca
  -> EXTERN: (1682,10) __getsp_inlined
  -> EXTERN: (1684,10) for_array_copy_out
  -> EXTERN: (1684,10) H5DREAD_INTEGER_7
  -> EXTERN: (1684,10) for_array_copy_in
  -> EXTERN: (1686,10) H5SCLOSE_F
  -> EXTERN: (1687,10) H5SCLOSE_F
  -> EXTERN: (1688,5) for_dealloc_allocatable
  -> EXTERN: (1689,3) __resetsp_inlined
  -> EXTERN: (1689,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1675,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1675:46) has aligned access   [ comm_hdf_mod.f90(1675,46) ]
   remark #15388: vectorization support: reference at (1675:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1675,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1679,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1679:40) has aligned access   [ comm_hdf_mod.f90(1679,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1679,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1681,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1681:14)>, stride is 3   [ comm_hdf_mod.f90(1681,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1681,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1681:14) has unaligned access   [ comm_hdf_mod.f90(1681,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1682,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1682:58) has aligned access   [ comm_hdf_mod.f90(1682,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1682,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1682,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1682,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1682:71) has aligned access   [ comm_hdf_mod.f90(1682,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1682,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1682,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1684,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1684:61) has aligned access   [ comm_hdf_mod.f90(1684,61) ]
   remark #15388: vectorization support: reference at (1684:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1684,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1672,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1665,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_read_hdf_slice_7d_int_] comm_hdf_mod.f90:1665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     440
            Global    :      92
            Local     :     348
        Regenerable   :      99
        Spilled       :      24
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     152 bytes*
            Reads     :      46 [4.01e+01 ~ 3.1%]
            Writes    :      19 [1.90e+01 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_0D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_0D_DP) [103/137=75.2%] comm_hdf_mod.f90(1691,14)
  -> EXTERN: (1691,14) _alloca
  -> EXTERN: (1691,14) __getsp_inlined
  -> EXTERN: (1701,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1702,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1703,5) for_alloc_allocatable
  -> EXTERN: (1703,5) for_check_mult_overflow64
  -> INLINE: (1703,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1704,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1705,10) __resetsp_inlined
  -> EXTERN: (1705,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1705,10) _alloca
  -> EXTERN: (1705,10) __getsp_inlined
  -> EXTERN: (1707,5) __resetsp_inlined
  -> EXTERN: (1707,5) __getsp_inlined
  -> (1707,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1707,18) _alloca
  -> EXTERN: (1708,10) __resetsp_inlined
  -> EXTERN: (1708,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1708,10) _alloca
  -> EXTERN: (1708,10) _alloca
  -> EXTERN: (1708,10) __getsp_inlined
  -> EXTERN: (1710,10) H5DWRITE_DOUBLE_SCALAR
  -> EXTERN: (1712,10) H5SCLOSE_F
  -> EXTERN: (1713,10) H5SCLOSE_F
  -> EXTERN: (1714,5) for_dealloc_allocatable
  -> EXTERN: (1715,3) __resetsp_inlined
  -> EXTERN: (1715,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1705,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1705:40) has aligned access   [ comm_hdf_mod.f90(1705,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1705,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1707,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1707:14)>, stride is 3   [ comm_hdf_mod.f90(1707,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1707,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1707:14) has unaligned access   [ comm_hdf_mod.f90(1707,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1708,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1708:58) has aligned access   [ comm_hdf_mod.f90(1708,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1708,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1708,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1708,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1708:71) has aligned access   [ comm_hdf_mod.f90(1708,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1708,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1708,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1698,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1691,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_0d_dp_] comm_hdf_mod.f90:1691

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_0D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_0D_SP) [104/137=75.9%] comm_hdf_mod.f90(1717,14)
  -> EXTERN: (1717,14) _alloca
  -> EXTERN: (1717,14) __getsp_inlined
  -> EXTERN: (1727,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1728,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1729,5) for_alloc_allocatable
  -> EXTERN: (1729,5) for_check_mult_overflow64
  -> INLINE: (1729,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1730,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1731,10) __resetsp_inlined
  -> EXTERN: (1731,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1731,10) _alloca
  -> EXTERN: (1731,10) __getsp_inlined
  -> EXTERN: (1733,5) __resetsp_inlined
  -> EXTERN: (1733,5) __getsp_inlined
  -> (1733,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1733,18) _alloca
  -> EXTERN: (1734,10) __resetsp_inlined
  -> EXTERN: (1734,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1734,10) _alloca
  -> EXTERN: (1734,10) _alloca
  -> EXTERN: (1734,10) __getsp_inlined
  -> EXTERN: (1736,10) H5DWRITE_REAL_SCALAR
  -> EXTERN: (1738,10) H5SCLOSE_F
  -> EXTERN: (1739,10) H5SCLOSE_F
  -> EXTERN: (1740,5) for_dealloc_allocatable
  -> EXTERN: (1741,3) __resetsp_inlined
  -> EXTERN: (1741,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1731,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1731:40) has aligned access   [ comm_hdf_mod.f90(1731,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1731,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1733,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1733:14)>, stride is 3   [ comm_hdf_mod.f90(1733,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1733,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1733:14) has unaligned access   [ comm_hdf_mod.f90(1733,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1734,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1734:58) has aligned access   [ comm_hdf_mod.f90(1734,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1734,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1734,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1734,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1734:71) has aligned access   [ comm_hdf_mod.f90(1734,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1734,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1734,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1724,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1717,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_0d_sp_] comm_hdf_mod.f90:1717

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_0D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_0D_INT) [105/137=76.6%] comm_hdf_mod.f90(1743,14)
  -> EXTERN: (1743,14) _alloca
  -> EXTERN: (1743,14) __getsp_inlined
  -> EXTERN: (1753,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1754,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1755,5) for_alloc_allocatable
  -> EXTERN: (1755,5) for_check_mult_overflow64
  -> INLINE: (1755,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1756,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1757,10) __resetsp_inlined
  -> EXTERN: (1757,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1757,10) _alloca
  -> EXTERN: (1757,10) __getsp_inlined
  -> EXTERN: (1759,5) __resetsp_inlined
  -> EXTERN: (1759,5) __getsp_inlined
  -> (1759,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1759,18) _alloca
  -> EXTERN: (1760,10) __resetsp_inlined
  -> EXTERN: (1760,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1760,10) _alloca
  -> EXTERN: (1760,10) _alloca
  -> EXTERN: (1760,10) __getsp_inlined
  -> EXTERN: (1762,10) H5DWRITE_INTEGER_SCALAR
  -> EXTERN: (1764,10) H5SCLOSE_F
  -> EXTERN: (1765,10) H5SCLOSE_F
  -> EXTERN: (1766,5) for_dealloc_allocatable
  -> EXTERN: (1767,3) __resetsp_inlined
  -> EXTERN: (1767,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1757,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1757:40) has aligned access   [ comm_hdf_mod.f90(1757,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1757,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1759,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1759:14)>, stride is 3   [ comm_hdf_mod.f90(1759,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1759,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1759:14) has unaligned access   [ comm_hdf_mod.f90(1759,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1760,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1760:58) has aligned access   [ comm_hdf_mod.f90(1760,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1760,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1760,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1760,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1760:71) has aligned access   [ comm_hdf_mod.f90(1760,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1760,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1760,10)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1750,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1743,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_0d_int_] comm_hdf_mod.f90:1743

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     359
            Global    :      85
            Local     :     274
        Regenerable   :      96
        Spilled       :      21
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      39 [3.53e+01 ~ 5.1%]
        Spills        :     128 bytes*
            Reads     :      30 [2.12e+01 ~ 3.1%]
            Writes    :      16 [1.60e+01 ~ 2.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_1D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_1D_DP) [106/137=77.4%] comm_hdf_mod.f90(1769,14)
  -> EXTERN: (1769,14) _alloca
  -> EXTERN: (1769,14) __getsp_inlined
  -> EXTERN: (1779,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1780,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1781,5) for_alloc_allocatable
  -> EXTERN: (1781,5) for_check_mult_overflow64
  -> INLINE: (1781,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1782,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1783,10) __resetsp_inlined
  -> EXTERN: (1783,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1783,10) _alloca
  -> EXTERN: (1783,10) __getsp_inlined
  -> EXTERN: (1785,5) __resetsp_inlined
  -> EXTERN: (1785,5) __getsp_inlined
  -> (1785,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1785,18) _alloca
  -> EXTERN: (1786,10) __resetsp_inlined
  -> EXTERN: (1786,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1786,10) _alloca
  -> EXTERN: (1786,10) _alloca
  -> EXTERN: (1786,10) __getsp_inlined
  -> EXTERN: (1788,10) __resetsp_inlined
  -> EXTERN: (1788,10) H5DWRITE_DOUBLE_1
  -> EXTERN: (1788,10) _alloca
  -> EXTERN: (1788,10) __getsp_inlined
  -> EXTERN: (1790,10) H5SCLOSE_F
  -> EXTERN: (1791,10) H5SCLOSE_F
  -> EXTERN: (1792,5) for_dealloc_allocatable
  -> EXTERN: (1793,3) __resetsp_inlined
  -> EXTERN: (1793,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1783,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1783:40) has aligned access   [ comm_hdf_mod.f90(1783,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1783,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1785,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1785:14)>, stride is 3   [ comm_hdf_mod.f90(1785,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1785,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1785:14) has unaligned access   [ comm_hdf_mod.f90(1785,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1786,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1786:58) has aligned access   [ comm_hdf_mod.f90(1786,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1786,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1786,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1786,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1786:71) has aligned access   [ comm_hdf_mod.f90(1786,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1786,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1786,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1788,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1788:56) has aligned access   [ comm_hdf_mod.f90(1788,56) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1788,56) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1788,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1788,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1788:56) has aligned access   [ comm_hdf_mod.f90(1788,56) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1788,56) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1788,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1776,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1769,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_1d_dp_] comm_hdf_mod.f90:1769

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     382
            Global    :      98
            Local     :     284
        Regenerable   :      96
        Spilled       :      24
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.0%]
            Writes    :      41 [3.73e+01 ~ 5.0%]
        Spills        :     152 bytes*
            Reads     :      46 [2.91e+01 ~ 3.9%]
            Writes    :      19 [1.90e+01 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_1D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_1D_SP) [107/137=78.1%] comm_hdf_mod.f90(1795,14)
  -> EXTERN: (1795,14) _alloca
  -> EXTERN: (1795,14) __getsp_inlined
  -> EXTERN: (1805,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1806,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1807,5) for_alloc_allocatable
  -> EXTERN: (1807,5) for_check_mult_overflow64
  -> INLINE: (1807,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1808,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1809,10) __resetsp_inlined
  -> EXTERN: (1809,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1809,10) _alloca
  -> EXTERN: (1809,10) __getsp_inlined
  -> EXTERN: (1811,5) __resetsp_inlined
  -> EXTERN: (1811,5) __getsp_inlined
  -> (1811,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1811,18) _alloca
  -> EXTERN: (1812,10) __resetsp_inlined
  -> EXTERN: (1812,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1812,10) _alloca
  -> EXTERN: (1812,10) _alloca
  -> EXTERN: (1812,10) __getsp_inlined
  -> EXTERN: (1814,10) __resetsp_inlined
  -> EXTERN: (1814,10) H5DWRITE_REAL_1
  -> EXTERN: (1814,10) _alloca
  -> EXTERN: (1814,10) __getsp_inlined
  -> EXTERN: (1816,10) H5SCLOSE_F
  -> EXTERN: (1817,10) H5SCLOSE_F
  -> EXTERN: (1818,5) for_dealloc_allocatable
  -> EXTERN: (1819,3) __resetsp_inlined
  -> EXTERN: (1819,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1809,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1809:40) has aligned access   [ comm_hdf_mod.f90(1809,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1809,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1811,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1811:14)>, stride is 3   [ comm_hdf_mod.f90(1811,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1811,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1811:14) has unaligned access   [ comm_hdf_mod.f90(1811,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1812,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1812:58) has aligned access   [ comm_hdf_mod.f90(1812,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1812,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1812,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1812,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1812:71) has aligned access   [ comm_hdf_mod.f90(1812,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1812,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1812,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1814,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1814:54) has aligned access   [ comm_hdf_mod.f90(1814,54) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1814,54) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.000 
   remark #15478: estimated potential speedup: 3.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1814,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1814,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1814:54) has aligned access   [ comm_hdf_mod.f90(1814,54) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1814,54) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1814,10)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1802,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1795,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_1d_sp_] comm_hdf_mod.f90:1795

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     386
            Global    :     101
            Local     :     285
        Regenerable   :      96
        Spilled       :      24
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      41 [3.73e+01 ~ 5.0%]
        Spills        :     152 bytes*
            Reads     :      44 [2.87e+01 ~ 3.9%]
            Writes    :      19 [1.90e+01 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_1D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_1D_INT) [108/137=78.8%] comm_hdf_mod.f90(1821,14)
  -> EXTERN: (1821,14) _alloca
  -> EXTERN: (1821,14) __getsp_inlined
  -> EXTERN: (1831,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1832,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1833,5) for_alloc_allocatable
  -> EXTERN: (1833,5) for_check_mult_overflow64
  -> INLINE: (1833,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1834,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1835,10) __resetsp_inlined
  -> EXTERN: (1835,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1835,10) _alloca
  -> EXTERN: (1835,10) __getsp_inlined
  -> EXTERN: (1837,5) __resetsp_inlined
  -> EXTERN: (1837,5) __getsp_inlined
  -> (1837,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1837,18) _alloca
  -> EXTERN: (1838,10) __resetsp_inlined
  -> EXTERN: (1838,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1838,10) _alloca
  -> EXTERN: (1838,10) _alloca
  -> EXTERN: (1838,10) __getsp_inlined
  -> EXTERN: (1840,10) __resetsp_inlined
  -> EXTERN: (1840,10) H5DWRITE_INTEGER_1
  -> EXTERN: (1840,10) _alloca
  -> EXTERN: (1840,10) __getsp_inlined
  -> EXTERN: (1842,10) H5SCLOSE_F
  -> EXTERN: (1843,10) H5SCLOSE_F
  -> EXTERN: (1844,5) for_dealloc_allocatable
  -> EXTERN: (1845,3) __resetsp_inlined
  -> EXTERN: (1845,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1835,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1835:40) has aligned access   [ comm_hdf_mod.f90(1835,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1835,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1837,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1837:14)>, stride is 3   [ comm_hdf_mod.f90(1837,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1837,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1837:14) has unaligned access   [ comm_hdf_mod.f90(1837,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1838,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1838:58) has aligned access   [ comm_hdf_mod.f90(1838,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1838,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1838,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1838,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1838:71) has aligned access   [ comm_hdf_mod.f90(1838,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1838,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1838,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1840,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1840:57) has aligned access   [ comm_hdf_mod.f90(1840,57) ]
   remark #15389: vectorization support: reference arr(:) has unaligned access   [ comm_hdf_mod.f90(1840,57) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1840,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1840,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1840:57) has aligned access   [ comm_hdf_mod.f90(1840,57) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1840,57) ]
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1840,10)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1828,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1821,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_1d_int_] comm_hdf_mod.f90:1821

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     386
            Global    :     101
            Local     :     285
        Regenerable   :      96
        Spilled       :      24
        
    Routine stack
        Variables     :    1316 bytes*
            Reads     :       8 [7.80e+00 ~ 1.1%]
            Writes    :      41 [3.73e+01 ~ 5.0%]
        Spills        :     152 bytes*
            Reads     :      44 [2.87e+01 ~ 3.9%]
            Writes    :      19 [1.90e+01 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_2D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_2D_DP) [109/137=79.6%] comm_hdf_mod.f90(1847,14)
  -> EXTERN: (1847,14) _alloca
  -> EXTERN: (1847,14) __getsp_inlined
  -> EXTERN: (1857,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1858,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1859,5) for_alloc_allocatable
  -> EXTERN: (1859,5) for_check_mult_overflow64
  -> INLINE: (1859,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1860,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1861,10) __resetsp_inlined
  -> EXTERN: (1861,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1861,10) _alloca
  -> EXTERN: (1861,10) __getsp_inlined
  -> EXTERN: (1863,5) __resetsp_inlined
  -> EXTERN: (1863,5) __getsp_inlined
  -> (1863,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1863,18) _alloca
  -> EXTERN: (1864,10) __resetsp_inlined
  -> EXTERN: (1864,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1864,10) _alloca
  -> EXTERN: (1864,10) _alloca
  -> EXTERN: (1864,10) __getsp_inlined
  -> EXTERN: (1866,10) __resetsp_inlined
  -> EXTERN: (1866,10) H5DWRITE_DOUBLE_2
  -> EXTERN: (1866,10) _alloca
  -> EXTERN: (1866,10) __getsp_inlined
  -> EXTERN: (1868,10) H5SCLOSE_F
  -> EXTERN: (1869,10) H5SCLOSE_F
  -> EXTERN: (1870,5) for_dealloc_allocatable
  -> EXTERN: (1871,3) __resetsp_inlined
  -> EXTERN: (1871,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1857,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1857:46) has aligned access   [ comm_hdf_mod.f90(1857,46) ]
   remark #15388: vectorization support: reference at (1857:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1861,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1861:40) has aligned access   [ comm_hdf_mod.f90(1861,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1861,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1863,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1863:14)>, stride is 3   [ comm_hdf_mod.f90(1863,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1863,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1863:14) has unaligned access   [ comm_hdf_mod.f90(1863,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1864,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1864:58) has aligned access   [ comm_hdf_mod.f90(1864,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1864,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1864,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1864,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1864:71) has aligned access   [ comm_hdf_mod.f90(1864,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1864,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1864,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1866,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1866:56) has aligned access   [ comm_hdf_mod.f90(1866,56) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1866,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1866,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1866:56) has aligned access   [ comm_hdf_mod.f90(1866,56) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1866,56) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1866,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1866:61) has aligned access   [ comm_hdf_mod.f90(1866,61) ]
   remark #15388: vectorization support: reference at (1866:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1854,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1847,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_2d_dp_] comm_hdf_mod.f90:1847

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     417
            Global    :     108
            Local     :     309
        Regenerable   :      96
        Spilled       :      30
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 0.9%]
            Writes    :      45 [4.13e+01 ~ 3.9%]
        Spills        :     200 bytes*
            Reads     :      52 [3.18e+01 ~ 3.0%]
            Writes    :      27 [2.31e+01 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_2D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_2D_SP) [110/137=80.3%] comm_hdf_mod.f90(1873,14)
  -> EXTERN: (1873,14) _alloca
  -> EXTERN: (1873,14) __getsp_inlined
  -> EXTERN: (1883,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1884,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1885,5) for_alloc_allocatable
  -> EXTERN: (1885,5) for_check_mult_overflow64
  -> INLINE: (1885,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1886,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1887,10) __resetsp_inlined
  -> EXTERN: (1887,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1887,10) _alloca
  -> EXTERN: (1887,10) __getsp_inlined
  -> EXTERN: (1889,5) __resetsp_inlined
  -> EXTERN: (1889,5) __getsp_inlined
  -> (1889,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1889,18) _alloca
  -> EXTERN: (1890,10) __resetsp_inlined
  -> EXTERN: (1890,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1890,10) _alloca
  -> EXTERN: (1890,10) _alloca
  -> EXTERN: (1890,10) __getsp_inlined
  -> EXTERN: (1892,10) __resetsp_inlined
  -> EXTERN: (1892,10) H5DWRITE_REAL_2
  -> EXTERN: (1892,10) _alloca
  -> EXTERN: (1892,10) __getsp_inlined
  -> EXTERN: (1894,10) H5SCLOSE_F
  -> EXTERN: (1895,10) H5SCLOSE_F
  -> EXTERN: (1896,5) for_dealloc_allocatable
  -> EXTERN: (1897,3) __resetsp_inlined
  -> EXTERN: (1897,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1883,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1883:46) has aligned access   [ comm_hdf_mod.f90(1883,46) ]
   remark #15388: vectorization support: reference at (1883:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1887,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1887:40) has aligned access   [ comm_hdf_mod.f90(1887,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1887,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1889,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1889:14)>, stride is 3   [ comm_hdf_mod.f90(1889,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1889,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1889:14) has unaligned access   [ comm_hdf_mod.f90(1889,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1890,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1890:58) has aligned access   [ comm_hdf_mod.f90(1890,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1890,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1890,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1890,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1890:71) has aligned access   [ comm_hdf_mod.f90(1890,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1890,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1890,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1892,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1892:54) has aligned access   [ comm_hdf_mod.f90(1892,54) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1892,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1892,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1892:54)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1892,54) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1892,54) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1892:54) has unaligned access   [ comm_hdf_mod.f90(1892,54) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1892,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.081
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.250 
      remark #15478: estimated potential speedup: 0.430 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1892,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1892,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1892:59) has aligned access   [ comm_hdf_mod.f90(1892,59) ]
   remark #15388: vectorization support: reference at (1892:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1880,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1873,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_2d_sp_] comm_hdf_mod.f90:1873

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     425
            Global    :     114
            Local     :     311
        Regenerable   :      96
        Spilled       :      32
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 1.0%]
            Writes    :      45 [4.13e+01 ~ 4.2%]
        Spills        :     216 bytes*
            Reads     :      55 [3.73e+01 ~ 3.8%]
            Writes    :      28 [2.34e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_2D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_2D_INT) [111/137=81.0%] comm_hdf_mod.f90(1899,14)
  -> EXTERN: (1899,14) _alloca
  -> EXTERN: (1899,14) __getsp_inlined
  -> EXTERN: (1909,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1910,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1911,5) for_alloc_allocatable
  -> EXTERN: (1911,5) for_check_mult_overflow64
  -> INLINE: (1911,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1912,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1913,10) __resetsp_inlined
  -> EXTERN: (1913,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1913,10) _alloca
  -> EXTERN: (1913,10) __getsp_inlined
  -> EXTERN: (1915,5) __resetsp_inlined
  -> EXTERN: (1915,5) __getsp_inlined
  -> (1915,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1915,18) _alloca
  -> EXTERN: (1916,10) __resetsp_inlined
  -> EXTERN: (1916,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1916,10) _alloca
  -> EXTERN: (1916,10) _alloca
  -> EXTERN: (1916,10) __getsp_inlined
  -> EXTERN: (1918,10) __resetsp_inlined
  -> EXTERN: (1918,10) H5DWRITE_INTEGER_2
  -> EXTERN: (1918,10) _alloca
  -> EXTERN: (1918,10) __getsp_inlined
  -> EXTERN: (1920,10) H5SCLOSE_F
  -> EXTERN: (1921,10) H5SCLOSE_F
  -> EXTERN: (1922,5) for_dealloc_allocatable
  -> EXTERN: (1923,3) __resetsp_inlined
  -> EXTERN: (1923,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1909,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1909:46) has aligned access   [ comm_hdf_mod.f90(1909,46) ]
   remark #15388: vectorization support: reference at (1909:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1913,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1913:40) has aligned access   [ comm_hdf_mod.f90(1913,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1913,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1915,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1915:14)>, stride is 3   [ comm_hdf_mod.f90(1915,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1915,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1915:14) has unaligned access   [ comm_hdf_mod.f90(1915,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1916,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1916:58) has aligned access   [ comm_hdf_mod.f90(1916,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1916,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1916,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1916,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1916:71) has aligned access   [ comm_hdf_mod.f90(1916,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1916,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1916,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1918,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1918:57) has aligned access   [ comm_hdf_mod.f90(1918,57) ]
      remark #15388: vectorization support: reference arr(:,:) has aligned access   [ comm_hdf_mod.f90(1918,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 4.760 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1918,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1918:57)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1918,57) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1918,57) ]
   remark #15305: vectorization support: vector length 4
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 18.500 
   remark #15478: estimated potential speedup: 0.210 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (1918:57) has unaligned access   [ comm_hdf_mod.f90(1918,57) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1918,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.079
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 0.420 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1918,10)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1918,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1918:62) has aligned access   [ comm_hdf_mod.f90(1918,62) ]
   remark #15388: vectorization support: reference at (1918:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1906,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1899,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_2d_int_] comm_hdf_mod.f90:1899

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     425
            Global    :     114
            Local     :     311
        Regenerable   :      96
        Spilled       :      32
        
    Routine stack
        Variables     :    1348 bytes*
            Reads     :      10 [9.80e+00 ~ 1.0%]
            Writes    :      45 [4.13e+01 ~ 4.2%]
        Spills        :     216 bytes*
            Reads     :      55 [3.73e+01 ~ 3.8%]
            Writes    :      28 [2.34e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_3D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_3D_DP) [112/137=81.8%] comm_hdf_mod.f90(1925,14)
  -> EXTERN: (1925,14) _alloca
  -> EXTERN: (1925,14) __getsp_inlined
  -> EXTERN: (1935,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1936,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1937,5) for_alloc_allocatable
  -> EXTERN: (1937,5) for_check_mult_overflow64
  -> INLINE: (1937,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1938,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1939,10) __resetsp_inlined
  -> EXTERN: (1939,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1939,10) _alloca
  -> EXTERN: (1939,10) __getsp_inlined
  -> EXTERN: (1941,5) __resetsp_inlined
  -> EXTERN: (1941,5) __getsp_inlined
  -> (1941,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1941,18) _alloca
  -> EXTERN: (1942,10) __resetsp_inlined
  -> EXTERN: (1942,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1942,10) _alloca
  -> EXTERN: (1942,10) _alloca
  -> EXTERN: (1942,10) __getsp_inlined
  -> EXTERN: (1944,10) __resetsp_inlined
  -> EXTERN: (1944,10) H5DWRITE_DOUBLE_3
  -> EXTERN: (1944,10) _alloca
  -> EXTERN: (1944,10) for_contig_array
  -> EXTERN: (1944,10) __getsp_inlined
  -> EXTERN: (1946,10) H5SCLOSE_F
  -> EXTERN: (1947,10) H5SCLOSE_F
  -> EXTERN: (1948,5) for_dealloc_allocatable
  -> EXTERN: (1949,3) __resetsp_inlined
  -> EXTERN: (1949,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1935,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1935:46) has aligned access   [ comm_hdf_mod.f90(1935,46) ]
   remark #15388: vectorization support: reference at (1935:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1935,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1939,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1939:40) has aligned access   [ comm_hdf_mod.f90(1939,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1939,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1941,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1941:14)>, stride is 3   [ comm_hdf_mod.f90(1941,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1941,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1941:14) has unaligned access   [ comm_hdf_mod.f90(1941,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1942,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1942:58) has aligned access   [ comm_hdf_mod.f90(1942,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1942,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1942,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1942,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1942:71) has aligned access   [ comm_hdf_mod.f90(1942,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1942,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1942,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1944,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1944,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1944:56) has aligned access   [ comm_hdf_mod.f90(1944,56) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1944,56) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1944,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1944:56) has aligned access   [ comm_hdf_mod.f90(1944,56) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1944,56) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 2.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.570 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1944,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1944,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1944:61) has aligned access   [ comm_hdf_mod.f90(1944,61) ]
   remark #15388: vectorization support: reference at (1944:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1944,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1932,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1925,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_3d_dp_] comm_hdf_mod.f90:1925

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     452
            Global    :     130
            Local     :     322
        Regenerable   :      96
        Spilled       :      44
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.4%]
            Writes    :      49 [4.53e+01 ~ 1.8%]
        Spills        :     304 bytes*
            Reads     :      80 [8.42e+01 ~ 3.4%]
            Writes    :      45 [4.06e+01 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_3D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_3D_SP) [113/137=82.5%] comm_hdf_mod.f90(1951,14)
  -> EXTERN: (1951,14) _alloca
  -> EXTERN: (1951,14) __getsp_inlined
  -> EXTERN: (1961,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1962,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1963,5) for_alloc_allocatable
  -> EXTERN: (1963,5) for_check_mult_overflow64
  -> INLINE: (1963,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1964,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1965,10) __resetsp_inlined
  -> EXTERN: (1965,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1965,10) _alloca
  -> EXTERN: (1965,10) __getsp_inlined
  -> EXTERN: (1967,5) __resetsp_inlined
  -> EXTERN: (1967,5) __getsp_inlined
  -> (1967,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1967,18) _alloca
  -> EXTERN: (1968,10) __resetsp_inlined
  -> EXTERN: (1968,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1968,10) _alloca
  -> EXTERN: (1968,10) _alloca
  -> EXTERN: (1968,10) __getsp_inlined
  -> EXTERN: (1970,10) __resetsp_inlined
  -> EXTERN: (1970,10) H5DWRITE_REAL_3
  -> EXTERN: (1970,10) _alloca
  -> EXTERN: (1970,10) for_contig_array
  -> EXTERN: (1970,10) __getsp_inlined
  -> EXTERN: (1972,10) H5SCLOSE_F
  -> EXTERN: (1973,10) H5SCLOSE_F
  -> EXTERN: (1974,5) for_dealloc_allocatable
  -> EXTERN: (1975,3) __resetsp_inlined
  -> EXTERN: (1975,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1961,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1961:46) has aligned access   [ comm_hdf_mod.f90(1961,46) ]
   remark #15388: vectorization support: reference at (1961:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1961,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1965,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1965:40) has aligned access   [ comm_hdf_mod.f90(1965,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1965,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1967,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1967:14)>, stride is 3   [ comm_hdf_mod.f90(1967,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1967,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1967:14) has unaligned access   [ comm_hdf_mod.f90(1967,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1968,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1968:58) has aligned access   [ comm_hdf_mod.f90(1968,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1968,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1968,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1968,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1968:71) has aligned access   [ comm_hdf_mod.f90(1968,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1968,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1968,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1970,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1970,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1970:54) has aligned access   [ comm_hdf_mod.f90(1970,54) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1970,54) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1970,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1970:54)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1970,54) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1970,54) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1970:54) has unaligned access   [ comm_hdf_mod.f90(1970,54) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1970,54) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.081
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.250 
         remark #15478: estimated potential speedup: 0.430 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1970,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1970,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1970:59) has aligned access   [ comm_hdf_mod.f90(1970,59) ]
   remark #15388: vectorization support: reference at (1970:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1970,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1958,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1951,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_3d_sp_] comm_hdf_mod.f90:1951

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     455
            Global    :     134
            Local     :     321
        Regenerable   :      96
        Spilled       :      49
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.5%]
            Writes    :      49 [4.53e+01 ~ 2.3%]
        Spills        :     352 bytes*
            Reads     :      86 [9.85e+01 ~ 5.0%]
            Writes    :      49 [4.16e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_3D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_3D_INT) [114/137=83.2%] comm_hdf_mod.f90(1977,14)
  -> EXTERN: (1977,14) _alloca
  -> EXTERN: (1977,14) __getsp_inlined
  -> EXTERN: (1987,10) H5SCREATE_SIMPLE_F
  -> INLINE: (1988,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (1989,5) for_alloc_allocatable
  -> EXTERN: (1989,5) for_check_mult_overflow64
  -> INLINE: (1989,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (1990,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (1991,10) __resetsp_inlined
  -> EXTERN: (1991,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (1991,10) _alloca
  -> EXTERN: (1991,10) __getsp_inlined
  -> EXTERN: (1993,5) __resetsp_inlined
  -> EXTERN: (1993,5) __getsp_inlined
  -> (1993,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (1993,18) _alloca
  -> EXTERN: (1994,10) __resetsp_inlined
  -> EXTERN: (1994,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (1994,10) _alloca
  -> EXTERN: (1994,10) _alloca
  -> EXTERN: (1994,10) __getsp_inlined
  -> EXTERN: (1996,10) __resetsp_inlined
  -> EXTERN: (1996,10) H5DWRITE_INTEGER_3
  -> EXTERN: (1996,10) _alloca
  -> EXTERN: (1996,10) for_contig_array
  -> EXTERN: (1996,10) __getsp_inlined
  -> EXTERN: (1998,10) H5SCLOSE_F
  -> EXTERN: (1999,10) H5SCLOSE_F
  -> EXTERN: (2000,5) for_dealloc_allocatable
  -> EXTERN: (2001,3) __resetsp_inlined
  -> EXTERN: (2001,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(1987,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1987:46) has aligned access   [ comm_hdf_mod.f90(1987,46) ]
   remark #15388: vectorization support: reference at (1987:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1987,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1991,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1991:40) has aligned access   [ comm_hdf_mod.f90(1991,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1991,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1993,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (1993:14)>, stride is 3   [ comm_hdf_mod.f90(1993,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(1993,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (1993:14) has unaligned access   [ comm_hdf_mod.f90(1993,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1994,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1994:58) has aligned access   [ comm_hdf_mod.f90(1994,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(1994,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1994,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1994,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1994:71) has aligned access   [ comm_hdf_mod.f90(1994,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(1994,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1994,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1996,10)
   remark #25101: Loop Interchange not done due to: Original Order seems proper
   remark #25452: Original Order found to be proper, but by a close margin
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_hdf_mod.f90(1996,10)
   <Multiversioned v1>
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (1996:57) has aligned access   [ comm_hdf_mod.f90(1996,57) ]
         remark #15388: vectorization support: reference arr(:,:,:) has aligned access   [ comm_hdf_mod.f90(1996,57) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 4.760 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_hdf_mod.f90(1996,10)
   <Multiversioned v2>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (1996:57)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1996,57) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1996,57) ]
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.500 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (1996:57) has unaligned access   [ comm_hdf_mod.f90(1996,57) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <arr(:,:,:)>, stride is unknown to compiler   [ comm_hdf_mod.f90(1996,57) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.079
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15452: unmasked strided loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 9.500 
         remark #15478: estimated potential speedup: 0.420 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_hdf_mod.f90(1996,10)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1996,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (1996:62) has aligned access   [ comm_hdf_mod.f90(1996,62) ]
   remark #15388: vectorization support: reference at (1996:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(1996,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(1984,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(1977,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_3d_int_] comm_hdf_mod.f90:1977

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     455
            Global    :     134
            Local     :     321
        Regenerable   :      96
        Spilled       :      49
        
    Routine stack
        Variables     :    1372 bytes*
            Reads     :      10 [9.80e+00 ~ 0.5%]
            Writes    :      49 [4.53e+01 ~ 2.3%]
        Spills        :     352 bytes*
            Reads     :      86 [9.85e+01 ~ 5.0%]
            Writes    :      49 [4.16e+01 ~ 2.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_4D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_4D_DP) [115/137=83.9%] comm_hdf_mod.f90(2003,14)
  -> EXTERN: (2003,14) _alloca
  -> EXTERN: (2003,14) __getsp_inlined
  -> EXTERN: (2013,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2014,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2015,5) for_alloc_allocatable
  -> EXTERN: (2015,5) for_check_mult_overflow64
  -> INLINE: (2015,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2016,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2017,10) __resetsp_inlined
  -> EXTERN: (2017,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2017,10) _alloca
  -> EXTERN: (2017,10) __getsp_inlined
  -> EXTERN: (2019,5) __resetsp_inlined
  -> EXTERN: (2019,5) __getsp_inlined
  -> (2019,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2019,18) _alloca
  -> EXTERN: (2020,10) __resetsp_inlined
  -> EXTERN: (2020,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2020,10) _alloca
  -> EXTERN: (2020,10) _alloca
  -> EXTERN: (2020,10) __getsp_inlined
  -> EXTERN: (2022,10) for_array_copy_out
  -> EXTERN: (2022,10) H5DWRITE_DOUBLE_4
  -> EXTERN: (2022,10) for_array_copy_in
  -> EXTERN: (2024,10) H5SCLOSE_F
  -> EXTERN: (2025,10) H5SCLOSE_F
  -> EXTERN: (2026,5) for_dealloc_allocatable
  -> EXTERN: (2027,3) __resetsp_inlined
  -> EXTERN: (2027,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2013,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2013:46) has aligned access   [ comm_hdf_mod.f90(2013,46) ]
   remark #15388: vectorization support: reference at (2013:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2017,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2017:40) has aligned access   [ comm_hdf_mod.f90(2017,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2017,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2019,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2019:14)>, stride is 3   [ comm_hdf_mod.f90(2019,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2019,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2019:14) has unaligned access   [ comm_hdf_mod.f90(2019,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2020,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2020:58) has aligned access   [ comm_hdf_mod.f90(2020,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2020,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2020,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2020,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2020:71) has aligned access   [ comm_hdf_mod.f90(2020,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2020,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2020,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2022,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2022:61) has aligned access   [ comm_hdf_mod.f90(2022,61) ]
   remark #15388: vectorization support: reference at (2022:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2010,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2003,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_4d_dp_] comm_hdf_mod.f90:2003

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     400
            Global    :      91
            Local     :     309
        Regenerable   :      96
        Spilled       :      25
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     160 bytes*
            Reads     :      39 [2.97e+01 ~ 3.9%]
            Writes    :      20 [2.00e+01 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_4D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_4D_SP) [116/137=84.7%] comm_hdf_mod.f90(2029,14)
  -> EXTERN: (2029,14) _alloca
  -> EXTERN: (2029,14) __getsp_inlined
  -> EXTERN: (2039,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2040,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2041,5) for_alloc_allocatable
  -> EXTERN: (2041,5) for_check_mult_overflow64
  -> INLINE: (2041,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2042,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2043,10) __resetsp_inlined
  -> EXTERN: (2043,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2043,10) _alloca
  -> EXTERN: (2043,10) __getsp_inlined
  -> EXTERN: (2045,5) __resetsp_inlined
  -> EXTERN: (2045,5) __getsp_inlined
  -> (2045,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2045,18) _alloca
  -> EXTERN: (2046,10) __resetsp_inlined
  -> EXTERN: (2046,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2046,10) _alloca
  -> EXTERN: (2046,10) _alloca
  -> EXTERN: (2046,10) __getsp_inlined
  -> EXTERN: (2048,10) for_array_copy_out
  -> EXTERN: (2048,10) H5DWRITE_REAL_4
  -> EXTERN: (2048,10) for_array_copy_in
  -> EXTERN: (2050,10) H5SCLOSE_F
  -> EXTERN: (2051,10) H5SCLOSE_F
  -> EXTERN: (2052,5) for_dealloc_allocatable
  -> EXTERN: (2053,3) __resetsp_inlined
  -> EXTERN: (2053,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2039,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2039:46) has aligned access   [ comm_hdf_mod.f90(2039,46) ]
   remark #15388: vectorization support: reference at (2039:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2043,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2043:40) has aligned access   [ comm_hdf_mod.f90(2043,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2043,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2045,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2045:14)>, stride is 3   [ comm_hdf_mod.f90(2045,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2045,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2045:14) has unaligned access   [ comm_hdf_mod.f90(2045,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2046,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2046:58) has aligned access   [ comm_hdf_mod.f90(2046,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2046,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2046,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2046,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2046:71) has aligned access   [ comm_hdf_mod.f90(2046,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2046,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2046,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2048,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2048:59) has aligned access   [ comm_hdf_mod.f90(2048,59) ]
   remark #15388: vectorization support: reference at (2048:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2036,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2029,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_4d_sp_] comm_hdf_mod.f90:2029

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     400
            Global    :      91
            Local     :     309
        Regenerable   :      96
        Spilled       :      25
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     160 bytes*
            Reads     :      39 [2.97e+01 ~ 3.9%]
            Writes    :      20 [2.00e+01 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_4D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_4D_INT) [117/137=85.4%] comm_hdf_mod.f90(2055,14)
  -> EXTERN: (2055,14) _alloca
  -> EXTERN: (2055,14) __getsp_inlined
  -> EXTERN: (2065,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2066,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2067,5) for_alloc_allocatable
  -> EXTERN: (2067,5) for_check_mult_overflow64
  -> INLINE: (2067,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2068,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2069,10) __resetsp_inlined
  -> EXTERN: (2069,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2069,10) _alloca
  -> EXTERN: (2069,10) __getsp_inlined
  -> EXTERN: (2071,5) __resetsp_inlined
  -> EXTERN: (2071,5) __getsp_inlined
  -> (2071,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2071,18) _alloca
  -> EXTERN: (2072,10) __resetsp_inlined
  -> EXTERN: (2072,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2072,10) _alloca
  -> EXTERN: (2072,10) _alloca
  -> EXTERN: (2072,10) __getsp_inlined
  -> EXTERN: (2074,10) for_array_copy_out
  -> EXTERN: (2074,10) H5DWRITE_INTEGER_4
  -> EXTERN: (2074,10) for_array_copy_in
  -> EXTERN: (2076,10) H5SCLOSE_F
  -> EXTERN: (2077,10) H5SCLOSE_F
  -> EXTERN: (2078,5) for_dealloc_allocatable
  -> EXTERN: (2079,3) __resetsp_inlined
  -> EXTERN: (2079,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2065,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2065:46) has aligned access   [ comm_hdf_mod.f90(2065,46) ]
   remark #15388: vectorization support: reference at (2065:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2069,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2069:40) has aligned access   [ comm_hdf_mod.f90(2069,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2069,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2071,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2071:14)>, stride is 3   [ comm_hdf_mod.f90(2071,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2071,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2071:14) has unaligned access   [ comm_hdf_mod.f90(2071,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2072,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2072:58) has aligned access   [ comm_hdf_mod.f90(2072,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2072,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2072,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2072,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2072:71) has aligned access   [ comm_hdf_mod.f90(2072,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2072,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2072,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2074,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2074:62) has aligned access   [ comm_hdf_mod.f90(2074,62) ]
   remark #15388: vectorization support: reference at (2074:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2062,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2055,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_4d_int_] comm_hdf_mod.f90:2055

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     400
            Global    :      91
            Local     :     309
        Regenerable   :      96
        Spilled       :      25
        
    Routine stack
        Variables     :    1396 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      51 [4.73e+01 ~ 6.2%]
        Spills        :     160 bytes*
            Reads     :      39 [2.97e+01 ~ 3.9%]
            Writes    :      20 [2.00e+01 ~ 2.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_5D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_5D_DP) [118/137=86.1%] comm_hdf_mod.f90(2081,14)
  -> EXTERN: (2081,14) _alloca
  -> EXTERN: (2081,14) __getsp_inlined
  -> EXTERN: (2091,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2092,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2093,5) for_alloc_allocatable
  -> EXTERN: (2093,5) for_check_mult_overflow64
  -> INLINE: (2093,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2094,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2095,10) __resetsp_inlined
  -> EXTERN: (2095,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2095,10) _alloca
  -> EXTERN: (2095,10) __getsp_inlined
  -> EXTERN: (2097,5) __resetsp_inlined
  -> EXTERN: (2097,5) __getsp_inlined
  -> (2097,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2097,18) _alloca
  -> EXTERN: (2098,10) __resetsp_inlined
  -> EXTERN: (2098,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2098,10) _alloca
  -> EXTERN: (2098,10) _alloca
  -> EXTERN: (2098,10) __getsp_inlined
  -> EXTERN: (2100,10) for_array_copy_out
  -> EXTERN: (2100,10) H5DWRITE_DOUBLE_5
  -> EXTERN: (2100,10) for_array_copy_in
  -> EXTERN: (2102,10) H5SCLOSE_F
  -> EXTERN: (2103,10) H5SCLOSE_F
  -> EXTERN: (2104,5) for_dealloc_allocatable
  -> EXTERN: (2105,3) __resetsp_inlined
  -> EXTERN: (2105,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2091,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2091:46) has aligned access   [ comm_hdf_mod.f90(2091,46) ]
   remark #15388: vectorization support: reference at (2091:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2091,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2095,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2095:40) has aligned access   [ comm_hdf_mod.f90(2095,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2095,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2097,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2097:14)>, stride is 3   [ comm_hdf_mod.f90(2097,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2097,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2097:14) has unaligned access   [ comm_hdf_mod.f90(2097,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2098,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2098:58) has aligned access   [ comm_hdf_mod.f90(2098,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2098,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2098,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2098,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2098:71) has aligned access   [ comm_hdf_mod.f90(2098,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2098,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2098,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2100,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2100:61) has aligned access   [ comm_hdf_mod.f90(2100,61) ]
   remark #15388: vectorization support: reference at (2100:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2100,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2088,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2081,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_5d_dp_] comm_hdf_mod.f90:2081

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      93
            Local     :     311
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.1%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_5D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_5D_SP) [119/137=86.9%] comm_hdf_mod.f90(2107,14)
  -> EXTERN: (2107,14) _alloca
  -> EXTERN: (2107,14) __getsp_inlined
  -> EXTERN: (2117,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2118,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2119,5) for_alloc_allocatable
  -> EXTERN: (2119,5) for_check_mult_overflow64
  -> INLINE: (2119,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2120,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2121,10) __resetsp_inlined
  -> EXTERN: (2121,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2121,10) _alloca
  -> EXTERN: (2121,10) __getsp_inlined
  -> EXTERN: (2123,5) __resetsp_inlined
  -> EXTERN: (2123,5) __getsp_inlined
  -> (2123,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2123,18) _alloca
  -> EXTERN: (2124,10) __resetsp_inlined
  -> EXTERN: (2124,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2124,10) _alloca
  -> EXTERN: (2124,10) _alloca
  -> EXTERN: (2124,10) __getsp_inlined
  -> EXTERN: (2126,10) for_array_copy_out
  -> EXTERN: (2126,10) H5DWRITE_REAL_5
  -> EXTERN: (2126,10) for_array_copy_in
  -> EXTERN: (2128,10) H5SCLOSE_F
  -> EXTERN: (2129,10) H5SCLOSE_F
  -> EXTERN: (2130,5) for_dealloc_allocatable
  -> EXTERN: (2131,3) __resetsp_inlined
  -> EXTERN: (2131,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2117,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2117:46) has aligned access   [ comm_hdf_mod.f90(2117,46) ]
   remark #15388: vectorization support: reference at (2117:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2117,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2121,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2121:40) has aligned access   [ comm_hdf_mod.f90(2121,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2121,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2123,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2123:14)>, stride is 3   [ comm_hdf_mod.f90(2123,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2123,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2123:14) has unaligned access   [ comm_hdf_mod.f90(2123,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2124,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2124:58) has aligned access   [ comm_hdf_mod.f90(2124,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2124,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2124,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2124,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2124:71) has aligned access   [ comm_hdf_mod.f90(2124,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2124,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2124,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2126,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2126:59) has aligned access   [ comm_hdf_mod.f90(2126,59) ]
   remark #15388: vectorization support: reference at (2126:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2126,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2114,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2107,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_5d_sp_] comm_hdf_mod.f90:2107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      93
            Local     :     311
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.1%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_5D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_5D_INT) [120/137=87.6%] comm_hdf_mod.f90(2133,14)
  -> EXTERN: (2133,14) _alloca
  -> EXTERN: (2133,14) __getsp_inlined
  -> EXTERN: (2143,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2144,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2145,5) for_alloc_allocatable
  -> EXTERN: (2145,5) for_check_mult_overflow64
  -> INLINE: (2145,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2146,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2147,10) __resetsp_inlined
  -> EXTERN: (2147,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2147,10) _alloca
  -> EXTERN: (2147,10) __getsp_inlined
  -> EXTERN: (2149,5) __resetsp_inlined
  -> EXTERN: (2149,5) __getsp_inlined
  -> (2149,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2149,18) _alloca
  -> EXTERN: (2150,10) __resetsp_inlined
  -> EXTERN: (2150,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2150,10) _alloca
  -> EXTERN: (2150,10) _alloca
  -> EXTERN: (2150,10) __getsp_inlined
  -> EXTERN: (2152,10) for_array_copy_out
  -> EXTERN: (2152,10) H5DWRITE_INTEGER_5
  -> EXTERN: (2152,10) for_array_copy_in
  -> EXTERN: (2154,10) H5SCLOSE_F
  -> EXTERN: (2155,10) H5SCLOSE_F
  -> EXTERN: (2156,5) for_dealloc_allocatable
  -> EXTERN: (2157,3) __resetsp_inlined
  -> EXTERN: (2157,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2143,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2143:46) has aligned access   [ comm_hdf_mod.f90(2143,46) ]
   remark #15388: vectorization support: reference at (2143:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2143,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2147,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2147:40) has aligned access   [ comm_hdf_mod.f90(2147,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2147,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2149,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2149:14)>, stride is 3   [ comm_hdf_mod.f90(2149,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2149,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2149:14) has unaligned access   [ comm_hdf_mod.f90(2149,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2150,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2150:58) has aligned access   [ comm_hdf_mod.f90(2150,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2150,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2150,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2150,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2150:71) has aligned access   [ comm_hdf_mod.f90(2150,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2150,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2150,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2152,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2152:62) has aligned access   [ comm_hdf_mod.f90(2152,62) ]
   remark #15388: vectorization support: reference at (2152:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.420 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2152,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2140,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2133,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_5d_int_] comm_hdf_mod.f90:2133

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     404
            Global    :      93
            Local     :     311
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1420 bytes*
            Reads     :      12 [1.18e+01 ~ 1.5%]
            Writes    :      55 [5.13e+01 ~ 6.6%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.1%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_6D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_6D_DP) [121/137=88.3%] comm_hdf_mod.f90(2159,14)
  -> EXTERN: (2159,14) _alloca
  -> EXTERN: (2159,14) __getsp_inlined
  -> EXTERN: (2169,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2170,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2171,5) for_alloc_allocatable
  -> EXTERN: (2171,5) for_check_mult_overflow64
  -> INLINE: (2171,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2172,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2173,10) __resetsp_inlined
  -> EXTERN: (2173,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2173,10) _alloca
  -> EXTERN: (2173,10) __getsp_inlined
  -> EXTERN: (2175,5) __resetsp_inlined
  -> EXTERN: (2175,5) __getsp_inlined
  -> (2175,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2175,18) _alloca
  -> EXTERN: (2176,10) __resetsp_inlined
  -> EXTERN: (2176,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2176,10) _alloca
  -> EXTERN: (2176,10) _alloca
  -> EXTERN: (2176,10) __getsp_inlined
  -> EXTERN: (2178,10) for_array_copy_out
  -> EXTERN: (2178,10) H5DWRITE_DOUBLE_6
  -> EXTERN: (2178,10) for_array_copy_in
  -> EXTERN: (2180,10) H5SCLOSE_F
  -> EXTERN: (2181,10) H5SCLOSE_F
  -> EXTERN: (2182,5) for_dealloc_allocatable
  -> EXTERN: (2183,3) __resetsp_inlined
  -> EXTERN: (2183,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2169,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2169:46) has aligned access   [ comm_hdf_mod.f90(2169,46) ]
   remark #15388: vectorization support: reference at (2169:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2173,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2173:40) has aligned access   [ comm_hdf_mod.f90(2173,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2173,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2175,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2175:14)>, stride is 3   [ comm_hdf_mod.f90(2175,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2175,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2175:14) has unaligned access   [ comm_hdf_mod.f90(2175,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2176,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2176:58) has aligned access   [ comm_hdf_mod.f90(2176,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2176,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2176,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2176,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2176:71) has aligned access   [ comm_hdf_mod.f90(2176,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2176,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2176,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2178,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2178:61) has aligned access   [ comm_hdf_mod.f90(2178,61) ]
   remark #15388: vectorization support: reference at (2178:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2166,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2159,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_6d_dp_] comm_hdf_mod.f90:2159

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     418
            Global    :      93
            Local     :     325
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.0%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_6D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_6D_SP) [122/137=89.1%] comm_hdf_mod.f90(2185,14)
  -> EXTERN: (2185,14) _alloca
  -> EXTERN: (2185,14) __getsp_inlined
  -> EXTERN: (2195,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2196,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2197,5) for_alloc_allocatable
  -> EXTERN: (2197,5) for_check_mult_overflow64
  -> INLINE: (2197,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2198,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2199,10) __resetsp_inlined
  -> EXTERN: (2199,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2199,10) _alloca
  -> EXTERN: (2199,10) __getsp_inlined
  -> EXTERN: (2201,5) __resetsp_inlined
  -> EXTERN: (2201,5) __getsp_inlined
  -> (2201,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2201,18) _alloca
  -> EXTERN: (2202,10) __resetsp_inlined
  -> EXTERN: (2202,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2202,10) _alloca
  -> EXTERN: (2202,10) _alloca
  -> EXTERN: (2202,10) __getsp_inlined
  -> EXTERN: (2204,10) for_array_copy_out
  -> EXTERN: (2204,10) H5DWRITE_REAL_6
  -> EXTERN: (2204,10) for_array_copy_in
  -> EXTERN: (2206,10) H5SCLOSE_F
  -> EXTERN: (2207,10) H5SCLOSE_F
  -> EXTERN: (2208,5) for_dealloc_allocatable
  -> EXTERN: (2209,3) __resetsp_inlined
  -> EXTERN: (2209,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2195,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2195:46) has aligned access   [ comm_hdf_mod.f90(2195,46) ]
   remark #15388: vectorization support: reference at (2195:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2199,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2199:40) has aligned access   [ comm_hdf_mod.f90(2199,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2199,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2201,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2201:14)>, stride is 3   [ comm_hdf_mod.f90(2201,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2201,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2201:14) has unaligned access   [ comm_hdf_mod.f90(2201,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2202,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2202:58) has aligned access   [ comm_hdf_mod.f90(2202,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2202,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2202,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2202,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2202:71) has aligned access   [ comm_hdf_mod.f90(2202,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2202,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2202,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2204,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2204:59) has aligned access   [ comm_hdf_mod.f90(2204,59) ]
   remark #15388: vectorization support: reference at (2204:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2192,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2185,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_6d_sp_] comm_hdf_mod.f90:2185

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     418
            Global    :      93
            Local     :     325
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.0%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_6D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_6D_INT) [123/137=89.8%] comm_hdf_mod.f90(2211,14)
  -> EXTERN: (2211,14) _alloca
  -> EXTERN: (2211,14) __getsp_inlined
  -> EXTERN: (2221,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2222,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2223,5) for_alloc_allocatable
  -> EXTERN: (2223,5) for_check_mult_overflow64
  -> INLINE: (2223,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2224,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2225,10) __resetsp_inlined
  -> EXTERN: (2225,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2225,10) _alloca
  -> EXTERN: (2225,10) __getsp_inlined
  -> EXTERN: (2227,5) __resetsp_inlined
  -> EXTERN: (2227,5) __getsp_inlined
  -> (2227,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2227,18) _alloca
  -> EXTERN: (2228,10) __resetsp_inlined
  -> EXTERN: (2228,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2228,10) _alloca
  -> EXTERN: (2228,10) _alloca
  -> EXTERN: (2228,10) __getsp_inlined
  -> EXTERN: (2230,10) for_array_copy_out
  -> EXTERN: (2230,10) H5DWRITE_INTEGER_6
  -> EXTERN: (2230,10) for_array_copy_in
  -> EXTERN: (2232,10) H5SCLOSE_F
  -> EXTERN: (2233,10) H5SCLOSE_F
  -> EXTERN: (2234,5) for_dealloc_allocatable
  -> EXTERN: (2235,3) __resetsp_inlined
  -> EXTERN: (2235,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2221,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2221:46) has aligned access   [ comm_hdf_mod.f90(2221,46) ]
   remark #15388: vectorization support: reference at (2221:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2225,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2225:40) has aligned access   [ comm_hdf_mod.f90(2225,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2225,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2227,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2227:14)>, stride is 3   [ comm_hdf_mod.f90(2227,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2227,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2227:14) has unaligned access   [ comm_hdf_mod.f90(2227,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2228,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2228:58) has aligned access   [ comm_hdf_mod.f90(2228,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2228,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2228,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2228,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2228:71) has aligned access   [ comm_hdf_mod.f90(2228,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2228,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2228,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2230,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2230:62) has aligned access   [ comm_hdf_mod.f90(2230,62) ]
   remark #15388: vectorization support: reference at (2230:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2218,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2211,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_6d_int_] comm_hdf_mod.f90:2211

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     418
            Global    :      93
            Local     :     325
        Regenerable   :      96
        Spilled       :      27
        
    Routine stack
        Variables     :    1444 bytes*
            Reads     :      14 [1.38e+01 ~ 1.7%]
            Writes    :      57 [5.33e+01 ~ 6.7%]
        Spills        :     176 bytes*
            Reads     :      41 [3.17e+01 ~ 4.0%]
            Writes    :      22 [2.20e+01 ~ 2.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_7D_DP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_7D_DP) [124/137=90.5%] comm_hdf_mod.f90(2237,14)
  -> EXTERN: (2237,14) _alloca
  -> EXTERN: (2237,14) __getsp_inlined
  -> EXTERN: (2247,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2248,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2249,5) for_alloc_allocatable
  -> EXTERN: (2249,5) for_check_mult_overflow64
  -> INLINE: (2249,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2250,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2251,10) __resetsp_inlined
  -> EXTERN: (2251,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2251,10) _alloca
  -> EXTERN: (2251,10) __getsp_inlined
  -> EXTERN: (2253,5) __resetsp_inlined
  -> EXTERN: (2253,5) __getsp_inlined
  -> (2253,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2253,18) _alloca
  -> EXTERN: (2254,10) __resetsp_inlined
  -> EXTERN: (2254,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2254,10) _alloca
  -> EXTERN: (2254,10) _alloca
  -> EXTERN: (2254,10) __getsp_inlined
  -> EXTERN: (2256,10) for_array_copy_out
  -> EXTERN: (2256,10) H5DWRITE_DOUBLE_7
  -> EXTERN: (2256,10) for_array_copy_in
  -> EXTERN: (2258,10) H5SCLOSE_F
  -> EXTERN: (2259,10) H5SCLOSE_F
  -> EXTERN: (2260,5) for_dealloc_allocatable
  -> EXTERN: (2261,3) __resetsp_inlined
  -> EXTERN: (2261,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2247,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2247:46) has aligned access   [ comm_hdf_mod.f90(2247,46) ]
   remark #15388: vectorization support: reference at (2247:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2247,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2251,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2251:40) has aligned access   [ comm_hdf_mod.f90(2251,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2251,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2253,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2253:14)>, stride is 3   [ comm_hdf_mod.f90(2253,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2253,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2253:14) has unaligned access   [ comm_hdf_mod.f90(2253,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2254,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2254:58) has aligned access   [ comm_hdf_mod.f90(2254,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2254,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2254,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2254,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2254:71) has aligned access   [ comm_hdf_mod.f90(2254,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2254,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2254,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2256,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2256:61) has aligned access   [ comm_hdf_mod.f90(2256,61) ]
   remark #15388: vectorization support: reference at (2256:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2256,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2244,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2237,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_7d_dp_] comm_hdf_mod.f90:2237

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     432
            Global    :      99
            Local     :     333
        Regenerable   :      99
        Spilled       :      31
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     208 bytes*
            Reads     :      52 [4.61e+01 ~ 3.6%]
            Writes    :      26 [2.60e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_7D_SP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_7D_SP) [125/137=91.2%] comm_hdf_mod.f90(2263,14)
  -> EXTERN: (2263,14) _alloca
  -> EXTERN: (2263,14) __getsp_inlined
  -> EXTERN: (2273,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2274,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2275,5) for_alloc_allocatable
  -> EXTERN: (2275,5) for_check_mult_overflow64
  -> INLINE: (2275,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2276,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2277,10) __resetsp_inlined
  -> EXTERN: (2277,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2277,10) _alloca
  -> EXTERN: (2277,10) __getsp_inlined
  -> EXTERN: (2279,5) __resetsp_inlined
  -> EXTERN: (2279,5) __getsp_inlined
  -> (2279,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2279,18) _alloca
  -> EXTERN: (2280,10) __resetsp_inlined
  -> EXTERN: (2280,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2280,10) _alloca
  -> EXTERN: (2280,10) _alloca
  -> EXTERN: (2280,10) __getsp_inlined
  -> EXTERN: (2282,10) for_array_copy_out
  -> EXTERN: (2282,10) H5DWRITE_REAL_7
  -> EXTERN: (2282,10) for_array_copy_in
  -> EXTERN: (2284,10) H5SCLOSE_F
  -> EXTERN: (2285,10) H5SCLOSE_F
  -> EXTERN: (2286,5) for_dealloc_allocatable
  -> EXTERN: (2287,3) __resetsp_inlined
  -> EXTERN: (2287,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2273,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2273:46) has aligned access   [ comm_hdf_mod.f90(2273,46) ]
   remark #15388: vectorization support: reference at (2273:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2273,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2277,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2277:40) has aligned access   [ comm_hdf_mod.f90(2277,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2277,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2279,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2279:14)>, stride is 3   [ comm_hdf_mod.f90(2279,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2279,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2279:14) has unaligned access   [ comm_hdf_mod.f90(2279,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2280,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2280:58) has aligned access   [ comm_hdf_mod.f90(2280,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2280,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2280,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2280,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2280:71) has aligned access   [ comm_hdf_mod.f90(2280,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2280,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2280,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2282,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2282:59) has aligned access   [ comm_hdf_mod.f90(2282,59) ]
   remark #15388: vectorization support: reference at (2282:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2282,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2270,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2263,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_7d_sp_] comm_hdf_mod.f90:2263

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     432
            Global    :      99
            Local     :     333
        Regenerable   :      99
        Spilled       :      31
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     208 bytes*
            Reads     :      52 [4.61e+01 ~ 3.6%]
            Writes    :      26 [2.60e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::WRITE_HDF_SLICE_7D_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::WRITE_HDF_SLICE_7D_INT) [126/137=92.0%] comm_hdf_mod.f90(2289,14)
  -> EXTERN: (2289,14) _alloca
  -> EXTERN: (2289,14) __getsp_inlined
  -> EXTERN: (2299,10) H5SCREATE_SIMPLE_F
  -> INLINE: (2300,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
    -> EXTERN: (216,9) for_trim
    -> EXTERN: (216,28) __getsp_inlined
    -> EXTERN: (216,28) for_cpstr
    -> EXTERN: (216,28) __resetsp_inlined
    -> EXTERN: (216,31) for_trim
    -> EXTERN: (216,36) _alloca
    -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
      -> EXTERN: (226,10) H5DCLOSE_F
      -> EXTERN: (227,10) ASSERT
      -> EXTERN: (229,5) for_cpystr
    -> EXTERN: (218,5) for_cpystr
    -> EXTERN: (219,10) H5DOPEN_F
  -> EXTERN: (2301,5) for_alloc_allocatable
  -> EXTERN: (2301,5) for_check_mult_overflow64
  -> INLINE: (2301,18) COMM_HDF_MOD::GET_RANK_HDF (isz = 139) (sz = 149)
    -> INLINE: (241,10) COMM_HDF_MOD::OPEN_HDF_SET (isz = 107) (sz = 116)
      -> EXTERN: (216,9) for_trim
      -> EXTERN: (216,28) __getsp_inlined
      -> EXTERN: (216,28) for_cpstr
      -> EXTERN: (216,28) __resetsp_inlined
      -> EXTERN: (216,31) for_trim
      -> EXTERN: (216,36) _alloca
      -> INLINE: (217,10) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
        -> EXTERN: (226,10) H5DCLOSE_F
        -> EXTERN: (227,10) ASSERT
        -> EXTERN: (229,5) for_cpystr
      -> EXTERN: (218,5) for_cpystr
      -> EXTERN: (219,10) H5DOPEN_F
    -> EXTERN: (242,10) H5DGET_SPACE_F
    -> EXTERN: (243,10) H5SGET_SIMPLE_EXTENT_NDIMS_F
    -> EXTERN: (244,10) H5SCLOSE_F
  -> (2302,10) COMM_HDF_MOD::GET_SIZE_HDF (isz = 528) (sz = 539)
     [[ Inlining would exceed -inline-max-size value (539>230) <1>]]
  -> EXTERN: (2303,10) __resetsp_inlined
  -> EXTERN: (2303,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2303,10) _alloca
  -> EXTERN: (2303,10) __getsp_inlined
  -> EXTERN: (2305,5) __resetsp_inlined
  -> EXTERN: (2305,5) __getsp_inlined
  -> (2305,18) COMM_HDF_MOD::PARSE_HDF_SLICE (isz = 335) (sz = 344)
     [[ Inlining would exceed -inline-max-size value (344>230) <1>]]
  -> EXTERN: (2305,18) _alloca
  -> EXTERN: (2306,10) __resetsp_inlined
  -> EXTERN: (2306,10) H5SSELECT_HYPERSLAB_F
  -> EXTERN: (2306,10) _alloca
  -> EXTERN: (2306,10) _alloca
  -> EXTERN: (2306,10) __getsp_inlined
  -> EXTERN: (2308,10) for_array_copy_out
  -> EXTERN: (2308,10) H5DWRITE_INTEGER_7
  -> EXTERN: (2308,10) for_array_copy_in
  -> EXTERN: (2310,10) H5SCLOSE_F
  -> EXTERN: (2311,10) H5SCLOSE_F
  -> EXTERN: (2312,5) for_dealloc_allocatable
  -> EXTERN: (2313,3) __resetsp_inlined
  -> EXTERN: (2313,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2299,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2299:46) has aligned access   [ comm_hdf_mod.f90(2299,46) ]
   remark #15388: vectorization support: reference at (2299:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2299,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2303,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2303:40) has aligned access   [ comm_hdf_mod.f90(2303,40) ]
   remark #15388: vectorization support: reference EXT(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2303,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2305,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <hslice(:,:)>, stride is 3
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (2305:14)>, stride is 3   [ comm_hdf_mod.f90(2305,14) ]
   remark #15305: vectorization support: vector length 2
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 0.720 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---

   LOOP BEGIN at comm_hdf_mod.f90(2305,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference hslice(:,:) has unaligned access
      remark #15389: vectorization support: reference at (2305:14) has unaligned access   [ comm_hdf_mod.f90(2305,14) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.600
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 0.600 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2306,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2306:58) has aligned access   [ comm_hdf_mod.f90(2306,58) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(1,:)>, stride is 3   [ comm_hdf_mod.f90(2306,58) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2306,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2306,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2306:71) has aligned access   [ comm_hdf_mod.f90(2306,71) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <hslice(2,:)>, stride is 3   [ comm_hdf_mod.f90(2306,71) ]
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2306,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2308,10)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2308:62) has aligned access   [ comm_hdf_mod.f90(2308,62) ]
   remark #15388: vectorization support: reference at (2308:10) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 3
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.470 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2308,10)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2296,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_hdf_mod.f90(2289,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_write_hdf_slice_7d_int_] comm_hdf_mod.f90:2289

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     432
            Global    :      99
            Local     :     333
        Regenerable   :      99
        Spilled       :      31
        
    Routine stack
        Variables     :    1468 bytes*
            Reads     :      14 [4.98e+01 ~ 3.9%]
            Writes    :      61 [1.05e+02 ~ 8.2%]
        Spills        :     208 bytes*
            Reads     :      52 [4.61e+01 ~ 3.6%]
            Writes    :      26 [2.60e+01 ~ 2.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::CREATE_HDF_SET

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::CREATE_HDF_SET) [127/137=92.7%] comm_hdf_mod.f90(2319,14)
  -> EXTERN: (2327,9) for_trim
  -> EXTERN: (2327,28) __resetsp_inlined
  -> EXTERN: (2327,28) for_cpstr
  -> EXTERN: (2327,28) __getsp_inlined
  -> EXTERN: (2327,31) for_trim
  -> EXTERN: (2327,36) _alloca
  -> INLINE: (2327,46) COMM_HDF_MOD::CLOSE_HDF_SET (isz = 38) (sz = 43)
    -> EXTERN: (226,10) H5DCLOSE_F
    -> EXTERN: (227,10) ASSERT
    -> EXTERN: (229,5) for_cpystr
  -> EXTERN: (2328,5) for_cpystr
  -> EXTERN: (2329,10) __resetsp_inlined
  -> EXTERN: (2329,10) H5SCREATE_SIMPLE_F
  -> EXTERN: (2329,10) _alloca
  -> EXTERN: (2329,10) __getsp_inlined
  -> EXTERN: (2330,10) ASSERT
  -> EXTERN: (2331,10) H5DCREATE_F
  -> EXTERN: (2332,10) ASSERT
  -> EXTERN: (2333,10) H5SCLOSE_F
  -> EXTERN: (2334,10) ASSERT


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2329,10)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15389: vectorization support: reference ext(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.250
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2329:40) has aligned access   [ comm_hdf_mod.f90(2329,40) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ext(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.140 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2329,10)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2319,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_create_hdf_set_] comm_hdf_mod.f90:2319

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     174
            Global    :      42
            Local     :     132
        Regenerable   :      46
        Spilled       :      10
        
    Routine stack
        Variables     :     536 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       9 [4.13e+00 ~ 1.2%]
        Spills        :      40 bytes*
            Reads     :       6 [6.00e+00 ~ 1.7%]
            Writes    :       5 [5.00e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::CREATE_HDF_GROUP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::CREATE_HDF_GROUP) [128/137=93.4%] comm_hdf_mod.f90(2339,14)
  -> EXTERN: (2344,10) H5GCREATE_F
  -> EXTERN: (2345,10) H5GCLOSE_F


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2339,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_create_hdf_group_] comm_hdf_mod.f90:2339

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r14]
        
    Routine temporaries
        Total         :      24
            Global    :       8
            Local     :      16
        Regenerable   :       6
        Spilled       :       1
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_0D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_0D) [129/137=94.2%] comm_hdf_mod.f90(2352,12)


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2352,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_0d_] comm_hdf_mod.f90:2352

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    2[ rax rdi]
        
    Routine temporaries
        Total         :       9
            Global    :       0
            Local     :       9
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_2D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_2D) [130/137=94.9%] comm_hdf_mod.f90(2370,12)
  -> INLINE: (2374,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2375,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2374,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2374,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2374,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2374,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s0(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2374,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s0(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2374,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2374:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2375,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2375,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2375,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2375,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s1(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2375,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s1(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2375,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2375:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2370,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_2d_] comm_hdf_mod.f90:2370

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      54
            Global    :      24
            Local     :      30
        Regenerable   :       6
        Spilled       :       0
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       6 [1.20e+00 ~ 2.2%]
            Writes    :      30 [3.60e+00 ~ 6.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_3D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_3D) [131/137=95.6%] comm_hdf_mod.f90(2378,12)
  -> INLINE: (2382,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2383,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2384,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2382,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2382,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2382,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2382,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s0(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2382,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s0(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2382,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2382:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2383,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2383,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2383,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2383,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s1(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2383,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s1(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2383,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2383:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2384,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2384,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2384,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2384,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s2(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2384,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s2(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2384,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,3) has unaligned access
   remark #15388: vectorization support: reference at (2384:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2378,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_3d_] comm_hdf_mod.f90:2378

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      75
            Global    :      31
            Local     :      44
        Regenerable   :       8
        Spilled       :       0
        
    Routine stack
        Variables     :      36 bytes*
            Reads     :       9 [1.80e+00 ~ 2.4%]
            Writes    :      45 [5.40e+00 ~ 7.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_4D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_4D) [132/137=96.4%] comm_hdf_mod.f90(2387,12)
  -> INLINE: (2391,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2392,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2393,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2394,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2391,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2391,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2391,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2391,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s0(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2391,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s0(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2391,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2391:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2392,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2392,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2392,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2392,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s1(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2392,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s1(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2392,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2392:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2393,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2393,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2393,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2393,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s2(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2393,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s2(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2393,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,3) has unaligned access
   remark #15388: vectorization support: reference at (2393:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2394,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2394,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2394,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2394,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s3(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2394,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s3(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2394,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,4) has unaligned access
   remark #15388: vectorization support: reference at (2394:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2387,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_4d_] comm_hdf_mod.f90:2387

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 r13]
        
    Routine temporaries
        Total         :      96
            Global    :      38
            Local     :      58
        Regenerable   :      10
        Spilled       :       2
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :      12 [2.40e+00 ~ 2.4%]
            Writes    :      60 [7.20e+00 ~ 7.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_5D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_5D) [133/137=97.1%] comm_hdf_mod.f90(2397,12)
  -> INLINE: (2401,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2402,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2403,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2404,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2405,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2401,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2401,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2401,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2401,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s0(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2401,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s0(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2401,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2401:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2402,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2402,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2402,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2402,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s1(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2402,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s1(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2402,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2402:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2403,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2403,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2403,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2403,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s2(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2403,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s2(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2403,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,3) has unaligned access
   remark #15388: vectorization support: reference at (2403:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2404,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2404,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2404,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2404,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s3(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2404,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s3(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2404,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,4) has unaligned access
   remark #15388: vectorization support: reference at (2404:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2405,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2405,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2405,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2405,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s4(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2405,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s4(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2405,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,5) has unaligned access
   remark #15388: vectorization support: reference at (2405:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2397,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_5d_] comm_hdf_mod.f90:2397

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13 r15]
        
    Routine temporaries
        Total         :     117
            Global    :      45
            Local     :      72
        Regenerable   :      12
        Spilled       :       4
        
    Routine stack
        Variables     :      60 bytes*
            Reads     :      15 [3.00e+00 ~ 2.5%]
            Writes    :      75 [9.00e+00 ~ 7.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_6D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_6D) [134/137=97.8%] comm_hdf_mod.f90(2408,12)
  -> (2412,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> INLINE: (2413,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2414,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2415,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2416,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2417,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2412,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2412:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2413,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2413,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2413,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2413,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s1(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2413,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s1(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2413,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2413:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2414,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2414,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2414,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2414,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s2(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2414,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s2(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2414,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,3) has unaligned access
   remark #15388: vectorization support: reference at (2414:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2415,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2415,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2415,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2415,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s3(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2415,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s3(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2415,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,4) has unaligned access
   remark #15388: vectorization support: reference at (2415:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2416,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2416,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2416,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2416,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s4(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2416,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s4(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2416,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,5) has unaligned access
   remark #15388: vectorization support: reference at (2416:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2417,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2417,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2417,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2417,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s5(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2417,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s5(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2417,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,6) has unaligned access
   remark #15388: vectorization support: reference at (2417:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2408,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_6d_] comm_hdf_mod.f90:2408

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     126
            Global    :      45
            Local     :      81
        Regenerable   :      17
        Spilled       :       5
        
    Routine stack
        Variables     :     168 bytes*
            Reads     :      18 [6.00e+00 ~ 3.9%]
            Writes    :      86 [2.00e+01 ~ 13.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_7D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_7D) [135/137=98.5%] comm_hdf_mod.f90(2420,12)
  -> (2424,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> (2425,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> INLINE: (2426,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2427,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2428,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2429,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)
  -> INLINE: (2430,18) COMM_HDF_MOD::SLICE_1D (isz = 162) (sz = 169)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2424,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2424:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2425,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,2) has unaligned access
   remark #15388: vectorization support: reference at (2425:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2426,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2426,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2426,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2426,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s2(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2426,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s2(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2426,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,3) has unaligned access
   remark #15388: vectorization support: reference at (2426:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2427,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2427,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2427,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2427,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s3(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2427,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s3(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2427,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,4) has unaligned access
   remark #15388: vectorization support: reference at (2427:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2428,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2428,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2428,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2428,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s4(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2428,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s4(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2428,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,5) has unaligned access
   remark #15388: vectorization support: reference at (2428:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2429,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2429,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2429,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2429,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s5(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2429,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s5(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2429,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,6) has unaligned access
   remark #15388: vectorization support: reference at (2429:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2363,18) inlined into comm_hdf_mod.f90(2430,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18) inlined into comm_hdf_mod.f90(2430,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18) inlined into comm_hdf_mod.f90(2430,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.710 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2430,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15389: vectorization support: reference s6(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18) inlined into comm_hdf_mod.f90(2430,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference at (2366:18) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s6(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.330 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2430,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,7) has unaligned access
   remark #15388: vectorization support: reference at (2430:5) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2420,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_7d_] comm_hdf_mod.f90:2420

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     135
            Global    :      47
            Local     :      88
        Regenerable   :      21
        Spilled       :       5
        
    Routine stack
        Variables     :     276 bytes*
            Reads     :      21 [9.00e+00 ~ 5.0%]
            Writes    :      97 [3.10e+01 ~ 17.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::SLICE_1D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::SLICE_1D) [136/137=99.3%] comm_hdf_mod.f90(2358,12)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_hdf_mod.f90(2363,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2363:18) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2364,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2364:18) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2365,18)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15388: vectorization support: reference at (2365:18) has aligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.920 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15389: vectorization support: reference s0(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.660 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at comm_hdf_mod.f90(2366,18)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference res(:,1) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <s0(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.800 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(2358,12):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_slice_1d_] comm_hdf_mod.f90:2358

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rsi rdi r8-r9]
        
    Routine temporaries
        Total         :      41
            Global    :      12
            Local     :      29
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_HDF_MOD::INITIALIZE_COMM_HDF_MOD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_HDF_MOD::INITIALIZE_COMM_HDF_MOD) [137/137=100.0%] comm_hdf_mod.f90(157,14)
  -> EXTERN: (162,10) H5OPEN_F
  -> EXTERN: (163,10) ASSERT


    Report from: Code generation optimizations [cg]

comm_hdf_mod.f90(157,14):remark #34051: REGISTER ALLOCATION : [comm_hdf_mod_mp_initialize_comm_hdf_mod_] comm_hdf_mod.f90:157

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       6
            Local     :       7
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       1 [2.97e-01 ~ 2.0%]
            Writes    :       2 [2.97e-01 ~ 2.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

<2> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

