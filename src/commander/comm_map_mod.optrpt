Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_map_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_map_mod._) [1/31=3.2%] comm_map_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_map_mod._] comm_map_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::CONSTRUCTOR_MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::CONSTRUCTOR_MAP) [2/31=6.5%] comm_map_mod.f90(249,12)
  -> EXTERN: (249,44) for_deallocate
  -> EXTERN: (257,5) for_allocate
  -> EXTERN: (259,5) for_alloc_allocatable
  -> EXTERN: (259,5) for_check_mult_overflow64
  -> EXTERN: (260,5) for_alloc_allocatable
  -> EXTERN: (260,5) for_check_mult_overflow64
  -> EXTERN: (264,11) for_alloc_allocatable
  -> EXTERN: (264,11) for_check_mult_overflow64
  -> INDIRECT-: (265,16)  (*((P64*) *((P64*) (comm_map_mod_mp_constructor_map_$CONSTRUCTOR_MAP_V$2049.0.3 + 56(SI64)))))[10(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (267,16)  (*((P64*) *((P64*) (comm_map_mod_mp_constructor_map_$CONSTRUCTOR_MAP_V$2049.0.3 + 56(SI64)))))[10(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(270,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(270,8)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (270:8) and at (270:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (270:8) and at (270:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_map_mod.f90(270,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (270:8) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(270,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(272,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(272,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between constructor_map(:,:) (272:5) and constructor_map(:,:) (272:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between constructor_map(:,:) (272:5) and constructor_map(:,:) (272:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_map_mod.f90(272,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference constructor_map(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(272,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(257,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(257,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(272,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(272,5):remark #34026: call to memset implemented as a call to optimized library version
comm_map_mod.f90(270,8):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(270,8):remark #34026: call to memset implemented as a call to optimized library version
comm_map_mod.f90(249,12):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_constructor_map_] comm_map_mod.f90:249

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     325
            Global    :      56
            Local     :     269
        Regenerable   :      30
        Spilled       :      16
        
    Routine stack
        Variables     :     120 bytes*
            Reads     :       3 [2.01e+00 ~ 0.2%]
            Writes    :      11 [1.49e-01 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      20 [2.15e+01 ~ 2.0%]
            Writes    :      12 [1.90e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::CONSTRUCTOR_CLONE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::CONSTRUCTOR_CLONE) [3/31=9.7%] comm_map_mod.f90(276,12)
  -> EXTERN: (281,5) for_allocate
  -> EXTERN: (283,5) for_alloc_allocatable
  -> EXTERN: (283,5) for_check_mult_overflow64
  -> EXTERN: (284,5) for_alloc_allocatable
  -> EXTERN: (284,5) for_check_mult_overflow64
  -> EXTERN: (285,5) for_realloc_lhs
  -> EXTERN: (285,5) for_dealloc_allocatable
  -> EXTERN: (286,5) for_realloc_lhs
  -> EXTERN: (286,5) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(285,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (285:5) and constructor_clone(:,:) (285:5)
   remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (285:5) and map(:,:) (285:5)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between map(:,:) (285:5) and constructor_clone(:,:) (285:5)
   remark #15346: vector dependence: assumed FLOW dependence between constructor_clone(:,:) (285:5) and map(:,:) (285:5)

   LOOP BEGIN at comm_map_mod.f90(285,5)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (285:5) and constructor_clone(:,:) (285:5)
      remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (285:5) and map(:,:) (285:5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at comm_map_mod.f90(285,5)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (285:5) and map(:,:) (285:5)
         remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (285:5) and constructor_clone(:,:) (285:5)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(285,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(286,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (286:5) and constructor_clone(:,:) (286:5)
   remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (286:5) and map(:,:) (286:5)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between map(:,:) (286:5) and constructor_clone(:,:) (286:5)
   remark #15346: vector dependence: assumed FLOW dependence between constructor_clone(:,:) (286:5) and map(:,:) (286:5)

   LOOP BEGIN at comm_map_mod.f90(286,5)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (286:5) and constructor_clone(:,:) (286:5)
      remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (286:5) and map(:,:) (286:5)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at comm_map_mod.f90(286,5)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between constructor_clone(:,:) (286:5) and map(:,:) (286:5)
         remark #17106: parallel dependence: assumed ANTI dependence between map(:,:) (286:5) and constructor_clone(:,:) (286:5)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(286,5)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(281,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(281,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(282,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(282,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(282,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(285,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(285,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(285,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(286,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(286,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(286,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(276,12):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_constructor_clone_] comm_map_mod.f90:276

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     414
            Global    :      71
            Local     :     343
        Regenerable   :      17
        Spilled       :      28
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 0.3%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     184 bytes*
            Reads     :      63 [4.05e+01 ~ 5.2%]
            Writes    :      36 [7.36e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::DEALLOCATE_COMM_MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::DEALLOCATE_COMM_MAP) [4/31=12.9%] comm_map_mod.f90(290,14)
  -> EXTERN: (300,30) for_dealloc_allocatable
  -> EXTERN: (301,30) for_dealloc_allocatable
  -> INDIRECT-: (302,50)  (*((P64*) *((P64*) (&(comm_map_mod_mp_deallocate_comm_map_$SELF_V$229e.0.5->QNCAtemplate.dim31_dv_template.addr_a0_V$22c5.0.5)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (309,36) for_dealloc_allocatable
  -> EXTERN: (310,36) for_dealloc_allocatable
  -> INDIRECT-: (311,56)  (*((P64*) *((P64*) (&comm_map_mod_mp_deallocate_comm_map_$LINK$31_V$22a3.0.5->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(307,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(307,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(307,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(313,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(313,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(290,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_deallocate_comm_map_] comm_map_mod.f90:290

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     189
            Global    :      20
            Local     :     169
        Regenerable   :       9
        Spilled       :       5
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       3 [8.57e+00 ~ 3.7%]
            Writes    :      26 [5.57e+01 ~ 23.9%]
        Spills        :      16 bytes*
            Reads     :       2 [1.71e+00 ~ 0.7%]
            Writes    :       2 [1.71e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::COMM_MAPINFO_FINALIZE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::COMM_MAPINFO_FINALIZE) [5/31=16.1%] comm_map_mod.f90(320,14)
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (326,8) for_dealloc_allocatable
  -> EXTERN: (327,13) SHARP_DESTROY_ALM_INFO
  -> EXTERN: (328,13) SHARP_DESTROY_GEOM_INFO
  -> EXTERN: (329,29) SHARP_DESTROY_GEOM_INFO


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(320,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_comm_mapinfo_finalize_] comm_map_mod.f90:320

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rbx rsi rdi r8-r9 r12-r13]
        
    Routine temporaries
        Total         :     217
            Global    :      18
            Local     :     199
        Regenerable   :       2
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_Y

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_Y) [6/31=19.4%] comm_map_mod.f90(338,14)
  -> EXTERN: (343,36) for_check_mult_overflow64
  -> EXTERN: (343,36) for_alloc_allocatable
  -> EXTERN: (345,13) _alloca
  -> EXTERN: (345,13) SHARP_EXECUTE_D
  -> EXTERN: (345,13) __resetsp_inlined
  -> EXTERN: (345,13) __getsp_inlined
  -> EXTERN: (345,42) _alloca
  -> EXTERN: (348,16) SHARP_EXECUTE_D
  -> EXTERN: (348,16) _alloca
  -> EXTERN: (348,16) __getsp_inlined
  -> EXTERN: (348,16) __resetsp_inlined
  -> EXTERN: (348,45) _alloca
  -> EXTERN: (352,13) SHARP_EXECUTE_D


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(345,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (345:13) and at (345:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (345:13) and at (345:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(345,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (345:42) has aligned access   [ comm_map_mod.f90(345,42) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(345,42) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(345,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(345,42)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (345:42) and at (345:42)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (345:42) and at (345:42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(345,42)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (346:15) has aligned access   [ comm_map_mod.f90(346,15) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(346,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(345,42)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(345,42)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (345:42) and self(:,1) (345:42)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (345:42) and self(:,1) (345:42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(345,42)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (345:42) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(345,42)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(345,42)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(346,15)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (346:15) and self(:,1) (346:15)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (346:15) and self(:,1) (346:15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(346,15)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (346:15) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(346,15)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(346,15)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(348,16)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:16) and at (348:16)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:16) and at (348:16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(348,16)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:16) and at (348:16)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:16) and at (348:16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(348,16)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,16)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (348:45) has aligned access   [ comm_map_mod.f90(348,45) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(348,45) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,16)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,16)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(348,45)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:45) and at (348:45)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:45) and at (348:45)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(348,45)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:45) and at (348:45)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (348:45) and at (348:45)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (349:18) has aligned access   [ comm_map_mod.f90(349,18) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(349,18) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(348,45)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (348:45) and self(:,:) (348:45)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (348:45) and self(:,:) (348:45)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(348,45)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (348:45) and self(:,:) (348:45)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (348:45) and self(:,:) (348:45)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (348:45) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(348,45)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(349,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (349:18) and self(:,:) (349:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (349:18) and self(:,:) (349:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(349,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (349:18) and self(:,:) (349:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (349:18) and self(:,:) (349:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(349,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(349,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (349:18) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(349,18)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(349,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(345,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(345,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(345,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(345,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(346,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(346,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(346,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(348,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,16):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(348,45):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,45):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,45):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(348,45):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,45):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(348,45):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(349,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(349,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(349,18):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(338,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_y_] comm_map_mod.f90:338

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     432
            Global    :     131
            Local     :     301
        Regenerable   :      32
        Spilled       :      29
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       1 [7.32e-02 ~ 0.1%]
            Writes    :       9 [3.02e+00 ~ 3.1%]
        Spills        :     192 bytes*
            Reads     :      61 [1.11e+00 ~ 1.1%]
            Writes    :      31 [5.04e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_WY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_WY) [7/31=22.6%] comm_map_mod.f90(358,14)
  -> EXTERN: (363,36) for_check_mult_overflow64
  -> EXTERN: (363,36) for_alloc_allocatable
  -> EXTERN: (365,13) _alloca
  -> EXTERN: (365,13) SHARP_EXECUTE_D
  -> EXTERN: (365,13) __resetsp_inlined
  -> EXTERN: (365,13) __getsp_inlined
  -> EXTERN: (365,43) _alloca
  -> EXTERN: (368,16) SHARP_EXECUTE_D
  -> EXTERN: (368,16) _alloca
  -> EXTERN: (368,16) __getsp_inlined
  -> EXTERN: (368,16) __resetsp_inlined
  -> EXTERN: (368,46) _alloca
  -> EXTERN: (372,13) SHARP_EXECUTE_D


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(365,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (365:13) and at (365:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (365:13) and at (365:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(365,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (365:43) has aligned access   [ comm_map_mod.f90(365,43) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(365,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(365,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(365,43)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (365:43) and at (365:43)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (365:43) and at (365:43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(365,43)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (366:15) has aligned access   [ comm_map_mod.f90(366,15) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(366,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(365,43)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(365,43)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (365:43) and self(:,1) (365:43)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (365:43) and self(:,1) (365:43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(365,43)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (365:43) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(365,43)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(365,43)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(366,15)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (366:15) and self(:,1) (366:15)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (366:15) and self(:,1) (366:15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(366,15)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (366:15) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(366,15)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(366,15)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(368,16)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:16) and at (368:16)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:16) and at (368:16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(368,16)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:16) and at (368:16)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:16) and at (368:16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(368,16)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,16)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (368:46) has aligned access   [ comm_map_mod.f90(368,46) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(368,46) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,16)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,16)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(368,46)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:46) and at (368:46)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:46) and at (368:46)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(368,46)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:46) and at (368:46)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (368:46) and at (368:46)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (369:18) has aligned access   [ comm_map_mod.f90(369,18) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(369,18) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(368,46)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (368:46) and self(:,:) (368:46)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (368:46) and self(:,:) (368:46)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(368,46)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (368:46) and self(:,:) (368:46)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (368:46) and self(:,:) (368:46)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (368:46) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(368,46)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(369,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (369:18) and self(:,:) (369:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (369:18) and self(:,:) (369:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(369,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (369:18) and self(:,:) (369:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (369:18) and self(:,:) (369:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(369,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(369,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (369:18) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(369,18)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(369,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(365,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(365,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(365,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(365,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(366,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(366,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(366,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(368,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,16):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(368,46):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,46):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,46):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(368,46):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,46):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(368,46):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(369,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(369,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(369,18):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(358,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_wy_] comm_map_mod.f90:358

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     431
            Global    :     131
            Local     :     300
        Regenerable   :      31
        Spilled       :      29
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       1 [7.32e-02 ~ 0.1%]
            Writes    :       9 [3.02e+00 ~ 3.1%]
        Spills        :     192 bytes*
            Reads     :      61 [1.11e+00 ~ 1.1%]
            Writes    :      31 [5.04e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_Y_SCALAR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_Y_SCALAR) [8/31=25.8%] comm_map_mod.f90(378,14)
  -> EXTERN: (384,36) for_check_mult_overflow64
  -> EXTERN: (384,36) for_alloc_allocatable
  -> EXTERN: (386,13) _alloca
  -> EXTERN: (386,13) SHARP_EXECUTE_D
  -> EXTERN: (386,13) __resetsp_inlined
  -> EXTERN: (386,13) __getsp_inlined
  -> EXTERN: (386,42) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(385,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (386:13) and at (386:42)
   remark #17106: parallel dependence: assumed ANTI dependence between at (386:42) and at (386:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(386,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (386:13) and at (386:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (386:13) and at (386:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(386,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (386:42) has aligned access   [ comm_map_mod.f90(386,42) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(386,42) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(386,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(386,42)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (386:42) and at (386:42)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (386:42) and at (386:42)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(386,42)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (387:15) has aligned access   [ comm_map_mod.f90(387,15) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(387,15) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(386,42)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(386,42)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (386:42) and self(:,:) (386:42)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (386:42) and self(:,:) (386:42)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(386,42)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (386:42) and self(:,:) (386:42)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (386:42) and self(:,:) (386:42)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(386,42)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(386,42)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (386:42) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(386,42)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(386,42)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(387,15)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (387:15) and self(:,:) (387:15)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (387:15) and self(:,:) (387:15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(387,15)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (387:15) and self(:,:) (387:15)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (387:15) and self(:,:) (387:15)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(387,15)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(387,15)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (387:15) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(387,15)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(387,15)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(386,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(386,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(386,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(386,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(387,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(387,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(387,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(378,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_y_scalar_] comm_map_mod.f90:378

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     245
            Global    :      86
            Local     :     159
        Regenerable   :      18
        Spilled       :      26
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       1 [7.32e-02 ~ 0.0%]
            Writes    :       3 [1.63e+01 ~ 0.3%]
        Spills        :     192 bytes*
            Reads     :      61 [1.96e+02 ~ 3.6%]
            Writes    :      42 [1.21e+02 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_Y_EB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_Y_EB) [9/31=29.0%] comm_map_mod.f90(392,14)
  -> (400,13) COMM_MAP_MOD::CONSTRUCTOR_MAPINFO (isz = 2846) (sz = 2861)
     [[ Inlining would exceed -inline-max-total-size value (2846>2000) <2>]]
  -> EXTERN: (402,36) for_check_mult_overflow64
  -> EXTERN: (402,36) for_alloc_allocatable
  -> EXTERN: (404,13) _alloca
  -> EXTERN: (404,13) SHARP_EXECUTE_D
  -> EXTERN: (404,13) __resetsp_inlined
  -> EXTERN: (404,13) __getsp_inlined
  -> EXTERN: (404,42) _alloca
  -> EXTERN: (408,5) for_deallocate_all


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(403,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (404:13) and at (404:42)
   remark #17106: parallel dependence: assumed ANTI dependence between at (404:42) and at (404:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(404,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (404:13) and at (404:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (404:13) and at (404:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(404,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (404:42) has aligned access   [ comm_map_mod.f90(404,42) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(404,42) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(404,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(404,42)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (404:42) and at (404:42)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (404:42) and at (404:42)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(404,42)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (405:15) has aligned access   [ comm_map_mod.f90(405,15) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(405,15) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(404,42)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(404,42)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (404:42) and self(:,:) (404:42)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (404:42) and self(:,:) (404:42)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(404,42)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (404:42) and self(:,:) (404:42)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (404:42) and self(:,:) (404:42)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(404,42)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(404,42)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (404:42) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(404,42)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(404,42)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(405,15)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (405:15) and self(:,:) (405:15)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (405:15) and self(:,:) (405:15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(405,15)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (405:15) and self(:,:) (405:15)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (405:15) and self(:,:) (405:15)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(405,15)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(405,15)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (405:15) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(405,15)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(405,15)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(404,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(404,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(404,42):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,42):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(404,42):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(405,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(405,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(405,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(392,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_y_eb_] comm_map_mod.f90:392

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     269
            Global    :      86
            Local     :     183
        Regenerable   :      32
        Spilled       :      26
        
    Routine stack
        Variables     :     156 bytes*
            Reads     :       3 [6.51e+00 ~ 0.1%]
            Writes    :      14 [2.73e+01 ~ 0.5%]
        Spills        :     184 bytes*
            Reads     :      59 [1.90e+02 ~ 3.5%]
            Writes    :      41 [1.20e+02 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::CONSTRUCTOR_MAPINFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::CONSTRUCTOR_MAPINFO) [10/31=32.3%] comm_map_mod.f90(101,12)
  -> EXTERN: (130,10) mpi_comm_rank_
  -> EXTERN: (131,10) mpi_comm_size_
  -> EXTERN: (133,5) for_allocate
  -> EXTERN: (145,5) for_alloc_allocatable
  -> EXTERN: (145,5) for_check_mult_overflow64
  -> EXTERN: (149,13) IN_RING
  -> EXTERN: (157,5) for_alloc_allocatable
  -> EXTERN: (157,5) for_check_mult_overflow64
  -> EXTERN: (158,5) for_alloc_allocatable
  -> EXTERN: (158,5) for_check_mult_overflow64
  -> EXTERN: (162,13) IN_RING
  -> EXTERN: (168,16) IN_RING
  -> EXTERN: (175,5) for_dealloc_allocatable
  -> EXTERN: (176,10) QUICKSORT_INT
  -> EXTERN: (177,10) QUICKSORT_INT
  -> EXTERN: (189,5) for_alloc_allocatable
  -> EXTERN: (189,5) for_check_mult_overflow64
  -> EXTERN: (190,5) for_alloc_allocatable
  -> EXTERN: (190,5) for_check_mult_overflow64
  -> EXTERN: (191,5) for_alloc_allocatable
  -> EXTERN: (191,5) for_check_mult_overflow64
  -> EXTERN: (214,10) SHARP_MAKE_MMAJOR_REAL_PACKED_ALM_INFO
  -> EXTERN: (216,10) GETENVIRONMENT
  -> EXTERN: (217,10) INT2STRING
  -> EXTERN: (218,5) for_concat
  -> EXTERN: (218,19) for_trim
  -> EXTERN: (220,8) for_check_mult_overflow64
  -> EXTERN: (220,8) for_alloc_allocatable
  -> EXTERN: (221,13) READ_DBINTAB
  -> EXTERN: (222,8) for_realloc_lhs
  -> EXTERN: (223,13) __getsp_inlined
  -> EXTERN: (223,13) _alloca
  -> EXTERN: (223,13) SHARP_MAKE_HEALPIX_GEOM_INFO
  -> EXTERN: (223,13) __resetsp_inlined
  -> EXTERN: (226,8) for_alloc_allocatable
  -> EXTERN: (226,8) for_check_mult_overflow64
  -> EXTERN: (227,13) READ_DBINTAB
  -> EXTERN: (229,13) __resetsp_inlined
  -> EXTERN: (229,13) SHARP_MAKE_HEALPIX_GEOM_INFO
  -> EXTERN: (229,13) _alloca
  -> EXTERN: (229,13) __getsp_inlined
  -> EXTERN: (231,13) __resetsp_inlined
  -> EXTERN: (231,13) SHARP_MAKE_HEALPIX_GEOM_INFO
  -> EXTERN: (231,13) _alloca
  -> EXTERN: (231,13) __getsp_inlined
  -> EXTERN: (247,3) for_dealloc_allocatable
  -> EXTERN: (247,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(119,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_map_mod.f90(148,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function IN_RING cannot be vectorized   [ comm_map_mod.f90(149,13) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

LOOP BEGIN at comm_map_mod.f90(161,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_map_mod.f90(164,8)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PIXLIST(:) (164:8) and P(:) (164:8)
      remark #17106: parallel dependence: assumed FLOW dependence between P(:) (164:8) and PIXLIST(:) (164:8)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at comm_map_mod.f90(164,8)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between P(:) (164:8) and PIXLIST(:) (164:8)
         remark #17106: parallel dependence: assumed ANTI dependence between PIXLIST(:) (164:8) and P(:) (164:8)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(164,8)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(170,11)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PIXLIST(:) (170:11) and P(:) (170:11)
      remark #17106: parallel dependence: assumed FLOW dependence between P(:) (170:11) and PIXLIST(:) (170:11)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at comm_map_mod.f90(170,11)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between P(:) (170:11) and PIXLIST(:) (170:11)
         remark #17106: parallel dependence: assumed ANTI dependence between PIXLIST(:) (170:11) and P(:) (170:11)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(170,11)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(181,5)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_map_mod.f90(182,8) ]
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between P%NALM (184:11) and P%NALM (186:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between P%NALM (186:11) and P%NALM (184:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between P%NALM (184:11) and P%NALM (186:11)
   remark #15346: vector dependence: assumed OUTPUT dependence between P%NALM (186:11) and P%NALM (184:11)
LOOP END

LOOP BEGIN at comm_map_mod.f90(193,5)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between P(:) (193:5) and P(:) (193:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between P(:) (193:5) and P(:) (193:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(193,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(193,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference P(:) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(193,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(196,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ind was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at comm_map_mod.f90(199,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (200:14) and at (200:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (200:14) and at (200:14)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <P(:,ind)>, stride is unknown to compiler   [ comm_map_mod.f90(200,14) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <P(:,ind)>, stride is unknown to compiler   [ comm_map_mod.f90(200,14) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.107
      remark #15453: unmasked strided stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 18.750 
      remark #15478: estimated potential speedup: 0.260 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  

      LOOP BEGIN at comm_map_mod.f90(200,14)
         remark #25436: completely unrolled by 2   (pre-vector) 
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(199,11)
   <Remainder>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(204,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (205:14) and at (205:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (205:14) and at (205:14)
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between l (205:14) and l (209:11)
      remark #15346: vector dependence: assumed FLOW dependence between l (209:11) and l (205:14)
      remark #15346: vector dependence: assumed FLOW dependence between l (209:11) and l (205:14)
      remark #15346: vector dependence: assumed ANTI dependence between l (205:14) and l (209:11)
      remark #25439: unrolled with remainder by 2  

      LOOP BEGIN at comm_map_mod.f90(205,14)
         remark #25045: Fused Loops: ( 205 207 )

         remark #25436: completely unrolled by 2   (pre-vector) 
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(207,14)
         remark #25046: Loop lost in Fusion 
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(204,11)
   <Remainder>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 5
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(222,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(222,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference P(:,:) has unaligned access
      remark #15389: vectorization support: reference P(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(222,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(223,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (223:13) and at (223:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (223:13) and at (223:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(223,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (224:22) has aligned access   [ comm_map_mod.f90(224,22) ]
      remark #15389: vectorization support: reference P(:,1) has unaligned access   [ comm_map_mod.f90(224,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(223,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(228,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(228,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference P(:,:) has unaligned access
      remark #15389: vectorization support: reference P(:,:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.200
      remark #15300: LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(228,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(229,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (229:13) and at (229:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (229:13) and at (229:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(229,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (230:22) has aligned access   [ comm_map_mod.f90(230,22) ]
      remark #15389: vectorization support: reference P(:,1) has unaligned access   [ comm_map_mod.f90(230,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(229,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(231,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (231:13) and at (231:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (231:13) and at (231:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(231,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (232:22) has aligned access   [ comm_map_mod.f90(232,22) ]
      remark #15389: vectorization support: reference P(:,2) has unaligned access   [ comm_map_mod.f90(232,22) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(231,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(237,15)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(112,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(111,48):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(118,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(124,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(125,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(125,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(133,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(133,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(164,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(164,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(164,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(170,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(170,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(170,11):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(193,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(193,5):remark #34026: call to memset implemented as a call to optimized library version
comm_map_mod.f90(229,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(229,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(229,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(231,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(231,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(231,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(236,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(238,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (32, 0)
comm_map_mod.f90(243,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(243,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(245,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(245,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(241,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(241,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(121,11):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(121,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(223,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(223,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(223,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(101,12):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_constructor_mapinfo_] comm_map_mod.f90:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1322
            Global    :     267
            Local     :    1055
        Regenerable   :     165
        Spilled       :      44
        
    Routine stack
        Variables     :    2537 bytes*
            Reads     :     128 [1.44e+02 ~ 3.7%]
            Writes    :     151 [2.13e+02 ~ 5.5%]
        Spills        :     312 bytes*
            Reads     :      74 [1.43e+02 ~ 3.7%]
            Writes    :      50 [6.11e+01 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_YT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_YT) [11/31=35.5%] comm_map_mod.f90(412,14)
  -> EXTERN: (417,36) for_check_mult_overflow64
  -> EXTERN: (417,36) for_alloc_allocatable
  -> EXTERN: (419,13) _alloca
  -> EXTERN: (419,13) SHARP_EXECUTE_D
  -> EXTERN: (419,13) __resetsp_inlined
  -> EXTERN: (419,13) __getsp_inlined
  -> EXTERN: (419,43) _alloca
  -> EXTERN: (422,16) SHARP_EXECUTE_D
  -> EXTERN: (422,16) _alloca
  -> EXTERN: (422,16) __getsp_inlined
  -> EXTERN: (422,16) __resetsp_inlined
  -> EXTERN: (422,46) _alloca
  -> EXTERN: (427,13) SHARP_EXECUTE_D


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(419,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (419:13) and at (419:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (419:13) and at (419:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(419,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (419:43) has aligned access   [ comm_map_mod.f90(419,43) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(419,43) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(419,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(419,43)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (419:43) and at (419:43)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (419:43) and at (419:43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(419,43)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (420:15) has aligned access   [ comm_map_mod.f90(420,15) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(420,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(419,43)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(419,43)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (419:43) and self(:,1) (419:43)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (419:43) and self(:,1) (419:43)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(419,43)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (419:43) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(419,43)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(419,43)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(420,15)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (420:15) and self(:,1) (420:15)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (420:15) and self(:,1) (420:15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(420,15)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (420:15) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(420,15)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(420,15)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(422,16)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:16) and at (422:16)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:16) and at (422:16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(422,16)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:16) and at (422:16)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:16) and at (422:16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(422,16)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,16)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (422:46) has aligned access   [ comm_map_mod.f90(422,46) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(422,46) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,16)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,16)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(422,46)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:46) and at (422:46)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:46) and at (422:46)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(422,46)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:46) and at (422:46)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (422:46) and at (422:46)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (423:18) has aligned access   [ comm_map_mod.f90(423,18) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(423,18) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(422,46)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (422:46) and self(:,:) (422:46)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (422:46) and self(:,:) (422:46)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(422,46)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (422:46) and self(:,:) (422:46)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (422:46) and self(:,:) (422:46)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (422:46) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(422,46)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(423,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (423:18) and self(:,:) (423:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (423:18) and self(:,:) (423:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(423,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (423:18) and self(:,:) (423:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (423:18) and self(:,:) (423:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(423,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(423,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (423:18) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(423,18)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(423,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(419,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(419,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(419,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(419,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(420,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(420,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(420,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(422,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,16):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(422,46):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,46):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,46):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(422,46):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,46):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(422,46):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(423,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(423,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(423,18):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(412,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_yt_] comm_map_mod.f90:412

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     433
            Global    :     133
            Local     :     300
        Regenerable   :      31
        Spilled       :      32
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       1 [7.32e-02 ~ 0.1%]
            Writes    :       9 [3.02e+00 ~ 3.1%]
        Spills        :     216 bytes*
            Reads     :      66 [1.12e+00 ~ 1.2%]
            Writes    :      36 [5.20e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_YT_SCALAR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_YT_SCALAR) [12/31=38.7%] comm_map_mod.f90(433,14)
  -> EXTERN: (439,36) for_check_mult_overflow64
  -> EXTERN: (439,36) for_alloc_allocatable
  -> EXTERN: (441,13) _alloca
  -> EXTERN: (441,13) SHARP_EXECUTE_D
  -> EXTERN: (441,13) __resetsp_inlined
  -> EXTERN: (441,13) __getsp_inlined
  -> EXTERN: (441,43) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(440,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (441:13) and at (441:43)
   remark #17106: parallel dependence: assumed ANTI dependence between at (441:43) and at (441:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(441,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (441:13) and at (441:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (441:13) and at (441:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(441,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (441:43) has aligned access   [ comm_map_mod.f90(441,43) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(441,43) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(441,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(441,43)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (441:43) and at (441:43)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (441:43) and at (441:43)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(441,43)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (442:15) has aligned access   [ comm_map_mod.f90(442,15) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(442,15) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(441,43)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(441,43)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (441:43) and self(:,:) (441:43)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (441:43) and self(:,:) (441:43)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(441,43)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (441:43) and self(:,:) (441:43)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (441:43) and self(:,:) (441:43)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(441,43)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(441,43)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (441:43) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(441,43)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(441,43)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(442,15)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (442:15) and self(:,:) (442:15)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (442:15) and self(:,:) (442:15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(442,15)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (442:15) and self(:,:) (442:15)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (442:15) and self(:,:) (442:15)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(442,15)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(442,15)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (442:15) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(442,15)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(442,15)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(441,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(441,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(441,43):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,43):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(441,43):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(442,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(442,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(442,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(433,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_yt_scalar_] comm_map_mod.f90:433

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     244
            Global    :      85
            Local     :     159
        Regenerable   :      17
        Spilled       :      26
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       1 [7.32e-02 ~ 0.0%]
            Writes    :       3 [1.63e+01 ~ 0.3%]
        Spills        :     192 bytes*
            Reads     :      61 [1.96e+02 ~ 3.6%]
            Writes    :      42 [1.21e+02 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_YTW

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_YTW) [13/31=41.9%] comm_map_mod.f90(447,14)
  -> EXTERN: (452,36) for_check_mult_overflow64
  -> EXTERN: (452,36) for_alloc_allocatable
  -> EXTERN: (454,13) _alloca
  -> EXTERN: (454,13) SHARP_EXECUTE_D
  -> EXTERN: (454,13) __resetsp_inlined
  -> EXTERN: (454,13) __getsp_inlined
  -> EXTERN: (454,44) _alloca
  -> EXTERN: (457,16) SHARP_EXECUTE_D
  -> EXTERN: (457,16) _alloca
  -> EXTERN: (457,16) __getsp_inlined
  -> EXTERN: (457,16) __resetsp_inlined
  -> EXTERN: (457,47) _alloca
  -> EXTERN: (461,13) SHARP_EXECUTE_D


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(454,13)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (454:13) and at (454:13)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (454:13) and at (454:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(454,13)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (454:44) has aligned access   [ comm_map_mod.f90(454,44) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(454,44) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(454,13)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(454,44)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (454:44) and at (454:44)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (454:44) and at (454:44)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(454,44)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (455:15) has aligned access   [ comm_map_mod.f90(455,15) ]
      remark #15389: vectorization support: reference self(:,1) has unaligned access   [ comm_map_mod.f90(455,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.750
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.000 
      remark #15478: estimated potential speedup: 1.770 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(454,44)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(454,44)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (454:44) and self(:,1) (454:44)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (454:44) and self(:,1) (454:44)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(454,44)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (454:44) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(454,44)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(454,44)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(455,15)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (455:15) and self(:,1) (455:15)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,1) (455:15) and self(:,1) (455:15)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(455,15)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference self(:,1) has aligned access
      remark #15388: vectorization support: reference at (455:15) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(455,15)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(455,15)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(457,16)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:16) and at (457:16)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:16) and at (457:16)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(457,16)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:16) and at (457:16)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:16) and at (457:16)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(457,16)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,16)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (457:47) has aligned access   [ comm_map_mod.f90(457,47) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(457,47) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,16)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,16)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(457,47)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:47) and at (457:47)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:47) and at (457:47)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(457,47)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:47) and at (457:47)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (457:47) and at (457:47)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (458:18) has aligned access   [ comm_map_mod.f90(458,18) ]
         remark #15388: vectorization support: reference self(:,:) has aligned access   [ comm_map_mod.f90(458,18) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(457,47)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (457:47) and self(:,:) (457:47)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (457:47) and self(:,:) (457:47)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(457,47)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (457:47) and self(:,:) (457:47)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (457:47) and self(:,:) (457:47)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (457:47) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(457,47)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(458,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (458:18) and self(:,:) (458:18)
   remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (458:18) and self(:,:) (458:18)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(458,18)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (458:18) and self(:,:) (458:18)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (458:18) and self(:,:) (458:18)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(458,18)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(458,18)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15388: vectorization support: reference at (458:18) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(458,18)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(458,18)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(454,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(454,44):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,44):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,44):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(454,44):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,44):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(454,44):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(455,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(455,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(455,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(457,16):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,16):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,16):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(457,47):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,47):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,47):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(457,47):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,47):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(457,47):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(458,18):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(458,18):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(458,18):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(447,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_ytw_] comm_map_mod.f90:447

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     435
            Global    :     133
            Local     :     302
        Regenerable   :      33
        Spilled       :      33
        
    Routine stack
        Variables     :      44 bytes*
            Reads     :       1 [7.32e-02 ~ 0.1%]
            Writes    :       9 [3.02e+00 ~ 3.1%]
        Spills        :     224 bytes*
            Reads     :      67 [1.13e+00 ~ 1.2%]
            Writes    :      39 [5.32e-01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::EXEC_SHARP_YTW_SCALAR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::EXEC_SHARP_YTW_SCALAR) [14/31=45.2%] comm_map_mod.f90(468,14)
  -> EXTERN: (474,36) for_check_mult_overflow64
  -> EXTERN: (474,36) for_alloc_allocatable
  -> EXTERN: (476,13) _alloca
  -> EXTERN: (476,13) SHARP_EXECUTE_D
  -> EXTERN: (476,13) __resetsp_inlined
  -> EXTERN: (476,13) __getsp_inlined
  -> EXTERN: (476,44) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(475,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (476:13) and at (476:44)
   remark #17106: parallel dependence: assumed ANTI dependence between at (476:44) and at (476:13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(476,13)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (476:13) and at (476:13)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (476:13) and at (476:13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(476,13)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (476:44) has aligned access   [ comm_map_mod.f90(476,44) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(476,44) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(476,13)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(476,44)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (476:44) and at (476:44)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (476:44) and at (476:44)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(476,44)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (477:15) has aligned access   [ comm_map_mod.f90(477,15) ]
         remark #15389: vectorization support: reference self(:,:) has unaligned access   [ comm_map_mod.f90(477,15) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.750
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.000 
         remark #15478: estimated potential speedup: 1.770 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(476,44)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(476,44)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (476:44) and self(:,:) (476:44)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (476:44) and self(:,:) (476:44)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(476,44)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (476:44) and self(:,:) (476:44)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (476:44) and self(:,:) (476:44)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(476,44)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(476,44)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (476:44) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(476,44)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(476,44)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(477,15)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (477:15) and self(:,:) (477:15)
      remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (477:15) and self(:,:) (477:15)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(477,15)
         remark #25399: memcopy generated
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (477:15) and self(:,:) (477:15)
         remark #17106: parallel dependence: assumed OUTPUT dependence between self(:,:) (477:15) and self(:,:) (477:15)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_map_mod.f90(477,15)
         <Peeled loop for vectorization>
            remark #25015: Estimate of max trip count of loop=1
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(477,15)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15388: vectorization support: reference self(:,:) has aligned access
            remark #15388: vectorization support: reference at (477:15) has aligned access
            remark #15305: vectorization support: vector length 2
            remark #15309: vectorization support: normalized vectorization overhead 4.667
            remark #15300: LOOP WAS VECTORIZED
            remark #15442: entire loop may be executed in remainder
            remark #15448: unmasked aligned unit stride loads: 1 
            remark #15449: unmasked aligned unit stride stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 4 
            remark #15477: vector cost: 1.500 
            remark #15478: estimated potential speedup: 1.290 
            remark #15488: --- end vector cost summary ---
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(477,15)
         <Alternate Alignment Vectorized Loop>
            remark #25015: Estimate of max trip count of loop=6
         LOOP END

         LOOP BEGIN at comm_map_mod.f90(477,15)
         <Remainder loop for vectorization>
            remark #25015: Estimate of max trip count of loop=12
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(476,13):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,13):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,13):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(476,44):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,44):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,44):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(476,44):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,44):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(476,44):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(477,15):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(477,15):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(477,15):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(468,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_exec_sharp_ytw_scalar_] comm_map_mod.f90:468

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     245
            Global    :      86
            Local     :     159
        Regenerable   :      18
        Spilled       :      26
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       1 [7.32e-02 ~ 0.0%]
            Writes    :       3 [1.63e+01 ~ 0.3%]
        Spills        :     192 bytes*
            Reads     :      61 [1.96e+02 ~ 3.6%]
            Writes    :      42 [1.21e+02 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::WRITEFITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::WRITEFITS) [15/31=48.4%] comm_map_mod.f90(486,14)
  -> EXTERN: (509,13) UPDATE_STATUS
  -> EXTERN: (510,8) for_check_mult_overflow64
  -> EXTERN: (510,8) for_alloc_allocatable
  -> EXTERN: (510,8) for_check_mult_overflow64
  -> EXTERN: (510,8) for_alloc_allocatable
  -> EXTERN: (511,8) __getsp_inlined
  -> EXTERN: (511,8) _alloca
  -> EXTERN: (511,8) __resetsp_inlined
  -> EXTERN: (513,16) mpi_recv_
  -> EXTERN: (514,16) mpi_recv_
  -> EXTERN: (515,11) for_alloc_allocatable
  -> EXTERN: (515,11) for_check_mult_overflow64
  -> EXTERN: (516,16) mpi_recv_
  -> EXTERN: (518,11) __resetsp_inlined
  -> EXTERN: (518,11) _alloca
  -> EXTERN: (518,11) __getsp_inlined
  -> EXTERN: (519,11) for_dealloc_allocatable
  -> EXTERN: (521,13) UPDATE_STATUS
  -> (522,13) COMM_MAP_MOD::WRITE_MAP (isz = 1571) (sz = 1598)
     [[ Inlining inhibited by overrideable criterion  <3>]]
  -> EXTERN: (523,20) UPDATE_STATUS
  -> EXTERN: (526,11) for_alloc_allocatable
  -> EXTERN: (526,11) for_check_mult_overflow64
  -> EXTERN: (534,19) mpi_recv_
  -> EXTERN: (535,14) for_check_mult_overflow64
  -> EXTERN: (535,14) for_alloc_allocatable
  -> EXTERN: (536,19) mpi_recv_
  -> EXTERN: (537,14) for_check_mult_overflow64
  -> EXTERN: (537,14) for_alloc_allocatable
  -> EXTERN: (538,19) mpi_recv_
  -> EXTERN: (546,14) for_dealloc_allocatable
  -> EXTERN: (546,14) for_dealloc_allocatable
  -> EXTERN: (548,16) UPDATE_STATUS
  -> EXTERN: (549,16) __resetsp_inlined
  -> EXTERN: (549,16) WRITE_HDF_2D_DP
  -> EXTERN: (549,16) __getsp_inlined
  -> EXTERN: (549,35) for_trim
  -> EXTERN: (549,40) for_adjustl
  -> EXTERN: (549,48) _alloca
  -> EXTERN: (549,56) _alloca
  -> EXTERN: (549,56) for_concat
  -> EXTERN: (549,56) _alloca
  -> EXTERN: (550,16) __resetsp_inlined
  -> EXTERN: (550,16) WRITE_HDF_2D_DP
  -> EXTERN: (550,16) __getsp_inlined
  -> EXTERN: (550,35) for_trim
  -> EXTERN: (550,40) for_adjustl
  -> EXTERN: (550,48) _alloca
  -> EXTERN: (550,56) _alloca
  -> EXTERN: (550,56) for_concat
  -> EXTERN: (550,56) _alloca
  -> EXTERN: (551,16) __resetsp_inlined
  -> EXTERN: (551,16) WRITE_HDF_0D_INT
  -> EXTERN: (551,16) __getsp_inlined
  -> EXTERN: (551,35) for_trim
  -> EXTERN: (551,40) for_adjustl
  -> EXTERN: (551,48) _alloca
  -> EXTERN: (551,56) _alloca
  -> EXTERN: (551,56) for_concat
  -> EXTERN: (551,56) _alloca
  -> EXTERN: (552,16) __resetsp_inlined
  -> EXTERN: (552,16) WRITE_HDF_0D_INT
  -> EXTERN: (552,16) __getsp_inlined
  -> EXTERN: (552,35) for_trim
  -> EXTERN: (552,40) for_adjustl
  -> EXTERN: (552,48) _alloca
  -> EXTERN: (552,56) _alloca
  -> EXTERN: (552,56) for_concat
  -> EXTERN: (552,56) _alloca
  -> EXTERN: (553,16) UPDATE_STATUS
  -> EXTERN: (554,11) for_dealloc_allocatable
  -> EXTERN: (557,8) for_dealloc_allocatable
  -> EXTERN: (557,8) for_dealloc_allocatable
  -> EXTERN: (560,13) mpi_send_
  -> EXTERN: (561,13) mpi_send_
  -> EXTERN: (562,13) mpi_send_
  -> EXTERN: (566,16) mpi_send_
  -> EXTERN: (567,16) mpi_send_
  -> EXTERN: (568,16) mpi_send_
  -> EXTERN: (573,3) for_dealloc_allocatable
  -> EXTERN: (573,3) for_dealloc_allocatable
  -> EXTERN: (573,3) for_dealloc_allocatable
  -> EXTERN: (573,3) for_dealloc_allocatable
  -> EXTERN: (573,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(511,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(511,8)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(511,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(npix(:),:) (511:8) and MAP(npix(:),:) (511:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(npix(:),:) (511:8) and MAP(npix(:),:) (511:8)
      remark #15389: vectorization support: reference npix(:) has unaligned access
      remark #15388: vectorization support: reference npix(:,:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <MAP(npix(:),:)>, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.180 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(511,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(512,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(518,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(518,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(518,11)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(P(:),:) (518:11) and MAP(P(:),:) (518:11)
         remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(P(:),:) (518:11) and MAP(P(:),:) (518:11)
         remark #15389: vectorization support: reference P(:) has unaligned access
         remark #15388: vectorization support: reference BUFFER(:,:) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <MAP(P(:),:)>, part of index is read from memory
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.180 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(518,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(527,11)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between ALM(ind,:) (531:14) and ALM(ind,:) (531:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between ALM(ind,:) (531:14) and ALM(ind,:) (531:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between ALM(ind,:) (531:14) and ALM(ind,:) (531:14)
   remark #15346: vector dependence: assumed OUTPUT dependence between ALM(ind,:) (531:14) and ALM(ind,:) (531:14)

   LOOP BEGIN at comm_map_mod.f90(531,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <ALM(ind,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <npix(j,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(531,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(533,11)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_map_mod.f90(544,17)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between ALM(ind,:) (544:17) and ALM(ind,:) (544:17)
      remark #17106: parallel dependence: assumed OUTPUT dependence between ALM(ind,:) (544:17) and ALM(ind,:) (544:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between ALM(ind,:) (544:17) and ALM(ind,:) (544:17)
      remark #15346: vector dependence: assumed OUTPUT dependence between ALM(ind,:) (544:17) and ALM(ind,:) (544:17)

      LOOP BEGIN at comm_map_mod.f90(544,17)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <ALM(ind,:)>, stride is unknown to compiler
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <BUFFER(j,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15452: unmasked strided loads: 1 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 4.000 
         remark #15478: estimated potential speedup: 1.000 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(544,17)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(498,60):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(499,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(498,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(500,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(498,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(486,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_writefits_] comm_map_mod.f90:486

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :    1204
            Global    :     207
            Local     :     997
        Regenerable   :     215
        Spilled       :      37
        
    Routine stack
        Variables     :     692 bytes*
            Reads     :      76 [9.22e+00 ~ 2.1%]
            Writes    :     140 [3.66e+01 ~ 8.3%]
        Spills        :     256 bytes*
            Reads     :      59 [4.70e+00 ~ 1.1%]
            Writes    :      44 [3.06e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::WRITE_MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::WRITE_MAP) [16/31=51.6%] comm_map_mod.f90(706,14)
  -> EXTERN: (721,20) f_lanint_val
  -> EXTERN: (724,49) for_cpystr
  -> EXTERN: (725,49) for_cpystr
  -> EXTERN: (735,8) for_cpystr
  -> EXTERN: (739,10) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (740,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (741,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (742,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (743,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (744,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (745,10) HEAD_FITS^I_ADD_CARD
  -> EXTERN: (746,10) HEAD_FITS^I_ADD_CARD
  -> EXTERN: (747,10) HEAD_FITS^I_ADD_CARD
  -> EXTERN: (748,10) HEAD_FITS^D_ADD_CARD
  -> EXTERN: (749,10) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (750,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (751,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (752,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (753,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (754,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (755,10) HEAD_FITS^I_ADD_CARD
  -> EXTERN: (756,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (757,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (758,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (759,10) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (760,10) HEAD_FITS^L_ADD_CARD
  -> EXTERN: (762,10) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (763,10) __resetsp_inlined
  -> EXTERN: (763,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (763,10) __getsp_inlined
  -> EXTERN: (763,40) for_concat
  -> EXTERN: (763,40) _alloca
  -> EXTERN: (764,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (765,10) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (768,13) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (768,13) __resetsp_inlined
  -> EXTERN: (768,13) __getsp_inlined
  -> EXTERN: (768,43) _alloca
  -> EXTERN: (768,43) for_concat
  -> EXTERN: (769,13) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (770,13) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (772,13) __getsp_inlined
  -> EXTERN: (772,13) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (772,13) __resetsp_inlined
  -> EXTERN: (772,43) _alloca
  -> EXTERN: (772,43) for_concat
  -> EXTERN: (773,13) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (774,13) HEAD_FITS^V_ADD_CARD
  -> EXTERN: (776,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (777,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (778,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (779,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (780,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (781,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (782,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (783,28) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (783,28) __resetsp_inlined
  -> EXTERN: (783,28) __getsp_inlined
  -> EXTERN: (783,60) for_trim
  -> EXTERN: (783,65) _alloca
  -> EXTERN: (784,28) HEAD_FITS^D_ADD_CARD
  -> EXTERN: (785,32) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (785,32) __resetsp_inlined
  -> EXTERN: (785,32) __getsp_inlined
  -> EXTERN: (785,66) for_trim
  -> EXTERN: (785,71) _alloca
  -> EXTERN: (787,10) HEAD_FITS^A_ADD_CARD
  -> EXTERN: (789,10) __resetsp_inlined
  -> EXTERN: (789,10) FITSTOOLS^OUTPUT_MAP_D
  -> EXTERN: (789,10) __getsp_inlined
  -> EXTERN: (789,37) for_concat
  -> EXTERN: (789,37) _alloca
  -> EXTERN: (789,39) for_trim
  -> EXTERN: (789,44) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(724,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference unit_(Impl_lp+1) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 7
   remark #15309: vectorization support: normalized vectorization overhead 0.071
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.630 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 15  
LOOP END

LOOP BEGIN at comm_map_mod.f90(725,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference ttype_(Impl_lp+1) has unaligned access
   remark #15389: vectorization support: reference at (725:20) has unaligned access   [ comm_map_mod.f90(725,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.375
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 0.760 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 5  
LOOP END

LOOP BEGIN at comm_map_mod.f90(725,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference ttype_(Impl_lp+6) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15427: loop was completely unrolled
   remark #15399: vectorization support: unroll factor set to 5
   remark #15309: vectorization support: normalized vectorization overhead 0.100
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 0.600 
   remark #15488: --- end vector cost summary ---
   remark #25436: completely unrolled by 10  
LOOP END

LOOP BEGIN at comm_map_mod.f90(734,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:for_cpystr (735:8) and call:for_cpystr (735:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:for_cpystr (735:8) and call:for_cpystr (735:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between header(i) (735:8) and header(i) (735:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between header(i) (735:8) and header(i) (735:8)
   remark #15527: loop was not vectorized: function call to for_cpystr cannot be vectorized   [ comm_map_mod.f90(735,8) ]
   remark #25015: Estimate of max trip count of loop=120
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(706,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_write_map_] comm_map_mod.f90:706

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     509
            Global    :      55
            Local     :     454
        Regenerable   :     403
        Spilled       :      19
        
    Routine stack
        Variables     :   12940 bytes*
            Reads     :       1 [1.00e+00 ~ 0.1%]
            Writes    :     403 [3.38e+02 ~ 21.3%]
        Spills        :     112 bytes*
            Reads     :      16 [7.82e+00 ~ 0.5%]
            Writes    :      14 [7.27e+00 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::READFITS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::READFITS) [17/31=54.8%] comm_map_mod.f90(575,14)
  -> EXTERN: (589,5) __resetsp_inlined
  -> EXTERN: (589,5) __getsp_inlined
  -> EXTERN: (589,12) GETSIZE_FITS
  -> EXTERN: (589,25) for_trim
  -> EXTERN: (589,30) _alloca
  -> EXTERN: (591,33) __getsp_inlined
  -> EXTERN: (591,33) for_write_seq_lis
  -> EXTERN: (591,33) __resetsp_inlined
  -> EXTERN: (591,66) _alloca
  -> EXTERN: (591,66) for_concat
  -> EXTERN: (591,69) for_trim
  -> EXTERN: (591,74) _alloca
  -> EXTERN: (592,13) mpi_finalize_
  -> EXTERN: (593,8) for_stop_core
  -> EXTERN: (596,33) for_write_seq_lis
  -> EXTERN: (596,33) __resetsp_inlined
  -> EXTERN: (596,33) __getsp_inlined
  -> EXTERN: (596,66) _alloca
  -> EXTERN: (596,66) for_concat
  -> EXTERN: (596,69) for_trim
  -> EXTERN: (596,74) _alloca
  -> EXTERN: (597,13) mpi_finalize_
  -> EXTERN: (598,8) for_stop_core
  -> EXTERN: (605,8) for_check_mult_overflow64
  -> EXTERN: (605,8) for_alloc_allocatable
  -> EXTERN: (607,11) for_alloc_allocatable
  -> EXTERN: (607,11) for_check_mult_overflow64
  -> EXTERN: (608,16) FITSTOOLS^INPUT_MAP4_D
  -> EXTERN: (610,19) UDGRADE_NR^UDGRADE_RING_ND_D
  -> EXTERN: (612,19) UDGRADE_NR^UDGRADE_NEST_ND_D
  -> EXTERN: (614,11) for_dealloc_allocatable
  -> EXTERN: (616,16) FITSTOOLS^INPUT_MAP4_D
  -> EXTERN: (622,14) for_write_seq_fmt_xmit
  -> EXTERN: (622,14) for_write_seq_fmt
  -> EXTERN: (628,19) PIX_TOOLS^CONVERT_NEST2RING_DOUBLE_1D
  -> EXTERN: (633,8) for_check_mult_overflow64
  -> EXTERN: (633,8) for_alloc_allocatable
  -> EXTERN: (634,8) __getsp_inlined
  -> EXTERN: (634,8) _alloca
  -> EXTERN: (634,8) for_realloc_lhs
  -> EXTERN: (634,8) __resetsp_inlined
  -> EXTERN: (636,16) mpi_recv_
  -> EXTERN: (637,16) mpi_recv_
  -> EXTERN: (638,11) for_alloc_allocatable
  -> EXTERN: (638,11) for_check_mult_overflow64
  -> EXTERN: (639,11) __resetsp_inlined
  -> EXTERN: (639,11) for_realloc_lhs
  -> EXTERN: (639,11) _alloca
  -> EXTERN: (639,11) __getsp_inlined
  -> EXTERN: (640,16) mpi_send_
  -> EXTERN: (642,11) __resetsp_inlined
  -> EXTERN: (642,11) _alloca
  -> EXTERN: (642,11) __getsp_inlined
  -> EXTERN: (643,11) for_dealloc_allocatable
  -> EXTERN: (645,8) for_dealloc_allocatable
  -> EXTERN: (645,8) for_dealloc_allocatable
  -> EXTERN: (647,13) mpi_send_
  -> EXTERN: (648,13) mpi_send_
  -> EXTERN: (649,13) mpi_recv_
  -> EXTERN: (665,3) for_dealloc_allocatable
  -> EXTERN: (665,3) for_dealloc_allocatable
  -> EXTERN: (665,3) for_dealloc_allocatable
  -> EXTERN: (665,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(620,20)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(620,20)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(620,20)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.471
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 64 
      remark #15477: vector cost: 21.750 
      remark #15478: estimated potential speedup: 2.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(620,20)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(627,11)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_map_mod.f90(634,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (634:8) and self(:,:) (634:8)
   remark #17106: parallel dependence: assumed FLOW dependence between self(:,:) (634:8) and at (634:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (634:8) and self(:,:) (634:8)
   remark #15346: vector dependence: assumed FLOW dependence between self(:,:) (634:8) and at (634:8)

   LOOP BEGIN at comm_map_mod.f90(634,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (634:8) and self(:,:) (634:8)
      remark #17106: parallel dependence: assumed FLOW dependence between self(:,:) (634:8) and at (634:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (634:8) and self(:,:) (634:8)
      remark #15346: vector dependence: assumed FLOW dependence between self(:,:) (634:8) and at (634:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(634,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(635,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(639,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (639:11) and at (639:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (639:11) and at (639:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (639:11) and at (639:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(639,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(639,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference BUFFER(:,:) has aligned access
         remark #15389: vectorization support: reference P(:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15328: vectorization support: irregularly indexed load was emulated for the variable <MAP(P(:),:)>, part of index is read from memory
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15462: unmasked indexed (or gather) loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.180 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(639,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(642,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (642:11) and at (642:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (642:11) and at (642:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (642:11) and at (642:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(642,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(642,11)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(P(:),:) (642:11) and MAP(P(:),:) (642:11)
         remark #17106: parallel dependence: assumed OUTPUT dependence between MAP(P(:),:) (642:11) and MAP(P(:),:) (642:11)
         remark #15389: vectorization support: reference P(:) has unaligned access
         remark #15388: vectorization support: reference BUFFER(:,:) has aligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15329: vectorization support: irregularly indexed store was emulated for the variable <MAP(P(:),:)>, part of index is read from memory
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15463: unmasked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 5.000 
         remark #15478: estimated potential speedup: 1.180 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(642,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(654,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (655:11) and i (655:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (661:11) and i (661:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (661:11) and i (661:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(655,11)
   <Distributed chunk1>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between i (661:11) and i (661:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between i (661:11) and i (661:11)
      remark #25426: Loop Distributed (2 way) 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 1 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(655,11)
   <Remainder loop for vectorization, Distributed chunk1>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(655,11)
   <Peeled loop for vectorization, Distributed chunk2>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(655,11)
   <Distributed chunk2>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <mask(i,j)>, stride is unknown to compiler   [ comm_map_mod.f90(659,17) ]
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.264
      remark #15301: PARTIAL LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 37 
      remark #15477: vector cost: 26.500 
      remark #15478: estimated potential speedup: 1.390 
      remark #15488: --- end vector cost summary ---
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(655,11)
   <Remainder loop for vectorization, Distributed chunk2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(584,63):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(584,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(585,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(584,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(575,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_readfits_] comm_map_mod.f90:575

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    1083
            Global    :     218
            Local     :     865
        Regenerable   :     222
        Spilled       :      40
        
    Routine stack
        Variables     :     896 bytes*
            Reads     :      70 [1.39e+01 ~ 0.9%]
            Writes    :     136 [3.52e+01 ~ 2.3%]
        Spills        :     280 bytes*
            Reads     :      60 [3.97e+01 ~ 2.6%]
            Writes    :      42 [1.76e+01 ~ 1.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::READHDF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::READHDF) [18/31=58.1%] comm_map_mod.f90(667,14)
  -> EXTERN: (685,5) for_alloc_allocatable
  -> EXTERN: (685,5) for_check_mult_overflow64
  -> EXTERN: (686,30) READ_HDF_2D_DP
  -> EXTERN: (686,30) __resetsp_inlined
  -> EXTERN: (686,30) __getsp_inlined
  -> EXTERN: (686,53) for_trim
  -> EXTERN: (686,58) for_adjustl
  -> EXTERN: (686,58) _alloca
  -> EXTERN: (686,66) _alloca
  -> EXTERN: (686,75) _alloca
  -> EXTERN: (686,75) for_concat
  -> EXTERN: (687,10) mpi_bcast_
  -> INDIRECT-: (689,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_readhdf_$SELF_V$28a9.0.17->QNCAtemplate.dim31_dv_template.addr_a0_V$292d.0.17)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (693,5) for_dealloc_allocatable
  -> EXTERN: (696,5) for_alloc_allocatable
  -> EXTERN: (696,5) for_check_mult_overflow64
  -> EXTERN: (697,30) READ_HDF_2D_DP
  -> EXTERN: (697,30) __resetsp_inlined
  -> EXTERN: (697,30) __getsp_inlined
  -> EXTERN: (697,53) for_trim
  -> EXTERN: (697,58) for_adjustl
  -> EXTERN: (697,58) _alloca
  -> EXTERN: (697,66) _alloca
  -> EXTERN: (697,75) _alloca
  -> EXTERN: (697,75) for_concat
  -> EXTERN: (698,10) mpi_bcast_
  -> EXTERN: (702,5) for_dealloc_allocatable
  -> EXTERN: (704,3) for_dealloc_allocatable
  -> EXTERN: (704,3) for_dealloc_allocatable
  -> EXTERN: (704,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(688,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at comm_map_mod.f90(691,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (691:8)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <ALMS(j,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(691,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(702,5)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_map_mod.f90(701,5) ]
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between self (700:8) and self(:,i) (700:8)
   remark #17106: parallel dependence: assumed FLOW dependence between self(:,i) (700:8) and self (700:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between self (700:8) and self(:,i) (700:8)
   remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (700:8) and self (700:8)

   LOOP BEGIN at comm_map_mod.f90(700,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between self (700:8) and self(:,i) (700:8)
      remark #17106: parallel dependence: assumed FLOW dependence between self(:,i) (700:8) and self (700:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between self (700:8) and self(:,i) (700:8)
      remark #15346: vector dependence: assumed FLOW dependence between self(:,i) (700:8) and self (700:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(700,8)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(675,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(676,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(675,56):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(667,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_readhdf_] comm_map_mod.f90:667

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9]
        
    Routine temporaries
        Total         :     498
            Global    :     105
            Local     :     393
        Regenerable   :      61
        Spilled       :      35
        
    Routine stack
        Variables     :     368 bytes*
            Reads     :      29 [5.65e+01 ~ 3.6%]
            Writes    :      61 [5.53e+01 ~ 3.5%]
        Spills        :     240 bytes*
            Reads     :      39 [1.26e+02 ~ 8.0%]
            Writes    :      30 [8.12e+01 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::UDGRADE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::UDGRADE) [19/31=61.3%] comm_map_mod.f90(794,14)
  -> EXTERN: (803,8) for_realloc_lhs
  -> EXTERN: (803,8) for_dealloc_allocatable
  -> EXTERN: (807,5) for_alloc_allocatable
  -> EXTERN: (807,5) for_check_mult_overflow64
  -> EXTERN: (808,5) for_alloc_allocatable
  -> EXTERN: (808,5) for_check_mult_overflow64
  -> EXTERN: (809,5) for_alloc_allocatable
  -> EXTERN: (809,5) for_check_mult_overflow64
  -> EXTERN: (811,5) __resetsp_inlined
  -> EXTERN: (811,5) _alloca
  -> EXTERN: (811,5) __getsp_inlined
  -> EXTERN: (812,10) UDGRADE_NR^UDGRADE_RING_ND_D
  -> EXTERN: (813,10) mpi_allreduce_
  -> EXTERN: (814,5) __resetsp_inlined
  -> EXTERN: (814,5) for_realloc_lhs
  -> EXTERN: (814,5) _alloca
  -> EXTERN: (814,5) __getsp_inlined
  -> EXTERN: (815,5) for_dealloc_allocatable
  -> EXTERN: (815,5) for_dealloc_allocatable
  -> EXTERN: (815,5) for_dealloc_allocatable
  -> EXTERN: (817,3) for_dealloc_allocatable
  -> EXTERN: (817,3) for_dealloc_allocatable
  -> EXTERN: (817,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(803,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (803:8) and at (803:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (803:8) and at (803:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(803,8)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (803:8) and at (803:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (803:8) and at (803:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(803,8)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(803,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (803:8) has aligned access
         remark #15388: vectorization support: reference self(:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(803,8)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(803,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(810,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(810,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between M_IN(:,:) (810:5) and M_IN(:,:) (810:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between M_IN(:,:) (810:5) and M_IN(:,:) (810:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_map_mod.f90(810,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference M_IN(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(810,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(811,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(811,5)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(811,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between M_IN(self(:),:) (811:5) and M_IN(self(:),:) (811:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between M_IN(self(:),:) (811:5) and M_IN(self(:),:) (811:5)
      remark #15389: vectorization support: reference self(:) has unaligned access
      remark #15388: vectorization support: reference self(:,:) has aligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <M_IN(self(:),:)>, part of index is read from memory
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15463: unmasked indexed (or scatter) stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.180 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(811,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(814,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (814:5) and at (814:5)
   remark #17106: parallel dependence: assumed FLOW dependence between at (814:5) and at (814:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (814:5) and at (814:5)
   remark #15346: vector dependence: assumed FLOW dependence between at (814:5) and at (814:5)

   LOOP BEGIN at comm_map_mod.f90(814,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (814:5) and at (814:5)
      remark #17106: parallel dependence: assumed FLOW dependence between at (814:5) and at (814:5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (814:5) and at (814:5)
      remark #15346: vector dependence: assumed FLOW dependence between at (814:5) and at (814:5)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(814,5)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(800,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(800,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(800,59):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(803,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(803,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(803,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_map_mod.f90(810,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(810,5):remark #34026: call to memset implemented as a call to optimized library version
comm_map_mod.f90(794,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_udgrade_] comm_map_mod.f90:794

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     633
            Global    :     108
            Local     :     525
        Regenerable   :      58
        Spilled       :      26
        
    Routine stack
        Variables     :     416 bytes*
            Reads     :      40 [2.66e+00 ~ 0.5%]
            Writes    :      75 [2.08e+01 ~ 3.9%]
        Spills        :     168 bytes*
            Reads     :      36 [1.32e+01 ~ 2.5%]
            Writes    :      28 [3.78e+00 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::SMOOTH

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::SMOOTH) [20/31=64.5%] comm_map_mod.f90(820,14)
  -> INDIRECT-: (831,10)  (*((P64*) *((P64*) (comm_map_mod_mp_smooth_$SELF_V$2f3a.0.20 + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (833,16) exp
  -> INDIRECT-: (835,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_smooth_$SELF_V$2f3a.0.20->QNCAtemplate.dim31_dv_template.addr_a0_V$2f8f.0.20)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (837,16) exp
  -> INDIRECT-: (842,10)  (*((P64*) *((P64*) (comm_map_mod_mp_smooth_$SELF_V$2f3a.0.20 + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (844,3) for_dealloc_allocatable
  -> EXTERN: (844,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(834,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Predicate Optimized v1>
      remark #17108: loop was not parallelized: insufficient computational work
      remark #25423: Condition at line 838 hoisted out of this loop
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (839:11)>, stride is unknown to compiler   [ comm_map_mod.f90(839,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (839:27)>, stride is unknown to compiler   [ comm_map_mod.f90(839,27) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.009
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 125 
      remark #15477: vector cost: 66.000 
      remark #15478: estimated potential speedup: 1.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Remainder loop for vectorization, Predicate Optimized v1>
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.114
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Remainder loop for vectorization, Predicate Optimized v1>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Predicate Optimized v2>
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (839:11)>, stride is unknown to compiler   [ comm_map_mod.f90(839,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (839:27)>, stride is unknown to compiler   [ comm_map_mod.f90(839,27) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.013
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 131 
      remark #15477: vector cost: 69.000 
      remark #15478: estimated potential speedup: 1.870 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Remainder loop for vectorization, Predicate Optimized v2>
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.123
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(837,25)
   <Remainder loop for vectorization, Predicate Optimized v2>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(827,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(827,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(820,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_smooth_] comm_map_mod.f90:820

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     334
            Global    :      78
            Local     :     256
        Regenerable   :      20
        Spilled       :      29
        
    Routine stack
        Variables     :     204 bytes*
            Reads     :       6 [7.45e+00 ~ 0.3%]
            Writes    :      18 [1.54e+01 ~ 0.7%]
        Spills        :     224 bytes*
            Reads     :      68 [1.63e+02 ~ 7.3%]
            Writes    :      42 [6.58e+01 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::ALM_EQUAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::ALM_EQUAL) [21/31=67.7%] comm_map_mod.f90(850,14)
  -> INDIRECT-: (859,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_alm_equal_$MAP_V$2f9d.0.21->QNCAtemplate.dim31_dv_template.addr_a0_V$2fb7.0.21)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (860,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_alm_equal_$SELF_V$2f9c.0.21->QNCAtemplate.dim31_dv_template.addr_a0_V$2fb7.0.21)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(857,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(857,5)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (857:5) and at (857:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (857:5) and at (857:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_map_mod.f90(857,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (857:5) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(857,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(858,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at comm_map_mod.f90(863,26)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (863:11)>, stride is unknown to compiler   [ comm_map_mod.f90(863,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <self(j,q)>, stride is unknown to compiler   [ comm_map_mod.f90(863,11) ]
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(863,26)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(857,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_map_mod.f90(857,5):remark #34026: call to memset implemented as a call to optimized library version
comm_map_mod.f90(850,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_alm_equal_] comm_map_mod.f90:850

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     122
            Global    :      53
            Local     :      69
        Regenerable   :      13
        Spilled       :      27
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [1.09e+01 ~ 0.9%]
            Writes    :       2 [5.44e+00 ~ 0.5%]
        Spills        :     176 bytes*
            Reads     :      28 [1.02e+02 ~ 8.9%]
            Writes    :      23 [7.53e+01 ~ 6.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::ADD_ALM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::ADD_ALM) [22/31=71.0%] comm_map_mod.f90(869,14)
  -> INDIRECT-: (878,13)  (*((P64*) *((P64*) (comm_map_mod_mp_add_alm_$INFO_V$2fe6.0.22 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (879,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_add_alm_$SELF_V$2fc6.0.22->QNCAtemplate.dim31_dv_template.addr_a0_V$2ffe.0.22)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(877,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at comm_map_mod.f90(882,27)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (882:11)>, stride is unknown to compiler   [ comm_map_mod.f90(882,11) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (882:27)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <alm(i,q)>, stride is unknown to compiler   [ comm_map_mod.f90(882,43) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15452: unmasked strided loads: 2 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 6.000 
      remark #15478: estimated potential speedup: 0.990 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(882,27)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(869,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_add_alm_] comm_map_mod.f90:869

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      85
            Global    :      40
            Local     :      45
        Regenerable   :      10
        Spilled       :      21
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [1.09e+01 ~ 1.7%]
            Writes    :       2 [5.44e+00 ~ 0.9%]
        Spills        :     160 bytes*
            Reads     :      23 [8.95e+01 ~ 14.3%]
            Writes    :      20 [3.71e+01 ~ 5.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::SET_ALM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::SET_ALM) [23/31=74.2%] comm_map_mod.f90(888,14)
  -> INDIRECT-: (897,13)  (*((P64*) *((P64*) (comm_map_mod_mp_set_alm_$INFO_V$302b.0.23 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (898,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_set_alm_$SELF_V$300b.0.23->QNCAtemplate.dim31_dv_template.addr_a0_V$3043.0.23)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(896,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at comm_map_mod.f90(901,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <at (901:11)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <alm(i,q)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 4.000 
      remark #15478: estimated potential speedup: 1.000 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(901,11)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(888,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_set_alm_] comm_map_mod.f90:888

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :      82
            Global    :      40
            Local     :      42
        Regenerable   :      10
        Spilled       :      22
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [1.09e+01 ~ 1.8%]
            Writes    :       2 [5.44e+00 ~ 0.9%]
        Spills        :     168 bytes*
            Reads     :      24 [9.40e+01 ~ 15.5%]
            Writes    :      21 [4.15e+01 ~ 6.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::LM2I

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::LM2I) [24/31=77.4%] comm_map_mod.f90(907,14)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(907,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_lm2i_] comm_map_mod.f90:907

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r10]
        
    Routine temporaries
        Total         :      37
            Global    :      12
            Local     :      25
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::I2LM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::I2LM) [25/31=80.6%] comm_map_mod.f90(927,14)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(927,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_i2lm_] comm_map_mod.f90:927

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      28
            Global    :      10
            Local     :      18
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::NEXT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::NEXT) [26/31=83.9%] comm_map_mod.f90(944,12)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(947,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(947,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(947,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(944,12):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_next_] comm_map_mod.f90:944

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm2]
        
    Routine temporaries
        Total         :      29
            Global    :       7
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::PREV

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::PREV) [27/31=87.1%] comm_map_mod.f90(950,12)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(953,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(953,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_map_mod.f90(953,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_map_mod.f90(950,12):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_prev_] comm_map_mod.f90:950

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm2]
        
    Routine temporaries
        Total         :      29
            Global    :       7
            Local     :      22
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::SETNEXT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::SETNEXT) [28/31=90.3%] comm_map_mod.f90(956,14)


    Report from: Code generation optimizations [cg]

comm_map_mod.f90(956,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_setnext_] comm_map_mod.f90:956

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi r8-r11]
        
    Routine temporaries
        Total         :      27
            Global    :       0
            Local     :      27
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::ADD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::ADD) [29/31=93.5%] comm_map_mod.f90(962,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(969,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(969,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(969,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(971,11):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_map_mod.f90(971,11):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_map_mod.f90(962,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_add_] comm_map_mod.f90:962

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm2]
        
    Routine temporaries
        Total         :      84
            Global    :      11
            Local     :      73
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       3 [9.52e+00 ~ 4.5%]
            Writes    :      26 [6.19e+01 ~ 29.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::GETSIGMAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::GETSIGMAL) [30/31=96.8%] comm_map_mod.f90(982,14)
  -> INDIRECT-: (994,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_getsigmal_$SELF_V$3120.0.30->QNCAtemplate.dim31_dv_template.addr_a0_V$315c.0.30)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (1004,10) __resetsp_inlined
  -> EXTERN: (1004,10) mpi_allreduce_
  -> EXTERN: (1004,10) __getsp_inlined
  -> EXTERN: (1004,38) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(992,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(992,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(992,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(993,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(998,29)
   <Multiversioned v1>
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (998:14) and sigma_l(l,k) (998:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (998:14) and sigma_l(l,k) (998:14)
      remark #25261: Invariant Condition eliminated(Proven True) at line 997
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #25426: Loop Distributed (2 way) 
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 3.000
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.250 
         remark #15478: estimated potential speedup: 3.840 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Distributed chunk2>
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(998,14) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(998,29) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <lmax(ind,j)>, stride is unknown to compiler   [ comm_map_mod.f90(998,60) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.167
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15452: unmasked strided loads: 2 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 10.500 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(998,29)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (998:14) and sigma_l(l,k) (998:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (998:14) and sigma_l(l,k) (998:14)
      remark #25261: Invariant Condition eliminated(Proven True) at line 997
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Distributed chunk1>
         remark #17108: loop was not parallelized: insufficient computational work
         remark #25426: Loop Distributed (2 way) 
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 3.000
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 1 
         remark #15477: vector cost: 0.250 
         remark #15478: estimated potential speedup: 3.840 
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Distributed chunk2>
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(998,14) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(998,29) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <lmax(ind,j)>, stride is unknown to compiler   [ comm_map_mod.f90(998,60) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.167
         remark #15301: PARTIAL LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15452: unmasked strided loads: 2 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 14 
         remark #15477: vector cost: 10.500 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(997,11)
      <Remainder loop for vectorization, Distributed chunk2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1004,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1004:38) has aligned access
      remark #15388: vectorization support: reference sigma_l(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1004,38)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1004:38) has aligned access
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1004,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference sigma_l(:,:) has aligned access
      remark #15388: vectorization support: reference at (1004:38) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1004,38)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1004:38) has aligned access
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1004,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1007,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_map_mod.f90(1009,5) ]
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1008,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.038
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 20.000 
      remark #15478: estimated potential speedup: 1.580 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1008,8)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1008,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(982,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_getsigmal_] comm_map_mod.f90:982

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     446
            Global    :     170
            Local     :     276
        Regenerable   :      23
        Spilled       :      57
        
    Routine stack
        Variables     :      20 bytes*
            Reads     :       2 [5.44e+00 ~ 0.0%]
            Writes    :       6 [8.42e+00 ~ 0.0%]
        Spills        :     416 bytes*
            Reads     :     104 [1.23e+05 ~ 5.2%]
            Writes    :      75 [9.05e+04 ~ 3.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MAP_MOD::GETCROSSSIGMAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MAP_MOD::GETCROSSSIGMAL) [31/31=100.0%] comm_map_mod.f90(1013,14)
  -> INDIRECT-: (1025,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_getcrosssigmal_$SELF_V$3178.0.31->QNCAtemplate.dim31_dv_template.addr_a0_V$31b6.0.31)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (1026,13)  (*((P64*) *((P64*) (&(comm_map_mod_mp_getcrosssigmal_$MAP2_V$3179.0.31->QNCAtemplate.dim31_dv_template.addr_a0_V$31b6.0.31)->COMM_MAP_MOD$.btCOMM_MAP$INFO$19_V$65f + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (1036,10) __resetsp_inlined
  -> EXTERN: (1036,10) mpi_allreduce_
  -> EXTERN: (1036,10) __getsp_inlined
  -> EXTERN: (1036,38) _alloca


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_map_mod.f90(1023,5)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1023,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1023,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1030,60)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1030,60)
   <Multiversioned v1>
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25452: Original Order found to be proper, but by a close margin
      remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (1030:14) and sigma_l(l,k) (1030:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (1030:14) and sigma_l(l,k) (1030:14)
      remark #25261: Invariant Condition eliminated(Proven True) at line 1029
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(1029,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,14) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,29) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <map2(ind2,j)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,60) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.125
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15452: unmasked strided loads: 2 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 8.000 
         remark #15478: estimated potential speedup: 1.240 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(1029,11)
      <Remainder loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1030,60)
   <Multiversioned v2>
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (1030:14) and sigma_l(l,k) (1030:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between sigma_l(l,k) (1030:14) and sigma_l(l,k) (1030:14)
      remark #25261: Invariant Condition eliminated(Proven True) at line 1029
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_map_mod.f90(1029,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,14) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,k)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,29) ]
         remark #15328: vectorization support: non-unit strided load was emulated for the variable <map2(ind2,j)>, stride is unknown to compiler   [ comm_map_mod.f90(1030,60) ]
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.125
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15452: unmasked strided loads: 2 
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10 
         remark #15477: vector cost: 8.000 
         remark #15478: estimated potential speedup: 1.240 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_map_mod.f90(1029,11)
      <Remainder loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1036,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1036:38) has aligned access
      remark #15388: vectorization support: reference sigma_l(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1036,38)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1036:38) has aligned access
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 2.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.570 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1036,38)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference sigma_l(:,:) has aligned access
      remark #15388: vectorization support: reference at (1036:38) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.550 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1036,38)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (1036:38) has aligned access
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(:,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.310 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1036,38)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_map_mod.f90(1039,5)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_map_mod.f90(1041,5) ]
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_map_mod.f90(1040,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sigma_l(l,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.038
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 32 
      remark #15477: vector cost: 20.000 
      remark #15478: estimated potential speedup: 1.580 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1040,8)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.400
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_map_mod.f90(1040,8)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_map_mod.f90(1013,14):remark #34051: REGISTER ALLOCATION : [comm_map_mod_mp_getcrosssigmal_] comm_map_mod.f90:1013

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     448
            Global    :     179
            Local     :     269
        Regenerable   :      27
        Spilled       :      66
        
    Routine stack
        Variables     :      24 bytes*
            Reads     :       3 [5.44e+00 ~ 0.0%]
            Writes    :       6 [8.42e+00 ~ 0.0%]
        Spills        :     464 bytes*
            Reads     :     116 [1.61e+05 ~ 6.8%]
            Writes    :      79 [9.82e+04 ~ 4.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

<2> Inlining this subprogram at this call site would increase the size of the 
    caller more than is currently acceptable. Use the option 
    -inline-max-total-size to increase the size that all subprograms can 
    grow through inlining, add "!DIR$ATTRIBUTES OPTIMIZATION_PARAMETER:
    "INLINE_MAX_PER_ROUTINE"" to the caller, add "!DIR$ATTRIBUTES FORCEINLINE"
    to the declaration of the called subprogram, or add "!DIR$ FORCEINLINE" 
    before the call site.

<3> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

