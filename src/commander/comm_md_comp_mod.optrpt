Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_md_comp_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_md_comp_mod._) [1/4=25.0%] comm_md_comp_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_md_comp_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_md_comp_mod._] comm_md_comp_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MD_COMP_MOD::EVALSED

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MD_COMP_MOD::EVALSED) [2/4=50.0%] comm_md_comp_mod.f90(177,12)


    Report from: Code generation optimizations [cg]

comm_md_comp_mod.f90(177,12):remark #34051: REGISTER ALLOCATION : [comm_md_comp_mod_mp_evalsed_] comm_md_comp_mod.f90:177

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    5[ rdx rcx rsi rdi zmm0]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MD_COMP_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MD_COMP_MOD::CONSTRUCTOR) [3/4=75.0%] comm_md_comp_mod.f90(31,12)
  -> EXTERN: (47,5) for_allocate
  -> EXTERN: (52,5) memcpy
  -> EXTERN: (53,5) memcpy
  -> EXTERN: (54,5) memcpy
  -> EXTERN: (56,5) memcpy
  -> EXTERN: (66,18) memmove
  -> EXTERN: (66,18) _alloca
  -> EXTERN: (66,18) for_trim
  -> EXTERN: (67,11) for_cpstr
  -> EXTERN: (69,11) for_cpstr
  -> EXTERN: (71,11) for_cpstr
  -> EXTERN: (73,11) for_cpstr
  -> EXTERN: (76,13) __resetsp_inlined
  -> EXTERN: (76,13) __resetsp_inlined
  -> EXTERN: (76,13) REPORT_ERROR
  -> EXTERN: (76,13) __getsp_inlined
  -> EXTERN: (76,13) __getsp_inlined
  -> EXTERN: (76,47) for_concat
  -> EXTERN: (76,47) _alloca
  -> EXTERN: (76,50) for_trim
  -> EXTERN: (85,5) for_cpystr
  -> EXTERN: (89,22) COMM_MAP_MOD^CONSTRUCTOR_MAPINFO
  -> EXTERN: (93,10) ADD_TO_NPRE
  -> EXTERN: (96,24) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (97,24) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> INDIRECT-: (100,13)  (*((P64*) *((P64*) (&((comm_md_comp_mod_mp_constructor_$CONSTRUCTOR_V$28d0.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$28f3.0.2)->COMM_MD_COMP_MOD$.btCOMM_MD_COMP$COMM_DIFFUSE_COMP$43_V$1074)->COMM_MAP$INFO$13_V$6d1 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (121,5) for_alloc_allocatable
  -> EXTERN: (121,5) for_check_mult_overflow64
  -> EXTERN: (121,5) for_alloc_allocatable
  -> EXTERN: (121,5) for_check_mult_overflow64
  -> EXTERN: (121,5) for_alloc_allocatable
  -> EXTERN: (121,5) for_check_mult_overflow64
  -> EXTERN: (124,24) COMM_MAP_MOD^CONSTRUCTOR_MAPINFO
  -> EXTERN: (126,38) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (140,26) COMM_B_BL_MOD^CONSTRUCTOR
  -> EXTERN: (143,5) for_allocate
  -> EXTERN: (144,5) for_cpystr
  -> EXTERN: (146,5) for_concat
  -> EXTERN: (146,36) for_trim
  -> EXTERN: (150,5) for_cpystr
  -> EXTERN: (151,5) for_alloc_allocatable
  -> EXTERN: (151,5) for_alloc_allocatable
  -> EXTERN: (152,5) for_alloc_allocatable
  -> EXTERN: (152,5) for_alloc_allocatable
  -> EXTERN: (164,5) for_alloc_allocatable
  -> EXTERN: (164,5) for_check_mult_overflow64
  -> EXTERN: (167,37) COMM_F_LINE_MOD^CONSTRUCTOR
  -> EXTERN: (169,37) COMM_F_LINE_MOD^CONSTRUCTOR


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_md_comp_mod.f90(99,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at comm_md_comp_mod.f90(132,11)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_md_comp_mod.f90(128,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at comm_md_comp_mod.f90(128,11)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at comm_md_comp_mod.f90(129,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at comm_md_comp_mod.f90(129,11)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at comm_md_comp_mod.f90(130,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <constructor(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.083
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_md_comp_mod.f90(130,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_md_comp_mod.f90(135,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <constructor(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_md_comp_mod.f90(135,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_md_comp_mod.f90(155,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between constructor (155:5) and constructor(1,1,:) (155:5)
   remark #17106: parallel dependence: assumed FLOW dependence between constructor(1,1,:) (155:5) and constructor (155:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between constructor (155:5) and constructor(1,1,:) (155:5)
   remark #15346: vector dependence: assumed FLOW dependence between constructor(1,1,:) (155:5) and constructor (155:5)
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_md_comp_mod.f90(156,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between constructor (156:5) and constructor(1,1,:) (156:5)
   remark #17106: parallel dependence: assumed FLOW dependence between constructor(1,1,:) (156:5) and constructor (156:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between constructor (156:5) and constructor(1,1,:) (156:5)
   remark #15346: vector dependence: assumed FLOW dependence between constructor(1,1,:) (156:5) and constructor (156:5)
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_md_comp_mod.f90(165,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

comm_md_comp_mod.f90(47,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_md_comp_mod.f90(47,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_md_comp_mod.f90(52,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_md_comp_mod.f90(52,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_md_comp_mod.f90(52,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_md_comp_mod.f90(53,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_md_comp_mod.f90(53,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_md_comp_mod.f90(53,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_md_comp_mod.f90(54,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_md_comp_mod.f90(54,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_md_comp_mod.f90(54,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_md_comp_mod.f90(56,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_md_comp_mod.f90(56,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_md_comp_mod.f90(56,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_md_comp_mod.f90(66,18):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_md_comp_mod.f90(66,18):remark #34026: call to memmove implemented as a call to optimized library version
comm_md_comp_mod.f90(143,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_md_comp_mod.f90(143,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_md_comp_mod.f90(145,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_md_comp_mod.f90(145,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_md_comp_mod.f90(145,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_md_comp_mod.f90(31,12):remark #34051: REGISTER ALLOCATION : [comm_md_comp_mod_mp_constructor_] comm_md_comp_mod.f90:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :    1706
            Global    :     154
            Local     :    1552
        Regenerable   :     171
        Spilled       :      28
        
    Routine stack
        Variables     :    3052 bytes*
            Reads     :      89 [1.75e+02 ~ 3.0%]
            Writes    :     136 [2.37e+02 ~ 4.1%]
        Spills        :     184 bytes*
            Reads     :      33 [4.43e+01 ~ 0.8%]
            Writes    :      24 [2.91e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_MD_COMP_MOD::INITIALIZE_MD_COMPS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_MD_COMP_MOD::INITIALIZE_MD_COMPS) [4/4=100.0%] comm_md_comp_mod.f90(190,12)
  -> EXTERN: (203,13) GETLUN
  -> EXTERN: (204,5) for_concat
  -> EXTERN: (204,11) for_trim
  -> EXTERN: (207,5) __resetsp_inlined
  -> EXTERN: (207,5) for_open
  -> EXTERN: (207,5) __getsp_inlined
  -> EXTERN: (207,21) for_trim
  -> EXTERN: (207,30) for_concat
  -> EXTERN: (207,30) _alloca
  -> EXTERN: (207,32) for_trim
  -> EXTERN: (209,8) for_read_seq_fmt
  -> EXTERN: (210,8) for_cpystr
  -> EXTERN: (210,15) for_trim
  -> EXTERN: (210,20) for_adjustl
  -> EXTERN: (212,8) for_read_int_lis_xmit
  -> EXTERN: (212,8) for_read_int_lis_xmit
  -> EXTERN: (212,8) for_read_int_lis_xmit
  -> EXTERN: (212,8) for_read_int_lis
  -> EXTERN: (214,15) for_trim
  -> EXTERN: (214,27) for_cpstr
  -> EXTERN: (214,30) for_trim
  -> (219,34) COMM_MD_COMP_MOD::CONSTRUCTOR (isz = 4249) (sz = 4272)
     [[ Inlining would exceed -inline-max-size value (4272>253) <2>]]
  -> (221,16) COMM_MD_COMP_MOD::CONSTRUCTOR (isz = 4249) (sz = 4272)
     [[ Inlining would exceed -inline-max-size value (4272>253) <2>]]
  -> INDIRECT-: (222,16)  (*((P64*) *((P64*) (comm_md_comp_mod_mp_initialize_md_comps_$INITIALIZE_MD_COMPS_V$3664.0.4 + 56(SI64)))))[4(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (226,11) for_close
  -> EXTERN: (229,8) for_write_seq_fmt
  -> EXTERN: (229,8) for_write_seq_fmt_xmit


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_md_comp_mod.f90(219,34)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at comm_md_comp_mod.f90(213,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_md_comp_mod.f90(190,12):remark #34051: REGISTER ALLOCATION : [comm_md_comp_mod_mp_initialize_md_comps_] comm_md_comp_mod.f90:190

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     252
            Global    :      59
            Local     :     193
        Regenerable   :     137
        Spilled       :      13
        
    Routine stack
        Variables     :    7924 bytes*
            Reads     :      28 [2.74e+01 ~ 4.0%]
            Writes    :      70 [7.66e+01 ~ 11.3%]
        Spills        :      64 bytes*
            Reads     :      15 [1.19e+01 ~ 1.8%]
            Writes    :       8 [9.92e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

<2> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

