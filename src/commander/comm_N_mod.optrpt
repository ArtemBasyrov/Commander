Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_n_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_n_mod._) [1/2=50.0%] comm_N_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_N_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_n_mod._] comm_N_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_N_MOD::COMPUTE_INVN_LM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_N_MOD::COMPUTE_INVN_LM) [2/2=100.0%] comm_N_mod.f90(70,14)
  -> EXTERN: (70,14) _alloca
  -> EXTERN: (70,14) __getsp_inlined
  -> EXTERN: (84,12) GETLUN
  -> EXTERN: (85,13) __resetsp_inlined
  -> EXTERN: (85,13) for_inquire
  -> EXTERN: (85,13) __getsp_inlined
  -> EXTERN: (85,18) for_trim
  -> EXTERN: (85,23) _alloca
  -> EXTERN: (87,8) for_open
  -> EXTERN: (87,8) __resetsp_inlined
  -> EXTERN: (87,8) __getsp_inlined
  -> EXTERN: (87,24) for_trim
  -> EXTERN: (87,29) _alloca
  -> EXTERN: (88,8) for_read_seq
  -> EXTERN: (94,14) for_close
  -> EXTERN: (96,10) mpi_allreduce_
  -> EXTERN: (100,8) for_open
  -> EXTERN: (100,8) __resetsp_inlined
  -> EXTERN: (100,8) __getsp_inlined
  -> EXTERN: (100,24) for_trim
  -> EXTERN: (100,29) _alloca
  -> EXTERN: (101,8) for_read_seq
  -> EXTERN: (102,8) for_read_seq
  -> EXTERN: (103,14) for_close
  -> EXTERN: (111,5) for_alloc_allocatable
  -> EXTERN: (111,5) for_check_mult_overflow64
  -> EXTERN: (112,5) for_alloc_allocatable
  -> EXTERN: (112,5) for_check_mult_overflow64
  -> INDIRECT-: (113,10)  (*((P64*) *((P64*) (comm_n_mod_mp_compute_invn_lm_$INVN_DIAG_V$de7.0.2 + 56(SI64)))))[8(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (120,10) mpi_bcast_
  -> EXTERN: (122,10) wall_time_
  -> EXTERN: (124,5) for_alloc_allocatable
  -> EXTERN: (124,5) for_check_mult_overflow64
  -> EXTERN: (125,5) for_alloc_allocatable
  -> EXTERN: (125,5) for_check_mult_overflow64
  -> EXTERN: (131,16) drc3jj_
  -> EXTERN: (133,16) drc3jj_
  -> EXTERN: (137,22) f_ldnint_val
  -> EXTERN: (138,19) f_ldnint_val
  -> EXTERN: (141,58) f_ldnint_val
  -> INDIRECT-: (147,16)  (*((P64*) *((P64*) (&(comm_n_mod_mp_compute_invn_lm_$INVN_DIAG_V$de7.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$e9f.0.2)->COMM_MAP$INFO$11_V$5f6 + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (157,5) for_dealloc_allocatable
  -> EXTERN: (157,5) for_dealloc_allocatable
  -> EXTERN: (159,10) wall_time_
  -> EXTERN: (161,5) for_realloc_lhs
  -> EXTERN: (161,5) for_dealloc_allocatable
  -> EXTERN: (166,8) for_open
  -> EXTERN: (166,8) __resetsp_inlined
  -> EXTERN: (166,8) __getsp_inlined
  -> EXTERN: (166,24) for_trim
  -> EXTERN: (166,29) _alloca
  -> EXTERN: (167,8) for_write_seq
  -> EXTERN: (168,8) for_write_seq
  -> EXTERN: (169,14) for_close
  -> EXTERN: (172,5) for_dealloc_allocatable
  -> EXTERN: (172,5) for_dealloc_allocatable
  -> EXTERN: (174,3) __resetsp_inlined
  -> EXTERN: (174,3) for_dealloc_allocatable
  -> EXTERN: (174,3) for_dealloc_allocatable
  -> EXTERN: (174,3) for_dealloc_allocatable
  -> EXTERN: (174,3) for_dealloc_allocatable


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at comm_N_mod.f90(123,11)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_N_mod.f90(90,23)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(90,23)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(90,23)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (90:23) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.403
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(90,23)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_mod.f90(92,19)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(92,19)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(92,19)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (92:19) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.403
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 1.090 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(92,19)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_mod.f90(118,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between A_L0(:,:) (118:8) and A_L0(:,:) (118:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between A_L0(:,:) (118:8) and A_L0(:,:) (118:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(118,8)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between A_L0(:,:) (118:8) and A_L0(:,:) (118:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between A_L0(:,:) (118:8) and A_L0(:,:) (118:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_N_mod.f90(118,8)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(118,8)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference A_L0(:,:) has aligned access
         remark #15388: vectorization support: reference invn_diag(:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(118,8)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(118,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_N_mod.f90(161,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between invn_diag(:,:) (161:5) and invn_diag(:,:) (161:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between invn_diag(:,:) (161:5) and invn_diag(:,:) (161:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(161,5)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between invn_diag(:,:) (161:5) and invn_diag(:,:) (161:5)
      remark #17106: parallel dependence: assumed OUTPUT dependence between invn_diag(:,:) (161:5) and invn_diag(:,:) (161:5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_N_mod.f90(161,5)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(161,5)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference invn_diag(:,:) has aligned access
         remark #15388: vectorization support: reference N_LM(:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 1.290 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(161,5)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_N_mod.f90(161,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_N_mod.f90(167,20)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(167,20)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(167,20)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (167:20) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.139
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 10 
      remark #15477: vector cost: 9.000 
      remark #15478: estimated potential speedup: 1.100 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_N_mod.f90(167,20)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_N_mod.f90(126,11)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_N_mod.f90(127,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between invn_diag (128:8) and twolmaxp2 (133:16)
      remark #17106: parallel dependence: assumed FLOW dependence between twolmaxp2 (133:16) and invn_diag (128:8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_N_mod.f90(141,14)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at comm_N_mod.f90(136,11)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 6 
            remark #15477: vector cost: 3.000 
            remark #15478: estimated potential speedup: 1.970 
            remark #15488: --- end vector cost summary ---
            remark #25439: unrolled with remainder by 2  
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(136,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(137,11)
            remark #17104: loop was not parallelized: existence of parallel dependence
            remark #17106: parallel dependence: assumed OUTPUT dependence between at (141:14) and at (141:14)
            remark #17106: parallel dependence: assumed OUTPUT dependence between at (141:14) and at (141:14)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at comm_N_mod.f90(141,14)
            <Peeled loop for vectorization>
               remark #25015: Estimate of max trip count of loop=1
            LOOP END

            LOOP BEGIN at comm_N_mod.f90(141,14)
               remark #17108: loop was not parallelized: insufficient computational work
               remark #15388: vectorization support: reference at (141:14) has aligned access
               remark #15388: vectorization support: reference at (141:14) has aligned access
               remark #15328: vectorization support: non-unit strided load was emulated for the variable <A_L0(lp,:)>, stride is unknown to compiler
               remark #15305: vectorization support: vector length 2
               remark #15399: vectorization support: unroll factor set to 2
               remark #15309: vectorization support: normalized vectorization overhead 0.353
               remark #15300: LOOP WAS VECTORIZED
               remark #15442: entire loop may be executed in remainder
               remark #15448: unmasked aligned unit stride loads: 1 
               remark #15449: unmasked aligned unit stride stores: 1 
               remark #15452: unmasked strided loads: 1 
               remark #15475: --- begin vector cost summary ---
               remark #15476: scalar cost: 125 
               remark #15477: vector cost: 8.500 
               remark #15478: estimated potential speedup: 14.630 
               remark #15488: --- end vector cost summary ---
            LOOP END

            LOOP BEGIN at comm_N_mod.f90(141,14)
            <Remainder loop for vectorization>
            LOOP END
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(144,11)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 135 
            remark #15477: vector cost: 71.000 
            remark #15478: estimated potential speedup: 1.900 
            remark #15488: --- end vector cost summary ---
            remark #25439: unrolled with remainder by 4  
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(144,11)
         <Remainder>
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(145,28)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15516: loop was not vectorized: cost model has chosen vectorlength of 1 -- maybe possible to override via pragma/directive with vectorlength clause
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 9 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 2.230 
            remark #15488: --- end vector cost summary ---
            remark #25439: unrolled with remainder by 8  
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(149,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <N_LM(pos,:)>, stride is unknown to compiler
            remark #15305: vectorization support: vector length 2
            remark #15300: LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 1 
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 1.250 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(149,14)
         <Remainder loop for vectorization>
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(151,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <N_LM(pos,:)>, stride is unknown to compiler
            remark #15305: vectorization support: vector length 2
            remark #15300: LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 1 
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 1.250 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(151,14)
         <Remainder loop for vectorization>
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(152,14)
            remark #17108: loop was not parallelized: insufficient computational work
            remark #15329: vectorization support: non-unit strided store was emulated for the variable <N_LM(pos+1,:)>, stride is unknown to compiler
            remark #15305: vectorization support: vector length 2
            remark #15300: LOOP WAS VECTORIZED
            remark #15452: unmasked strided loads: 1 
            remark #15453: unmasked strided stores: 1 
            remark #15475: --- begin vector cost summary ---
            remark #15476: scalar cost: 5 
            remark #15477: vector cost: 4.000 
            remark #15478: estimated potential speedup: 1.250 
            remark #15488: --- end vector cost summary ---
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(152,14)
         <Remainder loop for vectorization>
         LOOP END

         LOOP BEGIN at comm_N_mod.f90(145,28)
         <Remainder>
            remark #25436: completely unrolled by 7  
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_N_mod.f90(81,52):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_N_mod.f90(81,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_N_mod.f90(80,62):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_N_mod.f90(80,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_N_mod.f90(118,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_N_mod.f90(118,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_N_mod.f90(118,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_N_mod.f90(161,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_N_mod.f90(161,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_N_mod.f90(161,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_N_mod.f90(70,14):remark #34051: REGISTER ALLOCATION : [comm_n_mod_mp_compute_invn_lm_] comm_N_mod.f90:70

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :    1463
            Global    :     321
            Local     :    1142
        Regenerable   :     290
        Spilled       :      46
        
    Routine stack
        Variables     :    1100 bytes*
            Reads     :      79 [4.27e+01 ~ 1.5%]
            Writes    :     148 [6.99e+01 ~ 2.4%]
        Spills        :     432 bytes*
            Reads     :     117 [1.09e+02 ~ 3.8%]
            Writes    :      64 [2.31e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

