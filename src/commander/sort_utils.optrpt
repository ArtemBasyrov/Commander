Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: sort_utils._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sort_utils._) [1/22=4.5%] sort_utils.f90(1,8)


    Report from: Code generation optimizations [cg]

sort_utils.f90(1,8):remark #34051: REGISTER ALLOCATION : [sort_utils._] sort_utils.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICKSORT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICKSORT) [2/22=9.1%] sort_utils.f90(20,14)
  -> CP_CLONE (26,10) SORT_UTILS::QUICK_SORT..0 (isz = 353) (sz = 364)
     [[ Inlining would exceed -inline-max-size value (364>230) <1>]]
  -> INLINE: (27,10) SORT_UTILS::INSERTION_SORT (isz = 99) (sz = 106)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(182,5) inlined into sort_utils.f90(27,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(I) (185:8) and numbers(J) (199:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(J) (199:8) and numbers(I) (185:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(I) (185:8) and numbers(J) (199:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(J) (199:8) and numbers(I) (185:8)

   LOOP BEGIN at sort_utils.f90(188,8) inlined into sort_utils.f90(27,10)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(20,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quicksort_] sort_utils.f90:20

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      46
            Global    :      27
            Local     :      19
        Regenerable   :       5
        Spilled       :      12
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.3%]
        Spills        :      80 bytes*
            Reads     :      14 [3.42e+01 ~ 9.4%]
            Writes    :      10 [2.34e+01 ~ 6.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT..0) [3/22=13.6%] sort_utils.f90(30,24)
  CLONED FROM: SORT_UTILS::QUICK_SORT(X,X,1,X)
  -> (42,13) SORT_UTILS::MEDIAN3 (isz = 261) (sz = 274)
     [[ Inlining would exceed -inline-max-size value (274>253) <1>]]
  -> (106,13) SORT_UTILS::QUICK_SORT (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]
  -> (107,13) SORT_UTILS::QUICK_SORT (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(47,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(52,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(65,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(67,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(72,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(30,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_..0] sort_utils.f90:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     111
            Global    :      54
            Local     :      57
        Regenerable   :       6
        Spilled       :      22
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.1%]
            Writes    :       2 [4.40e-01 ~ 0.2%]
        Spills        :     136 bytes*
            Reads     :      34 [9.34e+00 ~ 4.9%]
            Writes    :      27 [1.12e+01 ~ 5.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT) [4/22=18.2%] sort_utils.f90(30,24)
  -> (42,13) SORT_UTILS::MEDIAN3 (isz = 261) (sz = 274)
     [[ Inlining would exceed -inline-max-size value (274>253) <1>]]
  -> (106,13) SORT_UTILS::QUICK_SORT (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]
  -> (107,13) SORT_UTILS::QUICK_SORT (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(47,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(52,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(65,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(67,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(72,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(30,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_] sort_utils.f90:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     116
            Global    :      54
            Local     :      62
        Regenerable   :       6
        Spilled       :      23
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.1%]
            Writes    :       2 [4.40e-01 ~ 0.2%]
        Spills        :     136 bytes*
            Reads     :      35 [8.89e+00 ~ 4.6%]
            Writes    :      28 [1.17e+01 ~ 6.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::MEDIAN3

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::MEDIAN3) [5/22=22.7%] sort_utils.f90(111,14)


    Report from: Code generation optimizations [cg]

sort_utils.f90(111,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_median3_] sort_utils.f90:111

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      54
            Global    :      21
            Local     :      33
        Regenerable   :       0
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::INSERTION_SORT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::INSERTION_SORT) [6/22=27.3%] sort_utils.f90(170,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(182,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(i) (185:8) and numbers(j) (199:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(j) (199:8) and numbers(i) (185:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(i) (185:8) and numbers(j) (199:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(j) (199:8) and numbers(i) (185:8)

   LOOP BEGIN at sort_utils.f90(188,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(170,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_insertion_sort_] sort_utils.f90:170

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      38
            Global    :      26
            Local     :      12
        Regenerable   :       1
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      14 [3.42e+01 ~ 9.6%]
            Writes    :      10 [2.34e+01 ~ 6.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICKSORT_DP_DIST

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICKSORT_DP_DIST) [7/22=31.8%] sort_utils.f90(209,14)
  -> CP_CLONE (214,10) SORT_UTILS::QUICK_SORT_DP_DIST..0 (isz = 353) (sz = 364)
     [[ Inlining would exceed -inline-max-size value (364>230) <1>]]
  -> INLINE: (215,10) SORT_UTILS::INSERTION_SORT_DP_DIST (isz = 99) (sz = 106)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(367,5) inlined into sort_utils.f90(215,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(I) (370:8) and numbers(J) (384:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(J) (384:8) and numbers(I) (370:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(I) (370:8) and numbers(J) (384:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(J) (384:8) and numbers(I) (370:8)

   LOOP BEGIN at sort_utils.f90(373,8) inlined into sort_utils.f90(215,10)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(209,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quicksort_dp_dist_] sort_utils.f90:209

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      46
            Global    :      27
            Local     :      19
        Regenerable   :       5
        Spilled       :      12
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.3%]
        Spills        :      80 bytes*
            Reads     :      14 [3.42e+01 ~ 9.4%]
            Writes    :      10 [2.34e+01 ~ 6.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_DP_DIST..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_DP_DIST..0) [8/22=36.4%] sort_utils.f90(218,24)
  CLONED FROM: SORT_UTILS::QUICK_SORT_DP_DIST(X,X,1,X)
  -> (229,13) SORT_UTILS::MEDIAN3_DP_DIST (isz = 261) (sz = 274)
     [[ Inlining would exceed -inline-max-size value (274>253) <1>]]
  -> (293,13) SORT_UTILS::QUICK_SORT_DP_DIST (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]
  -> (294,13) SORT_UTILS::QUICK_SORT_DP_DIST (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(234,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(239,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(252,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(254,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(259,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(218,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_dp_dist_..0] sort_utils.f90:218

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     111
            Global    :      54
            Local     :      57
        Regenerable   :       6
        Spilled       :      20
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.1%]
            Writes    :       2 [4.40e-01 ~ 0.2%]
        Spills        :     120 bytes*
            Reads     :      33 [6.64e+00 ~ 3.5%]
            Writes    :      22 [1.26e+01 ~ 6.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_DP_DIST

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_DP_DIST) [9/22=40.9%] sort_utils.f90(218,24)
  -> (229,13) SORT_UTILS::MEDIAN3_DP_DIST (isz = 261) (sz = 274)
     [[ Inlining would exceed -inline-max-size value (274>253) <1>]]
  -> (293,13) SORT_UTILS::QUICK_SORT_DP_DIST (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]
  -> (294,13) SORT_UTILS::QUICK_SORT_DP_DIST (isz = 353) (sz = 364)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(234,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(239,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(252,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(254,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(259,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(218,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_dp_dist_] sort_utils.f90:218

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     116
            Global    :      54
            Local     :      62
        Regenerable   :       6
        Spilled       :      20
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       1 [2.20e-01 ~ 0.1%]
            Writes    :       2 [4.40e-01 ~ 0.2%]
        Spills        :     112 bytes*
            Reads     :      34 [6.19e+00 ~ 3.2%]
            Writes    :      23 [1.31e+01 ~ 6.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::MEDIAN3_DP_DIST

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::MEDIAN3_DP_DIST) [10/22=45.5%] sort_utils.f90(298,14)


    Report from: Code generation optimizations [cg]

sort_utils.f90(298,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_median3_dp_dist_] sort_utils.f90:298

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r11 r13-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :      54
            Global    :      21
            Local     :      33
        Regenerable   :       0
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::INSERTION_SORT_DP_DIST

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::INSERTION_SORT_DP_DIST) [11/22=50.0%] sort_utils.f90(357,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(367,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(i) (370:8) and numbers(j) (384:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(j) (384:8) and numbers(i) (370:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(i) (370:8) and numbers(j) (384:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(j) (384:8) and numbers(i) (370:8)

   LOOP BEGIN at sort_utils.f90(373,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(357,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_insertion_sort_dp_dist_] sort_utils.f90:357

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      38
            Global    :      26
            Local     :      12
        Regenerable   :       1
        Spilled       :      12
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      80 bytes*
            Reads     :      14 [3.42e+01 ~ 9.6%]
            Writes    :      10 [2.34e+01 ~ 6.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICKSORT_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICKSORT_INT) [12/22=54.5%] sort_utils.f90(393,14)
  -> CP_CLONE (398,10) SORT_UTILS::QUICK_SORT_INT..0 (isz = 413) (sz = 422)
     [[ Inlining would exceed -inline-max-size value (422>230) <1>]]
  -> INLINE: (399,10) SORT_UTILS::INSERTION_SORT_INT (isz = 76) (sz = 81)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(507,5) inlined into sort_utils.f90(399,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(I) (510:8) and numbers(J) (521:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(J) (521:8) and numbers(I) (510:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(I) (510:8) and numbers(J) (521:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(J) (521:8) and numbers(I) (510:8)

   LOOP BEGIN at sort_utils.f90(512,8) inlined into sort_utils.f90(399,10)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(393,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quicksort_int_] sort_utils.f90:393

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :      31
            Global    :      19
            Local     :      12
        Regenerable   :       5
        Spilled       :       3
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.5%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.8%]
            Writes    :       2 [1.80e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_INT..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_INT..0) [13/22=59.1%] sort_utils.f90(402,24)
  CLONED FROM: SORT_UTILS::QUICK_SORT_INT(X,1,X)
  -> INLINE: (412,13) SORT_UTILS::MEDIAN3_INT (isz = 158) (sz = 169)
  -> (456,13) SORT_UTILS::QUICK_SORT_INT (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]
  -> (457,13) SORT_UTILS::QUICK_SORT_INT (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(417,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(422,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(430,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(432,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(437,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(402,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_int_..0] sort_utils.f90:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     103
            Global    :      53
            Local     :      50
        Regenerable   :       4
        Spilled       :      13
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [4.40e-01 ~ 0.3%]
        Spills        :      64 bytes*
            Reads     :      22 [4.05e+00 ~ 2.6%]
            Writes    :      15 [1.36e+01 ~ 8.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_INT) [14/22=63.6%] sort_utils.f90(402,24)
  -> INLINE: (412,13) SORT_UTILS::MEDIAN3_INT (isz = 158) (sz = 169)
  -> (456,13) SORT_UTILS::QUICK_SORT_INT (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]
  -> (457,13) SORT_UTILS::QUICK_SORT_INT (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(417,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(422,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(430,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(432,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(437,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(402,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_int_] sort_utils.f90:402

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     111
            Global    :      55
            Local     :      56
        Regenerable   :       4
        Spilled       :      14
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [4.40e-01 ~ 0.3%]
        Spills        :      72 bytes*
            Reads     :      28 [4.49e+00 ~ 2.8%]
            Writes    :      18 [1.46e+01 ~ 9.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::MEDIAN3_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::MEDIAN3_INT) [15/22=68.2%] sort_utils.f90(461,14)


    Report from: Code generation optimizations [cg]

sort_utils.f90(461,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_median3_int_] sort_utils.f90:461

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   10[ rax rdx rcx rsi rdi r8-r11 r15]
        
    Routine temporaries
        Total         :      35
            Global    :      17
            Local     :      18
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::INSERTION_SORT_INT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::INSERTION_SORT_INT) [16/22=72.7%] sort_utils.f90(497,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(507,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(i) (510:8) and numbers(j) (521:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(j) (521:8) and numbers(i) (510:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(i) (510:8) and numbers(j) (521:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(j) (521:8) and numbers(i) (510:8)

   LOOP BEGIN at sort_utils.f90(512,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(497,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_insertion_sort_int_] sort_utils.f90:497

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   12[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15]
        
    Routine temporaries
        Total         :      24
            Global    :      18
            Local     :       6
        Regenerable   :       1
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      24 bytes*
            Reads     :       3 [2.70e+00 ~ 1.3%]
            Writes    :       3 [2.70e+00 ~ 1.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICKSORT_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICKSORT_REAL) [17/22=77.3%] sort_utils.f90(528,14)
  -> CP_CLONE (533,10) SORT_UTILS::QUICK_SORT_REAL..0 (isz = 413) (sz = 422)
     [[ Inlining would exceed -inline-max-size value (422>230) <1>]]
  -> INLINE: (534,10) SORT_UTILS::INSERTION_SORT_REAL (isz = 76) (sz = 81)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(645,5) inlined into sort_utils.f90(534,10)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(I) (648:8) and numbers(J) (659:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(J) (659:8) and numbers(I) (648:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(I) (648:8) and numbers(J) (659:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(J) (659:8) and numbers(I) (648:8)

   LOOP BEGIN at sort_utils.f90(650,8) inlined into sort_utils.f90(534,10)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(528,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quicksort_real_] sort_utils.f90:528

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r11 r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      33
            Global    :      19
            Local     :      14
        Regenerable   :       5
        Spilled       :       2
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       1 [1.00e+00 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       1 [9.00e-01 ~ 0.4%]
            Writes    :       1 [9.00e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_REAL..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_REAL..0) [18/22=81.8%] sort_utils.f90(537,24)
  CLONED FROM: SORT_UTILS::QUICK_SORT_REAL(X,1,X)
  -> INLINE: (548,13) SORT_UTILS::MEDIAN3_REAL (isz = 158) (sz = 169)
  -> (592,13) SORT_UTILS::QUICK_SORT_REAL (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]
  -> (593,13) SORT_UTILS::QUICK_SORT_REAL (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(553,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(558,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(566,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(568,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(573,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(537,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_real_..0] sort_utils.f90:537

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     107
            Global    :      53
            Local     :      54
        Regenerable   :       4
        Spilled       :      10
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [4.40e-01 ~ 0.3%]
        Spills        :      40 bytes*
            Reads     :      10 [1.49e+00 ~ 1.0%]
            Writes    :       7 [4.64e+00 ~ 3.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::QUICK_SORT_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::QUICK_SORT_REAL) [19/22=86.4%] sort_utils.f90(537,24)
  -> INLINE: (548,13) SORT_UTILS::MEDIAN3_REAL (isz = 158) (sz = 169)
  -> (592,13) SORT_UTILS::QUICK_SORT_REAL (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]
  -> (593,13) SORT_UTILS::QUICK_SORT_REAL (isz = 413) (sz = 422)
     [[ Callee not marked with inlining directive  <2>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(553,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(558,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at sort_utils.f90(566,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at sort_utils.f90(568,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(573,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(537,24):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_quick_sort_real_] sort_utils.f90:537

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     115
            Global    :      55
            Local     :      60
        Regenerable   :       4
        Spilled       :      11
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [4.40e-01 ~ 0.3%]
        Spills        :      48 bytes*
            Reads     :      18 [2.54e+00 ~ 1.7%]
            Writes    :      12 [5.71e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::MEDIAN3_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::MEDIAN3_REAL) [20/22=90.9%] sort_utils.f90(597,14)


    Report from: Code generation optimizations [cg]

sort_utils.f90(597,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_median3_real_] sort_utils.f90:597

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r10 zmm0-zmm2]
        
    Routine temporaries
        Total         :      35
            Global    :      17
            Local     :      18
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::INSERTION_SORT_REAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::INSERTION_SORT_REAL) [21/22=95.5%] sort_utils.f90(635,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(645,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between numbers(i) (648:8) and numbers(j) (659:8)
   remark #17106: parallel dependence: assumed FLOW dependence between numbers(j) (659:8) and numbers(i) (648:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between numbers(i) (648:8) and numbers(j) (659:8)
   remark #15346: vector dependence: assumed FLOW dependence between numbers(j) (659:8) and numbers(i) (648:8)

   LOOP BEGIN at sort_utils.f90(650,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable j was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(635,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_insertion_sort_real_] sort_utils.f90:635

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r11 r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      26
            Global    :      18
            Local     :       8
        Regenerable   :       1
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.80e+00 ~ 0.8%]
            Writes    :       2 [1.80e+00 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SORT_UTILS::BUCKET_SORT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SORT_UTILS::BUCKET_SORT) [22/22=100.0%] sort_utils.f90(665,14)
  -> EXTERN: (675,5) for_alloc_allocatable
  -> EXTERN: (675,5) for_check_mult_overflow64
  -> EXTERN: (702,5) for_dealloc_allocatable
  -> EXTERN: (704,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sort_utils.f90(676,5)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between NUM(:) (676:5) and NUM(:) (676:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between NUM(:) (676:5) and NUM(:) (676:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at sort_utils.f90(676,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference NUM(:) has aligned access
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at sort_utils.f90(676,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=24
   LOOP END
LOOP END

LOOP BEGIN at sort_utils.f90(679,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between NUM(temp_i) (682:11) and NUM(temp_i) (683:11)
   remark #17106: parallel dependence: assumed ANTI dependence between NUM(temp_i) (683:11) and NUM(temp_i) (682:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between NUM(temp_i) (682:11) and NUM(temp_i) (683:11)
   remark #15346: vector dependence: assumed ANTI dependence between NUM(temp_i) (683:11) and NUM(temp_i) (682:11)
LOOP END

LOOP BEGIN at sort_utils.f90(689,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between numbers(:) (691:11) and numbers(:) (691:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between numbers(:) (691:11) and numbers(:) (691:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between numbers(:) (691:11) and numbers(:) (691:11)
   remark #15346: vector dependence: assumed OUTPUT dependence between numbers(:) (691:11) and numbers(:) (691:11)

   LOOP BEGIN at sort_utils.f90(691,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <numbers(:)>, stride is unknown to compiler
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <sort_temp(:,i)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 4
      remark #15452: unmasked strided loads: 1 
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 18.250 
      remark #15478: estimated potential speedup: 0.210 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at sort_utils.f90(691,11)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

sort_utils.f90(673,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
sort_utils.f90(676,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
sort_utils.f90(676,5):remark #34026: call to memset implemented as a call to optimized library version
sort_utils.f90(665,14):remark #34051: REGISTER ALLOCATION : [sort_utils_mp_bucket_sort_] sort_utils.f90:665

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     186
            Global    :      60
            Local     :     126
        Regenerable   :      22
        Spilled       :      25
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       5 [5.00e+00 ~ 0.7%]
            Writes    :      13 [1.30e+01 ~ 1.8%]
        Spills        :     152 bytes*
            Reads     :      26 [8.82e+01 ~ 12.5%]
            Writes    :      19 [3.43e+01 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

<2> The compiler's heuristics indicate that the subprogram is not profitable to 
    inline.  Override this decision by adding "!DIR$ATTRIBUTES FORCEINLINE" 
    to the declaration of the called subprogram, or add "!DIR$ FORCEINLINE" 
    before the call site.

