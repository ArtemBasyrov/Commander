Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_freefree_comp_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_freefree_comp_mod._) [1/3=33.3%] comm_freefree_comp_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_freefree_comp_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_freefree_comp_mod._] comm_freefree_comp_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_FREEFREE_COMP_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_FREEFREE_COMP_MOD::CONSTRUCTOR) [2/3=66.7%] comm_freefree_comp_mod.f90(30,12)
  -> EXTERN: (40,5) for_allocate
  -> INDIRECT-: (41,10)  (*((P64*) *((P64*) (comm_freefree_comp_mod_mp_constructor_$CONSTRUCTOR_V$28d8.0.2 + 56(SI64)))))[16(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (45,5) for_alloc_allocatable
  -> EXTERN: (45,5) for_alloc_allocatable
  -> EXTERN: (45,5) for_alloc_allocatable
  -> EXTERN: (46,5) for_alloc_allocatable
  -> EXTERN: (46,5) for_alloc_allocatable
  -> EXTERN: (47,5) for_alloc_allocatable
  -> EXTERN: (47,5) for_alloc_allocatable
  -> EXTERN: (56,5) for_cpystr
  -> EXTERN: (56,5) __resetsp_inlined
  -> EXTERN: (56,5) for_realloc_lhs
  -> EXTERN: (56,5) memcpy
  -> EXTERN: (56,5) memcpy
  -> EXTERN: (56,5) _alloca
  -> EXTERN: (56,5) __getsp_inlined
  -> EXTERN: (59,13) COMM_MAP_MOD^CONSTRUCTOR_MAPINFO
  -> EXTERN: (62,5) for_alloc_allocatable
  -> EXTERN: (64,12) for_trim
  -> EXTERN: (64,46) for_cpstr
  -> EXTERN: (65,37) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (66,11) for_realloc_lhs
  -> EXTERN: (66,11) _alloca
  -> EXTERN: (66,11) __getsp_inlined
  -> EXTERN: (66,11) __resetsp_inlined
  -> EXTERN: (69,11) __getsp_inlined
  -> EXTERN: (69,11) __resetsp_inlined
  -> EXTERN: (69,37) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (69,52) for_trim
  -> EXTERN: (69,75) _alloca
  -> EXTERN: (69,75) for_concat
  -> EXTERN: (69,77) for_trim
  -> INDIRECT-: (71,39)  (*((P64*) *((P64*) (&((MAP_PTR$P$27_V$c4c *)(comm_freefree_comp_mod_mp_constructor_$CONSTRUCTOR_V$28d8.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$28f1.0.2)->COMM_FREEFREE_COMP_MOD$.btCOMM_FREEFREE_COMP$COMM_DIFFUSE_COMP$43_V$10ea)[(EXPR_CONV.SI32.SI64(comm_freefree_comp_mod_mp_constructor_$I_V$28dd.0.2)), l:((comm_freefree_comp_mod_mp_constructor_$CONSTRUCTOR_V$28d8.0.2->QNCAtemplate.dim31_dv_template.addr_a0_V$28f1.0.2)->COMM_FREEFREE_COMP_MOD$.btCOMM_FREEFREE_COMP$COMM_DIFFUSE_COMP$43_V$10f3)[0(SI32), l:0(SI64)]] + 56(SI64)))))[8(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (75,5) for_alloc_allocatable
  -> EXTERN: (75,5) for_check_mult_overflow64
  -> EXTERN: (77,34) COMM_F_INT_2D_MOD^CONSTRUCTOR
  -> INDIRECT-: (81,10)  (*((P64*) *((P64*) (comm_freefree_comp_mod_mp_constructor_$CONSTRUCTOR_V$28d8.0.2 + 56(SI64)))))[15(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (84,5) for_alloc_allocatable
  -> EXTERN: (84,5) for_check_mult_overflow64
  -> EXTERN: (85,5) for_realloc_lhs


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_freefree_comp_mod.f90(54,36)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between constructor(i) (49:8) and cpar(id_abs,i) (54:8)
   remark #17106: parallel dependence: assumed ANTI dependence between cpar(id_abs,i) (54:8) and constructor(i) (49:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between constructor(i) (49:8) and cpar(id_abs,i) (54:8)
   remark #15346: vector dependence: assumed ANTI dependence between cpar(id_abs,i) (54:8) and constructor(i) (49:8)

   LOOP BEGIN at comm_freefree_comp_mod.f90(51,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between constructor(:,i) (51:8) and cpar(id_abs,:,i) (51:8)
      remark #17106: parallel dependence: assumed ANTI dependence between cpar(id_abs,:,i) (51:8) and constructor(:,i) (51:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between constructor(:,i) (51:8) and cpar(id_abs,:,i) (51:8)
      remark #15346: vector dependence: assumed ANTI dependence between cpar(id_abs,:,i) (51:8) and constructor(:,i) (51:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_freefree_comp_mod.f90(51,8)
   <Remainder>
   LOOP END

   LOOP BEGIN at comm_freefree_comp_mod.f90(52,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between constructor(:,i) (52:8) and cpar(id_abs,:,i) (52:8)
      remark #17106: parallel dependence: assumed ANTI dependence between cpar(id_abs,:,i) (52:8) and constructor(:,i) (52:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between constructor(:,i) (52:8) and cpar(id_abs,:,i) (52:8)
      remark #15346: vector dependence: assumed ANTI dependence between cpar(id_abs,:,i) (52:8) and constructor(:,i) (52:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_freefree_comp_mod.f90(52,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_freefree_comp_mod.f90(56,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between constructor(:) (56:5) and constructor%COMM_FREEFREE_COMP (56:5)
   remark #17106: parallel dependence: assumed ANTI dependence between constructor%COMM_FREEFREE_COMP (56:5) and constructor(:) (56:5)
   remark #15382: vectorization support: call to function for_cpystr cannot be vectorized
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between constructor(:) (56:5) and constructor%COMM_FREEFREE_COMP (56:5)
   remark #15346: vector dependence: assumed ANTI dependence between constructor%COMM_FREEFREE_COMP (56:5) and constructor(:) (56:5)
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at comm_freefree_comp_mod.f90(63,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (64:12) and at (66:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (66:11) and at (64:12)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (66:11) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.540 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop

      LOOP BEGIN at comm_freefree_comp_mod.f90(66,11)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 2  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_freefree_comp_mod.f90(76,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (77:34) and constructor(i) (77:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between constructor(i) (77:8) and at (77:34)
   remark #15382: vectorization support: call to function COMM_F_INT_2D_MOD^CONSTRUCTOR cannot be vectorized   [ comm_freefree_comp_mod.f90(77,34) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (77:34) and constructor(i) (77:8)
   remark #15346: vector dependence: assumed OUTPUT dependence between constructor(i) (77:8) and at (77:34)
LOOP END

LOOP BEGIN at comm_freefree_comp_mod.f90(85,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (85:5) and cpar(id_abs,:) (85:5)
   remark #17106: parallel dependence: assumed ANTI dependence between cpar(id_abs,:) (85:5) and at (85:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between at (85:5) and cpar(id_abs,:) (85:5)
   remark #15346: vector dependence: assumed ANTI dependence between cpar(id_abs,:) (85:5) and at (85:5)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_freefree_comp_mod.f90(85,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

comm_freefree_comp_mod.f90(40,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_freefree_comp_mod.f90(40,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_freefree_comp_mod.f90(56,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
comm_freefree_comp_mod.f90(56,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (1, 0)
comm_freefree_comp_mod.f90(30,12):remark #34051: REGISTER ALLOCATION : [comm_freefree_comp_mod_mp_constructor_] comm_freefree_comp_mod.f90:30

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :    1274
            Global    :     164
            Local     :    1110
        Regenerable   :      91
        Spilled       :      77
        
    Routine stack
        Variables     :    2612 bytes*
            Reads     :      44 [1.02e+02 ~ 2.8%]
            Writes    :     103 [1.47e+02 ~ 4.1%]
        Spills        :     552 bytes*
            Reads     :     109 [1.61e+02 ~ 4.4%]
            Writes    :      84 [1.07e+02 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_FREEFREE_COMP_MOD::EVALSED

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_FREEFREE_COMP_MOD::EVALSED) [3/3=100.0%] comm_freefree_comp_mod.f90(94,12)
  -> EXTERN: (107,15) log
  -> EXTERN: (107,19) exp
  -> EXTERN: (107,49) log
  -> EXTERN: (107,87) pow
  -> EXTERN: (108,15) log
  -> EXTERN: (108,19) exp
  -> EXTERN: (108,49) log
  -> EXTERN: (108,87) pow
  -> EXTERN: (109,28) pow
  -> EXTERN: (109,50) __powr8i4
  -> EXTERN: (110,28) pow
  -> EXTERN: (110,59) __powr8i4
  -> EXTERN: (112,23) exp
  -> EXTERN: (112,44) exp


    Report from: Code generation optimizations [cg]

comm_freefree_comp_mod.f90(94,12):remark #34051: REGISTER ALLOCATION : [comm_freefree_comp_mod_mp_evalsed_] comm_freefree_comp_mod.f90:94

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8-r9 zmm0-zmm8]
        
    Routine temporaries
        Total         :      84
            Global    :      24
            Local     :      60
        Regenerable   :       5
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       9 [9.00e+00 ~ 10.1%]
            Writes    :       6 [6.00e+00 ~ 6.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

