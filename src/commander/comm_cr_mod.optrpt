Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_cr_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_cr_mod._) [1/9=11.1%] comm_cr_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_cr_mod._] comm_cr_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::SOLVE_CR_EQN_BY_CG

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::SOLVE_CR_EQN_BY_CG) [2/9=22.2%] comm_cr_mod.f90(28,14)
  -> EXTERN: (50,10) UPDATE_STATUS
  -> EXTERN: (51,5) for_alloc_allocatable
  -> EXTERN: (51,5) for_check_mult_overflow64
  -> EXTERN: (51,5) for_alloc_allocatable
  -> EXTERN: (51,5) for_check_mult_overflow64
  -> EXTERN: (51,5) for_alloc_allocatable
  -> EXTERN: (51,5) for_check_mult_overflow64
  -> EXTERN: (51,5) for_alloc_allocatable
  -> EXTERN: (51,5) for_check_mult_overflow64
  -> EXTERN: (51,5) for_alloc_allocatable
  -> EXTERN: (51,5) for_check_mult_overflow64
  -> EXTERN: (54,10) wall_time_
  -> EXTERN: (55,10) UPDATE_STATUS
  -> (56,10) COMM_CR_MOD::UPDATE_PRECOND (isz = 9) (sz = 16)
     [[ Inlining inhibited by overrideable criterion  <1>]]
  -> EXTERN: (58,10) UPDATE_STATUS
  -> EXTERN: (59,10) wall_time_
  -> EXTERN: (61,8) for_write_seq_fmt
  -> EXTERN: (61,8) for_write_seq_fmt_xmit
  -> (112,13) COMM_CR_MOD::CR_AMP2X_FULL (isz = 502) (sz = 509)
     [[ Inlining would exceed -inline-max-size value (509>253) <2>]]
  -> INDIRECT-: (117,19)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (120,24) strcmp
  -> EXTERN: (122,18) for_trim
  -> EXTERN: (122,33) for_cpstr
  -> EXTERN: (123,17) for_alloc_allocatable
  -> EXTERN: (123,17) for_check_mult_overflow64
  -> EXTERN: (124,22) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (125,22)  (*((P64*) *((P64*) (&comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$_344$66_V$3bb9.0.2->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (126,22) CR_INSERT_COMP_2D
  -> EXTERN: (127,17) for_dealloc_allocatable
  -> EXTERN: (131,22) CR_EXTRACT_COMP_2D
  -> EXTERN: (137,22) CR_INSERT_COMP_2D
  -> EXTERN: (138,17) for_dealloc_allocatable
  -> EXTERN: (142,22) CR_EXTRACT_COMP_2D
  -> EXTERN: (143,17) for_realloc_lhs
  -> EXTERN: (144,22) CR_INSERT_COMP_2D
  -> EXTERN: (145,17) for_dealloc_allocatable
  -> INDIRECT-: (148,16)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (151,10) UPDATE_STATUS
  -> EXTERN: (152,5) __resetsp_inlined
  -> EXTERN: (152,5) for_realloc_lhs
  -> EXTERN: (152,5) __getsp_inlined
  -> (152,14) COMM_CR_MOD::CR_MATMULA (isz = 6475) (sz = 6484)
     [[ Inlining would exceed -inline-max-size value (6484>230) <2>]]
  -> EXTERN: (152,14) _alloca
  -> EXTERN: (153,10) UPDATE_STATUS
  -> EXTERN: (154,5) for_dealloc_allocatable
  -> EXTERN: (154,5) for_realloc_lhs
  -> (154,10) COMM_CR_MOD::CR_INVM (isz = 255) (sz = 262)
     [[ Inlining would exceed -inline-max-size value (262>253) <2>]]
  -> EXTERN: (155,10) UPDATE_STATUS
  -> EXTERN: (157,17) MPI_DOT_PRODUCT
  -> EXTERN: (158,10) UPDATE_STATUS
  -> EXTERN: (159,5) for_dealloc_allocatable
  -> EXTERN: (159,17) MPI_DOT_PRODUCT
  -> (159,51) COMM_CR_MOD::CR_INVM (isz = 255) (sz = 262)
     [[ Inlining would exceed -inline-max-size value (262>253) <2>]]
  -> EXTERN: (160,10) UPDATE_STATUS
  -> EXTERN: (163,9) for_trim
  -> EXTERN: (163,33) for_cpstr
  -> EXTERN: (163,52) for_trim
  -> EXTERN: (163,76) for_cpstr
  -> EXTERN: (166,14) for_trim
  -> EXTERN: (166,38) for_cpstr
  -> (169,13) COMM_CR_MOD::CR_COMPUTE_CHISQ (isz = 1301) (sz = 1312)
     [[ Inlining would exceed -inline-max-size value (1312>230) <2>]]
  -> EXTERN: (171,8) for_write_seq_lis_xmit
  -> EXTERN: (171,8) for_write_seq_lis
  -> EXTERN: (171,66) for_trim
  -> EXTERN: (174,13) wall_time_
  -> EXTERN: (176,13) UPDATE_STATUS
  -> EXTERN: (180,15) for_trim
  -> EXTERN: (180,39) for_cpstr
  -> EXTERN: (180,58) for_trim
  -> EXTERN: (180,82) for_cpstr
  -> EXTERN: (182,20) for_trim
  -> EXTERN: (182,44) for_cpstr
  -> (184,19) COMM_CR_MOD::CR_COMPUTE_CHISQ (isz = 1301) (sz = 1312)
     [[ Inlining would exceed -inline-max-size value (1312>230) <2>]]
  -> EXTERN: (189,18) for_trim
  -> EXTERN: (189,42) for_cpstr
  -> EXTERN: (192,13) UPDATE_STATUS
  -> EXTERN: (196,8) __getsp_inlined
  -> EXTERN: (196,8) for_realloc_lhs
  -> EXTERN: (196,8) __resetsp_inlined
  -> EXTERN: (196,16) _alloca
  -> (196,16) COMM_CR_MOD::CR_MATMULA (isz = 6475) (sz = 6484)
     [[ Inlining would exceed -inline-max-size value (6484>230) <2>]]
  -> EXTERN: (197,28) MPI_DOT_PRODUCT
  -> EXTERN: (202,11) for_realloc_lhs
  -> EXTERN: (202,11) __resetsp_inlined
  -> (202,19) COMM_CR_MOD::CR_MATMULA (isz = 6475) (sz = 6484)
     [[ Inlining would exceed -inline-max-size value (6484>230) <2>]]
  -> EXTERN: (202,19) _alloca
  -> EXTERN: (204,11) for_realloc_lhs
  -> EXTERN: (207,13) UPDATE_STATUS
  -> EXTERN: (208,13) wall_time_
  -> EXTERN: (209,8) for_realloc_lhs
  -> EXTERN: (209,8) for_dealloc_allocatable
  -> (209,20) COMM_CR_MOD::CR_INVM (isz = 255) (sz = 262)
     [[ Inlining would exceed -inline-max-size value (262>253) <2>]]
  -> EXTERN: (210,13) wall_time_
  -> EXTERN: (213,20) MPI_DOT_PRODUCT
  -> EXTERN: (215,8) for_realloc_lhs
  -> EXTERN: (216,13) UPDATE_STATUS
  -> EXTERN: (221,14) for_alloc_allocatable
  -> EXTERN: (221,14) for_check_mult_overflow64
  -> EXTERN: (222,14) for_realloc_lhs
  -> INDIRECT-: (226,25)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (229,30) strcmp
  -> EXTERN: (231,24) for_trim
  -> EXTERN: (231,39) for_cpstr
  -> EXTERN: (232,23) for_alloc_allocatable
  -> EXTERN: (232,23) for_check_mult_overflow64
  -> EXTERN: (233,28) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (234,28)  (*((P64*) *((P64*) (&comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$_347$69_V$3e49.0.2->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (235,28) CR_INSERT_COMP_2D
  -> EXTERN: (236,23) for_dealloc_allocatable
  -> EXTERN: (240,28) CR_EXTRACT_COMP_2D
  -> EXTERN: (246,28) CR_INSERT_COMP_2D
  -> EXTERN: (247,23) for_dealloc_allocatable
  -> EXTERN: (251,28) CR_EXTRACT_COMP_2D
  -> EXTERN: (252,23) for_realloc_lhs
  -> EXTERN: (253,28) CR_INSERT_COMP_2D
  -> EXTERN: (254,23) for_dealloc_allocatable
  -> INDIRECT-: (257,22)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> (259,19) COMM_CR_MOD::CR_X2AMP_FULL (isz = 478) (sz = 485)
     [[ Inlining would exceed -inline-max-size value (485>230) <2>]]
  -> EXTERN: (260,19) OUTPUT_FITS_SAMPLE
  -> EXTERN: (261,14) for_dealloc_allocatable
  -> (262,19) COMM_CR_MOD::CR_X2AMP_FULL (isz = 478) (sz = 485)
     [[ Inlining would exceed -inline-max-size value (485>230) <2>]]
  -> EXTERN: (265,13) UPDATE_STATUS
  -> EXTERN: (269,13) wall_time_
  -> EXTERN: (271,15) for_trim
  -> EXTERN: (271,39) for_cpstr
  -> EXTERN: (271,58) for_trim
  -> EXTERN: (271,82) for_cpstr
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt_xmit
  -> EXTERN: (275,14) for_write_seq_fmt
  -> EXTERN: (278,20) for_trim
  -> EXTERN: (278,44) for_cpstr
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis_xmit
  -> EXTERN: (282,14) for_write_seq_lis
  -> EXTERN: (288,13) UPDATE_STATUS
  -> INDIRECT-: (296,16)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (299,21) strcmp
  -> EXTERN: (301,15) for_trim
  -> EXTERN: (301,30) for_cpstr
  -> EXTERN: (302,14) for_alloc_allocatable
  -> EXTERN: (302,14) for_check_mult_overflow64
  -> EXTERN: (303,19) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (304,19)  (*((P64*) *((P64*) (&comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$_350$72_V$3f87.0.2->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (305,19) CR_INSERT_COMP_2D
  -> EXTERN: (306,14) for_dealloc_allocatable
  -> EXTERN: (310,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (316,19) CR_INSERT_COMP_2D
  -> EXTERN: (317,14) for_dealloc_allocatable
  -> EXTERN: (321,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (322,14) for_realloc_lhs
  -> EXTERN: (323,19) CR_INSERT_COMP_2D
  -> EXTERN: (324,14) for_dealloc_allocatable
  -> INDIRECT-: (327,13)  (*((P64*) comm_cr_mod_mp_solve_cr_eqn_by_cg_$C$56_V$38a4.0.2))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (329,10) UPDATE_STATUS
  -> EXTERN: (331,28) for_trim
  -> EXTERN: (331,52) for_cpstr
  -> EXTERN: (332,8) for_write_seq_lis
  -> EXTERN: (333,8) for_write_seq_lis
  -> EXTERN: (333,8) for_write_seq_lis_xmit
  -> EXTERN: (337,11) for_write_seq_fmt
  -> EXTERN: (337,11) for_write_seq_fmt_xmit
  -> EXTERN: (337,11) for_write_seq_fmt_xmit
  -> EXTERN: (337,11) for_write_seq_fmt_xmit
  -> EXTERN: (337,11) for_write_seq_fmt_xmit
  -> EXTERN: (337,11) for_write_seq_fmt_xmit
  -> EXTERN: (342,5) for_dealloc_allocatable
  -> EXTERN: (342,5) for_dealloc_allocatable
  -> EXTERN: (342,5) for_dealloc_allocatable
  -> EXTERN: (342,5) for_dealloc_allocatable
  -> EXTERN: (342,5) for_dealloc_allocatable
  -> EXTERN: (343,10) UPDATE_STATUS
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable
  -> EXTERN: (345,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(110,8)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_cr_mod.f90(110,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference x(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(110,8)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(110,8)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(110,8)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(143,17)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(143,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(143,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.086
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 30 
      remark #15477: vector cost: 17.500 
      remark #15478: estimated potential speedup: 1.690 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(143,17)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.308
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(143,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(132,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (133:20) and i (135:20)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (135:20) and i (133:20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (133:20) and i (135:20)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (135:20) and i (133:20)

   LOOP BEGIN at comm_cr_mod.f90(133,20)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_cr_mod.f90(135,20) ]
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(i-1,j) (134:23) and C(i,j,2) (134:23)
      remark #17106: parallel dependence: assumed ANTI dependence between C(i,j,2) (134:23) and PAMP(i-1,j) (134:23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(i-1,j) (134:23) and C(i,j,2) (134:23)
      remark #15346: vector dependence: assumed ANTI dependence between C(i,j,2) (134:23) and PAMP(i-1,j) (134:23)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(133,20)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(152,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15389: vectorization support: reference b(:) has unaligned access
   remark #15388: vectorization support: reference at (152:14) has aligned access   [ comm_cr_mod.f90(152,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.125
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.000 
   remark #15478: estimated potential speedup: 1.960 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(152,5)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15389: vectorization support: reference b(:) has unaligned access
   remark #15388: vectorization support: reference at (152:14) has aligned access   [ comm_cr_mod.f90(152,14) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.083
LOOP END

LOOP BEGIN at comm_cr_mod.f90(152,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15388: vectorization support: reference at (152:14) has aligned access   [ comm_cr_mod.f90(152,14) ]
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <b(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 3.500 
   remark #15478: estimated potential speedup: 1.690 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(152,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(154,5)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference D(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (154:5)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(154,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(154,5)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between D(:) (154:5) and at (154:5)
   remark #17106: parallel dependence: assumed ANTI dependence between at (154:5) and D(:) (154:5)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_cr_mod.f90(154,5)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(196,8)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between Q(:) (196:8) and Q(:) (196:8)
   remark #17106: parallel dependence: assumed OUTPUT dependence between Q(:) (196:8) and Q(:) (196:8)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(196,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference Q(:) has aligned access
      remark #15388: vectorization support: reference at (196:8) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(196,8)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(198,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15388: vectorization support: reference D(:) has aligned access   [ comm_cr_mod.f90(198,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.182
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 5.500 
   remark #15478: estimated potential speedup: 1.610 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(198,8)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15388: vectorization support: reference D(:) has aligned access   [ comm_cr_mod.f90(198,20) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.059
LOOP END

LOOP BEGIN at comm_cr_mod.f90(198,8)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference D(:) has aligned access   [ comm_cr_mod.f90(198,20) ]
   remark #15329: vectorization support: non-unit strided store was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15453: unmasked strided stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 6.500 
   remark #15478: estimated potential speedup: 1.370 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(198,8)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(204,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15388: vectorization support: reference Q(:) has aligned access   [ comm_cr_mod.f90(204,19) ]
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(204,11)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15388: vectorization support: reference R(:) has aligned access
   remark #15388: vectorization support: reference Q(:) has aligned access   [ comm_cr_mod.f90(204,19) ]
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
LOOP END

LOOP BEGIN at comm_cr_mod.f90(209,8)
<Multiversioned v1>
   remark #25228: Loop multiversioned for Data Dependence
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference S(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <at (209:8)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(209,8)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(209,8)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between S(:) (209:8) and at (209:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (209:8) and S(:) (209:8)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at comm_cr_mod.f90(209,8)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(215,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference D(:) has aligned access
   remark #15388: vectorization support: reference D(:) has aligned access   [ comm_cr_mod.f90(215,24) ]
   remark #15388: vectorization support: reference S(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15399: vectorization support: unroll factor set to 4
   remark #15309: vectorization support: normalized vectorization overhead 0.062
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 2 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 9 
   remark #15477: vector cost: 4.000 
   remark #15478: estimated potential speedup: 2.200 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(215,8)
<Remainder loop for vectorization>
   remark #15388: vectorization support: reference D(:) has aligned access
   remark #15388: vectorization support: reference D(:) has aligned access   [ comm_cr_mod.f90(215,24) ]
   remark #15388: vectorization support: reference S(:) has aligned access
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.857
LOOP END

LOOP BEGIN at comm_cr_mod.f90(222,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference X_OUT(:) has aligned access
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(222,14)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(222,14)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference X_OUT(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(222,14)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(252,23)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(252,23)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(252,23)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(252,23)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(241,23)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (243:29) and C(k,j,2) (243:29)
   remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (243:29) and PAMP(k-1,j) (243:29)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (243:29) and C(k,j,2) (243:29)
   remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (243:29) and PAMP(k-1,j) (243:29)

   LOOP BEGIN at comm_cr_mod.f90(242,26)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (243:29) and C(k,j,2) (243:29)
      remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (243:29) and PAMP(k-1,j) (243:29)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (243:29) and C(k,j,2) (243:29)
      remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (243:29) and PAMP(k-1,j) (243:29)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(242,26)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(322,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(322,14)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(322,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(322,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(311,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (313:20) and C(k,j,2) (313:20)
   remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (313:20) and PAMP(k-1,j) (313:20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (313:20) and C(k,j,2) (313:20)
   remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (313:20) and PAMP(k-1,j) (313:20)

   LOOP BEGIN at comm_cr_mod.f90(312,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (313:20) and C(k,j,2) (313:20)
      remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (313:20) and PAMP(k-1,j) (313:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (313:20) and C(k,j,2) (313:20)
      remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (313:20) and PAMP(k-1,j) (313:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(312,17)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(117,14)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(120,24) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(120,24)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(120,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(290,5)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(226,20)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(229,30) ]
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(229,30)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_cr_mod.f90(229,30)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(296,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(299,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(299,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(299,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(41,51):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(41,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,72):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,69):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,59):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,56):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,53):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(40,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(114,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(114,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(196,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(196,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(196,8):remark #34026: call to memcpy implemented as a call to optimized library version
comm_cr_mod.f90(293,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(293,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(299,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(299,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(299,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(120,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(120,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(120,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(223,14):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(223,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(229,30):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(229,30):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(229,30):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(28,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_solve_cr_eqn_by_cg_] comm_cr_mod.f90:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :    3119
            Global    :     471
            Local     :    2648
        Regenerable   :     623
        Spilled       :      66
        
    Routine stack
        Variables     :   12408 bytes*
            Reads     :     358 [2.48e+02 ~ 4.1%]
            Writes    :     678 [5.67e+02 ~ 9.4%]
        Spills        :     488 bytes*
            Reads     :     182 [1.45e+02 ~ 2.4%]
            Writes    :      75 [1.04e+02 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_INVM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_INVM) [3/9=33.3%] comm_cr_mod.f90(884,12)
  -> EXTERN: (884,12) for_deallocate
  -> EXTERN: (893,35) for_check_mult_overflow64
  -> EXTERN: (893,35) for_alloc_allocatable
  -> EXTERN: (894,5) for_realloc_lhs
  -> EXTERN: (895,10) APPLYDIFFPRECOND
  -> EXTERN: (896,10) APPLYPTSRCPRECOND
  -> EXTERN: (897,10) APPLYTEMPLATEPRECOND
  -> EXTERN: (899,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(894,5)
<Peeled loop for vectorization, Multiversioned v1>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference cr_invm(:) has aligned access
   remark #15388: vectorization support: reference x(:) has aligned access
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 2.550 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Peeled loop for vectorization, Multiversioned v2>
   remark #25015: Estimate of max trip count of loop=1
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference cr_invm(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 2.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(894,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(890,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(884,12):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_invm_] comm_cr_mod.f90:884

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r14 zmm0-zmm5]
        
    Routine temporaries
        Total         :     153
            Global    :      29
            Local     :     124
        Regenerable   :      12
        Spilled       :       4
        
    Routine stack
        Variables     :     104 bytes*
            Reads     :       3 [1.11e+00 ~ 0.6%]
            Writes    :       8 [6.07e+00 ~ 3.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_COMPUTE_CHISQ

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_COMPUTE_CHISQ) [4/9=44.4%] comm_cr_mod.f90(347,14)
  -> EXTERN: (361,5) for_alloc_allocatable
  -> EXTERN: (361,5) for_check_mult_overflow64
  -> EXTERN: (362,5) for_realloc_lhs
  -> INDIRECT-: (366,16)  (*((P64*) comm_cr_mod_mp_cr_compute_chisq_$C$75_V$4093.0.3))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (369,21) strcmp
  -> EXTERN: (371,15) for_trim
  -> EXTERN: (371,30) for_cpstr
  -> EXTERN: (372,14) for_alloc_allocatable
  -> EXTERN: (372,14) for_check_mult_overflow64
  -> EXTERN: (373,19) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (374,19)  (*((P64*) *((P64*) (&comm_cr_mod_mp_cr_compute_chisq_$C$_353$79_V$42bf.0.3->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (375,19) CR_INSERT_COMP_2D
  -> EXTERN: (376,14) for_dealloc_allocatable
  -> EXTERN: (380,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (386,19) CR_INSERT_COMP_2D
  -> EXTERN: (387,14) for_dealloc_allocatable
  -> EXTERN: (391,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (392,14) for_realloc_lhs
  -> EXTERN: (393,19) CR_INSERT_COMP_2D
  -> EXTERN: (394,14) for_dealloc_allocatable
  -> INDIRECT-: (397,13)  (*((P64*) comm_cr_mod_mp_cr_compute_chisq_$C$75_V$4093.0.3))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> (399,10) COMM_CR_MOD::CR_X2AMP_FULL (isz = 478) (sz = 485)
     [[ Inlining would exceed -inline-max-size value (485>230) <2>]]
  -> EXTERN: (400,10) COMPUTE_CHISQ
  -> EXTERN: (401,5) for_dealloc_allocatable
  -> (402,10) COMM_CR_MOD::CR_X2AMP_FULL (isz = 478) (sz = 485)
     [[ Inlining would exceed -inline-max-size value (485>253) <2>]]
  -> EXTERN: (404,3) for_dealloc_allocatable
  -> EXTERN: (404,3) for_dealloc_allocatable
  -> EXTERN: (404,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(362,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference X_OUT(:) has aligned access
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(362,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(362,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference X_OUT(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(362,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(392,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(392,14)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(392,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(392,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(381,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (383:20) and C(k,j,2) (383:20)
   remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (383:20) and PAMP(k-1,j) (383:20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (383:20) and C(k,j,2) (383:20)
   remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (383:20) and PAMP(k-1,j) (383:20)

   LOOP BEGIN at comm_cr_mod.f90(382,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(k-1,j) (383:20) and C(k,j,2) (383:20)
      remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (383:20) and PAMP(k-1,j) (383:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(k-1,j) (383:20) and C(k,j,2) (383:20)
      remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (383:20) and PAMP(k-1,j) (383:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(382,17)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(366,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(369,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(369,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(369,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(355,51):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(355,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(354,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(363,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(363,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(369,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(369,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(369,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(347,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_compute_chisq_] comm_cr_mod.f90:347

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     640
            Global    :     108
            Local     :     532
        Regenerable   :      82
        Spilled       :      23
        
    Routine stack
        Variables     :    1776 bytes*
            Reads     :      88 [8.40e+01 ~ 7.7%]
            Writes    :     171 [1.98e+02 ~ 18.2%]
        Spills        :     144 bytes*
            Reads     :      26 [1.71e+01 ~ 1.6%]
            Writes    :      19 [6.72e+01 ~ 6.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_MATMULA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_MATMULA) [5/9=55.6%] comm_cr_mod.f90(652,22)
  -> EXTERN: (667,10) UPDATE_STATUS
  -> EXTERN: (668,5) for_alloc_allocatable
  -> EXTERN: (668,5) for_check_mult_overflow64
  -> EXTERN: (668,5) for_alloc_allocatable
  -> EXTERN: (668,5) for_check_mult_overflow64
  -> EXTERN: (673,10) wall_time_
  -> EXTERN: (674,10) UPDATE_STATUS
  -> EXTERN: (675,5) for_realloc_lhs
  -> EXTERN: (676,10) UPDATE_STATUS
  -> INDIRECT-: (680,16)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (683,21) strcmp
  -> EXTERN: (685,15) for_trim
  -> EXTERN: (685,30) for_cpstr
  -> EXTERN: (686,14) for_alloc_allocatable
  -> EXTERN: (686,14) for_check_mult_overflow64
  -> EXTERN: (687,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (688,19) UPDATE_STATUS
  -> INDIRECT-: (689,19)  (*((P64*) *((P64*) (&comm_cr_mod_mp_cr_matmula_$C$_368$128_V$51ee.0.7->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (690,19) UPDATE_STATUS
  -> EXTERN: (691,19) CR_INSERT_COMP_2D
  -> EXTERN: (692,14) for_dealloc_allocatable
  -> EXTERN: (696,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (702,19) CR_INSERT_COMP_2D
  -> EXTERN: (703,14) for_dealloc_allocatable
  -> EXTERN: (707,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (708,14) for_realloc_lhs
  -> EXTERN: (709,19) CR_INSERT_COMP_2D
  -> EXTERN: (710,14) for_dealloc_allocatable
  -> INDIRECT-: (713,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (715,10) wall_time_
  -> EXTERN: (723,13) wall_time_
  -> EXTERN: (724,16) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> EXTERN: (725,16) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> INDIRECT-: (729,19)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (732,24) strcmp
  -> EXTERN: (734,19) CR_EXTRACT_COMP_2D
  -> INDIRECT-: (735,19)  (*((P64*) comm_cr_mod_mp_cr_matmula_$PMAP$113_V$4edb.0.7))[15(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (736,14) for_check_mult_overflow64
  -> EXTERN: (736,14) for_alloc_allocatable
  -> EXTERN: (738,19) UPDATE_STATUS
  -> EXTERN: (739,14) for_realloc_lhs
  -> EXTERN: (739,14) for_dealloc_allocatable
  -> INDIRECT-: (739,18)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_371$131_V$5392.0.7))[7(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (740,19) UPDATE_STATUS
  -> EXTERN: (741,14) for_realloc_lhs
  -> EXTERN: (743,19) UPDATE_STATUS
  -> EXTERN: (744,14) for_dealloc_allocatable
  -> EXTERN: (744,14) for_dealloc_allocatable
  -> EXTERN: (746,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (747,14) for_check_mult_overflow64
  -> EXTERN: (747,14) for_alloc_allocatable
  -> EXTERN: (748,14) for_realloc_lhs
  -> EXTERN: (748,14) for_dealloc_allocatable
  -> INDIRECT-: (748,18)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_372$133_V$54c1.0.7))[7(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (749,14) for_realloc_lhs
  -> EXTERN: (750,14) for_dealloc_allocatable
  -> EXTERN: (750,14) for_dealloc_allocatable
  -> EXTERN: (752,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (753,14) for_check_mult_overflow64
  -> EXTERN: (753,14) for_alloc_allocatable
  -> EXTERN: (754,14) for_realloc_lhs
  -> EXTERN: (754,14) for_dealloc_allocatable
  -> INDIRECT-: (754,18)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_373$132_V$542a.0.7))[7(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (755,14) for_realloc_lhs
  -> EXTERN: (756,14) for_dealloc_allocatable
  -> EXTERN: (756,14) for_dealloc_allocatable
  -> INDIRECT-: (758,16)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (760,13) UPDATE_STATUS
  -> INDIRECT-: (761,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$MAP$127_V$4fdc.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (762,13) UPDATE_STATUS
  -> EXTERN: (763,8) for_realloc_lhs
  -> EXTERN: (764,13) UPDATE_STATUS
  -> EXTERN: (766,13) wall_time_
  -> EXTERN: (770,13) wall_time_
  -> INDIRECT-: (771,13)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$26_V$1384 *)comm_data_mod_mp_data__V$386d)[(EXPR_CONV.SI32.SI64(comm_cr_mod_mp_cr_matmula_$I_V$4fd2.0.7)), l:comm_data_mod_mp_data__V$3876[0(SI32), l:0(SI64)]] + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (772,13) wall_time_
  -> EXTERN: (773,13) UPDATE_STATUS
  -> EXTERN: (777,13) wall_time_
  -> INDIRECT-: (779,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$MAP$127_V$4fdc.0.7))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (780,13) UPDATE_STATUS
  -> INDIRECT-: (783,19)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (786,24) strcmp
  -> EXTERN: (788,14) for_check_mult_overflow64
  -> EXTERN: (788,14) for_alloc_allocatable
  -> EXTERN: (789,19) UPDATE_STATUS
  -> EXTERN: (790,14) for_realloc_lhs
  -> EXTERN: (790,14) for_dealloc_allocatable
  -> INDIRECT-: (790,20)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_374$134_V$55e8.0.7))[8(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (791,19) UPDATE_STATUS
  -> EXTERN: (792,19) CR_INSERT_COMP_2D
  -> EXTERN: (793,14) for_dealloc_allocatable
  -> EXTERN: (795,14) for_check_mult_overflow64
  -> EXTERN: (795,14) for_alloc_allocatable
  -> EXTERN: (796,14) for_realloc_lhs
  -> EXTERN: (796,14) for_dealloc_allocatable
  -> INDIRECT-: (796,21)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_375$136_V$5691.0.7))[8(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (797,31) CR_INSERT_COMP_2D
  -> EXTERN: (798,14) for_dealloc_allocatable
  -> EXTERN: (800,14) for_alloc_allocatable
  -> EXTERN: (801,14) for_realloc_lhs
  -> EXTERN: (801,14) for_dealloc_allocatable
  -> INDIRECT-: (801,21)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$_376$135_V$563d.0.7))[8(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (802,31) CR_INSERT_COMP_2D
  -> EXTERN: (803,14) for_dealloc_allocatable
  -> INDIRECT-: (805,16)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (807,13) wall_time_
  -> INDIRECT-: (810,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$MAP$127_V$4fdc.0.7))[12(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (811,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$PMAP$113_V$4edb.0.7))[12(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (813,10) UPDATE_STATUS
  -> EXTERN: (816,10) wall_time_
  -> INDIRECT-: (820,16)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (823,21) strcmp
  -> EXTERN: (825,15) for_trim
  -> EXTERN: (825,30) for_cpstr
  -> EXTERN: (826,14) for_alloc_allocatable
  -> EXTERN: (826,14) for_check_mult_overflow64
  -> EXTERN: (828,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (829,19) UPDATE_STATUS
  -> INDIRECT-: (830,19)  (*((P64*) *((P64*) (&comm_cr_mod_mp_cr_matmula_$C$_377$137_V$5749.0.7->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (831,19) UPDATE_STATUS
  -> EXTERN: (832,19) CR_INSERT_COMP_2D
  -> EXTERN: (834,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (835,19) CR_INSERT_COMP_2D
  -> EXTERN: (836,14) for_dealloc_allocatable
  -> EXTERN: (841,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (847,19) CR_INSERT_COMP_2D
  -> EXTERN: (849,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (850,19) CR_INSERT_COMP_2D
  -> EXTERN: (851,14) for_dealloc_allocatable
  -> EXTERN: (856,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (857,14) for_realloc_lhs
  -> EXTERN: (858,19) CR_INSERT_COMP_2D
  -> EXTERN: (860,19) CR_EXTRACT_COMP_2D
  -> EXTERN: (861,19) CR_INSERT_COMP_2D
  -> EXTERN: (862,14) for_dealloc_allocatable
  -> INDIRECT-: (865,13)  (*((P64*) comm_cr_mod_mp_cr_matmula_$C$114_V$4eee.0.7))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (868,10) wall_time_
  -> EXTERN: (874,10) wall_time_
  -> EXTERN: (875,10) UPDATE_STATUS
  -> EXTERN: (877,10) UPDATE_STATUS
  -> EXTERN: (878,5) for_dealloc_allocatable
  -> EXTERN: (878,5) for_dealloc_allocatable
  -> EXTERN: (879,10) wall_time_
  -> EXTERN: (882,3) for_dealloc_allocatable
  -> EXTERN: (882,3) for_dealloc_allocatable
  -> EXTERN: (882,3) for_dealloc_allocatable
  -> EXTERN: (882,3) for_dealloc_allocatable
  -> EXTERN: (882,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(669,5)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (669:5) and Y(:) (669:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between Y(:) (669:5) and Y(:) (669:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(669,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference Y(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(669,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(675,5)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference SQRTS_X(:) has aligned access
   remark #15389: vectorization support: reference x(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.750
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.000 
   remark #15478: estimated potential speedup: 1.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(675,5)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(675,5)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference SQRTS_X(:) has aligned access
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <x(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 2
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 2.500 
   remark #15478: estimated potential speedup: 1.600 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_cr_mod.f90(675,5)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

LOOP BEGIN at comm_cr_mod.f90(708,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(708,14)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(708,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(708,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(697,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (698:17) and i (700:17)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (700:17) and i (698:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (698:17) and i (700:17)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (700:17) and i (698:17)

   LOOP BEGIN at comm_cr_mod.f90(698,17)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_cr_mod.f90(700,17) ]
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(i-1,j) (699:20) and C(i,j,2) (699:20)
      remark #17106: parallel dependence: assumed ANTI dependence between C(i,j,2) (699:20) and PAMP(i-1,j) (699:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(i-1,j) (699:20) and C(i,j,2) (699:20)
      remark #15346: vector dependence: assumed ANTI dependence between C(i,j,2) (699:20) and PAMP(i-1,j) (699:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(698,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(739,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)

   LOOP BEGIN at comm_cr_mod.f90(739,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(739,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(739,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(739,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (739:14) and at (739:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (739:14) and M(:,:) (739:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(739,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(741,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (741:14) and M(:,:) (741:14)
   remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (741:14) and MAP(:,:) (741:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (741:14) and M(:,:) (741:14)
   remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (741:14) and MAP(:,:) (741:14)

   LOOP BEGIN at comm_cr_mod.f90(741,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (741:14) and M(:,:) (741:14)
      remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (741:14) and MAP(:,:) (741:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (741:14) and M(:,:) (741:14)
      remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (741:14) and MAP(:,:) (741:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(741,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(754,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)

   LOOP BEGIN at comm_cr_mod.f90(754,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(754,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(754,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(754,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (754:14) and at (754:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (754:14) and M(:,:) (754:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(754,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(755,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PMAP(:,:) (755:14) and M(:,:) (755:14)
   remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (755:14) and PMAP(:,:) (755:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PMAP(:,:) (755:14) and M(:,:) (755:14)
   remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (755:14) and PMAP(:,:) (755:14)

   LOOP BEGIN at comm_cr_mod.f90(755,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PMAP(:,:) (755:14) and M(:,:) (755:14)
      remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (755:14) and PMAP(:,:) (755:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PMAP(:,:) (755:14) and M(:,:) (755:14)
      remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (755:14) and PMAP(:,:) (755:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(755,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(748,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)

   LOOP BEGIN at comm_cr_mod.f90(748,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(748,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(748,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(748,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between M(:,:) (748:14) and at (748:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (748:14) and M(:,:) (748:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(748,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(749,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PMAP(:,:) (749:14) and M(:,:) (749:14)
   remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (749:14) and PMAP(:,:) (749:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PMAP(:,:) (749:14) and M(:,:) (749:14)
   remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (749:14) and PMAP(:,:) (749:14)

   LOOP BEGIN at comm_cr_mod.f90(749,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PMAP(:,:) (749:14) and M(:,:) (749:14)
      remark #17106: parallel dependence: assumed ANTI dependence between M(:,:) (749:14) and PMAP(:,:) (749:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PMAP(:,:) (749:14) and M(:,:) (749:14)
      remark #15346: vector dependence: assumed ANTI dependence between M(:,:) (749:14) and PMAP(:,:) (749:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(749,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(763,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between PMAP (763:8) and MAP(:,:) (763:8)
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (763:8) and PMAP (763:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between PMAP (763:8) and MAP(:,:) (763:8)
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (763:8) and PMAP (763:8)

   LOOP BEGIN at comm_cr_mod.f90(763,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PMAP (763:8) and MAP(:,:) (763:8)
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (763:8) and PMAP (763:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between PMAP (763:8) and MAP(:,:) (763:8)
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (763:8) and PMAP (763:8)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(763,8)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(790,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)

   LOOP BEGIN at comm_cr_mod.f90(790,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(790,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(790,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(790,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (790:14) and at (790:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (790:14) and ALM(:,:) (790:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(790,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(801,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)

   LOOP BEGIN at comm_cr_mod.f90(801,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(801,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(801,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(801,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (801:14) and at (801:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (801:14) and PAMP(:,:) (801:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(801,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(796,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)

   LOOP BEGIN at comm_cr_mod.f90(796,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(796,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(796,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(796,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(:,:) (796:14) and at (796:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (796:14) and PAMP(:,:) (796:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(796,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(857,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(857,14)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(857,14)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15388: vectorization support: reference PAMP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(857,14)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(842,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (843:17) and i (845:17)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (845:17) and i (843:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (843:17) and i (845:17)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (845:17) and i (843:17)

   LOOP BEGIN at comm_cr_mod.f90(843,17)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_cr_mod.f90(845,17) ]
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PAMP(i-1,j) (844:20) and C(i,j,2) (844:20)
      remark #17106: parallel dependence: assumed ANTI dependence between C(i,j,2) (844:20) and PAMP(i-1,j) (844:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PAMP(i-1,j) (844:20) and C(i,j,2) (844:20)
      remark #15346: vector dependence: assumed ANTI dependence between C(i,j,2) (844:20) and PAMP(i-1,j) (844:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(843,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(876,5)
   remark #25399: memcopy generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between cr_matmula(:) (876:5) and cr_matmula(:) (876:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between cr_matmula(:) (876:5) and cr_matmula(:) (876:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(876,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference cr_matmula(:) has aligned access
      remark #15388: vectorization support: reference Y(:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.180 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(876,5)
   <Alternate Alignment Vectorized Loop>
      remark #25015: Estimate of max trip count of loop=6
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(876,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(680,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(683,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(683,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(683,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(812,5)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(729,14)
      remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(732,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_cr_mod.f90(732,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(783,14)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(786,24) ]
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(786,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_cr_mod.f90(786,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(820,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(823,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(823,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(823,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(663,56):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(663,53):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(664,61):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(664,53):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(664,58):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(669,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(669,5):remark #34026: call to memset implemented as a call to optimized library version
comm_cr_mod.f90(677,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(677,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(726,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(726,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(778,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(778,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(817,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(817,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(876,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(876,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(876,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_cr_mod.f90(823,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(823,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(823,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(786,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(786,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(786,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(732,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(732,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(732,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(683,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(683,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(683,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(652,22):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_matmula_] comm_cr_mod.f90:652

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    3154
            Global    :     575
            Local     :    2579
        Regenerable   :     444
        Spilled       :     125
        
    Routine stack
        Variables     :    7052 bytes*
            Reads     :     521 [2.22e+03 ~ 6.9%]
            Writes    :     849 [3.71e+03 ~ 11.5%]
        Spills        :     896 bytes*
            Reads     :     183 [1.75e+03 ~ 5.4%]
            Writes    :     132 [1.11e+03 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_X2AMP_FULL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_X2AMP_FULL) [6/9=66.7%] comm_cr_mod.f90(442,14)
  -> EXTERN: (453,21) strcmp
  -> INDIRECT-: (472,13)  (*((P64*) comm_cr_mod_mp_cr_x2amp_full_$C$89_V$45c1.0.5))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(456,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (456:49) and x(:) (456:49)
   remark #17106: parallel dependence: assumed ANTI dependence between x(:) (456:49) and at (456:49)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between at (456:49) and x(:) (456:49)
   remark #15346: vector dependence: assumed ANTI dependence between x(:) (456:49) and at (456:49)

   LOOP BEGIN at comm_cr_mod.f90(456,49)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (456:49) and x(:) (456:49)
      remark #17106: parallel dependence: assumed ANTI dependence between x(:) (456:49) and at (456:49)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between at (456:49) and x(:) (456:49)
      remark #15346: vector dependence: assumed ANTI dependence between x(:) (456:49) and at (456:49)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(456,49)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(461,18)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between C(:,i) (462:52) and x(:) (462:52)
   remark #17106: parallel dependence: assumed ANTI dependence between x(:) (462:52) and C(:,i) (462:52)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between C(:,i) (462:52) and x(:) (462:52)
   remark #15346: vector dependence: assumed ANTI dependence between x(:) (462:52) and C(:,i) (462:52)

   LOOP BEGIN at comm_cr_mod.f90(462,52)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between C(:,i) (462:52) and x(:) (462:52)
      remark #17106: parallel dependence: assumed ANTI dependence between x(:) (462:52) and C(:,i) (462:52)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between C(:,i) (462:52) and x(:) (462:52)
      remark #15346: vector dependence: assumed ANTI dependence between x(:) (462:52) and C(:,i) (462:52)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(462,52)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(472,8)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(453,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(453,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(453,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(451,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(451,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(453,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(453,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(453,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(442,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_x2amp_full_] comm_cr_mod.f90:442

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     138
            Global    :      67
            Local     :      71
        Regenerable   :      10
        Spilled       :      24
        
    Routine stack
        Variables     :     280 bytes*
            Reads     :      22 [6.54e+01 ~ 6.7%]
            Writes    :      39 [1.37e+02 ~ 14.0%]
        Spills        :     144 bytes*
            Reads     :      42 [7.42e+01 ~ 7.6%]
            Writes    :      22 [9.87e+01 ~ 10.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::UPDATE_PRECOND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::UPDATE_PRECOND) [7/9=77.8%] comm_cr_mod.f90(901,14)
  -> EXTERN: (906,10) UPDATEDIFFPRECOND
  -> EXTERN: (907,10) UPDATEPTSRCPRECOND
  -> EXTERN: (908,10) UPDATETEMPLATEPRECOND


    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(901,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_update_precond_] comm_cr_mod.f90:901

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rsi rdi r15]
        
    Routine temporaries
        Total         :      14
            Global    :       7
            Local     :       7
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_AMP2X_FULL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_AMP2X_FULL) [8/9=88.9%] comm_cr_mod.f90(406,14)
  -> EXTERN: (418,21) strcmp
  -> INDIRECT-: (437,13)  (*((P64*) comm_cr_mod_mp_cr_amp2x_full_$C$82_V$4399.0.4))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(421,49)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between C%COMM(0) (421:49) and x(:) (421:49)
   remark #17106: parallel dependence: assumed FLOW dependence between x(:) (421:49) and C%COMM(0) (421:49)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between C%COMM(0) (421:49) and x(:) (421:49)
   remark #15346: vector dependence: assumed FLOW dependence between x(:) (421:49) and C%COMM(0) (421:49)

   LOOP BEGIN at comm_cr_mod.f90(421,49)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between C (421:49) and x(:) (421:49)
      remark #17106: parallel dependence: assumed FLOW dependence between x(:) (421:49) and C (421:49)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between C (421:49) and x(:) (421:49)
      remark #15346: vector dependence: assumed FLOW dependence between x(:) (421:49) and C (421:49)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(421,49)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(427,52)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between C%COMM_PTSRC(0) (427:52) and x(:) (427:52)
   remark #17106: parallel dependence: assumed FLOW dependence between x(:) (427:52) and C%COMM_PTSRC(0) (427:52)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between C%COMM_PTSRC(0) (427:52) and x(:) (427:52)
   remark #15346: vector dependence: assumed FLOW dependence between x(:) (427:52) and C%COMM_PTSRC(0) (427:52)

   LOOP BEGIN at comm_cr_mod.f90(427,52)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between x(:) (427:52) and C(:,i) (427:52)
      remark #17106: parallel dependence: assumed ANTI dependence between C(:,i) (427:52) and x(:) (427:52)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between x(:) (427:52) and C(:,i) (427:52)
      remark #15346: vector dependence: assumed ANTI dependence between C(:,i) (427:52) and x(:) (427:52)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(427,52)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(437,8)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(418,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(418,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(418,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(416,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(416,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(418,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(418,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(418,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(406,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_amp2x_full_] comm_cr_mod.f90:406

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     186
            Global    :      75
            Local     :     111
        Regenerable   :      10
        Spilled       :      34
        
    Routine stack
        Variables     :     280 bytes*
            Reads     :      23 [6.54e+01 ~ 5.5%]
            Writes    :      39 [1.37e+02 ~ 11.5%]
        Spills        :     216 bytes*
            Reads     :      50 [7.51e+01 ~ 6.3%]
            Writes    :      28 [9.96e+01 ~ 8.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CR_MOD::CR_COMPUTERHS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CR_MOD::CR_COMPUTERHS) [9/9=100.0%] comm_cr_mod.f90(481,14)
  -> EXTERN: (481,65) for_deallocate
  -> EXTERN: (496,5) for_alloc_allocatable
  -> EXTERN: (496,5) for_check_mult_overflow64
  -> EXTERN: (503,15) COMPUTE_RESIDUAL
  -> EXTERN: (506,12) for_trim
  -> EXTERN: (506,17) _alloca
  -> EXTERN: (506,28) __getsp_inlined
  -> EXTERN: (506,28) __resetsp_inlined
  -> EXTERN: (506,28) for_cpstr
  -> INDIRECT-: (507,16)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$26_V$1384 *)comm_data_mod_mp_data__V$386d)[(EXPR_CONV.SI32.SI64(comm_cr_mod_mp_cr_computerhs_$I_V$48bb.0.6)), l:comm_data_mod_mp_data__V$3876[0(SI32), l:0(SI64)]] + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (510,47) RAND_GAUSS
  -> INDIRECT-: (513,16)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$26_V$1384 *)comm_data_mod_mp_data__V$386d)[(EXPR_CONV.SI32.SI64(comm_cr_mod_mp_cr_computerhs_$I_V$48bb.0.6)), l:comm_data_mod_mp_data__V$3876[0(SI32), l:0(SI64)]] + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (515,16)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$26_V$1384 *)comm_data_mod_mp_data__V$386d)[(EXPR_CONV.SI32.SI64(comm_cr_mod_mp_cr_computerhs_$I_V$48bb.0.6)), l:comm_data_mod_mp_data__V$3876[0(SI32), l:0(SI64)]] + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (519,13)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$MAP$106_V$48c5.0.6))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (520,13)  (*((P64*) *((P64*) (&((COMM_DATA_SET$B$28_V$13a8 *)comm_data_mod_mp_data__V$386d)[(EXPR_CONV.SI32.SI64(comm_cr_mod_mp_cr_computerhs_$I_V$48bb.0.6)), l:comm_data_mod_mp_data__V$3876[0(SI32), l:0(SI64)]] + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (527,19)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$99_V$4840.0.6))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (530,24) strcmp
  -> EXTERN: (532,23) COMM_MAP_MOD^CONSTRUCTOR_MAPINFO
  -> EXTERN: (534,24) COMM_MAP_MOD^CONSTRUCTOR_MAP
  -> INDIRECT-: (538,22)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$MAP$106_V$48c5.0.6))[13(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (541,23) __resetsp_inlined
  -> EXTERN: (541,23) _alloca
  -> EXTERN: (541,23) __getsp_inlined
  -> INDIRECT-: (544,25)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$TM$97_V$481c.0.6))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (545,20) for_realloc_lhs
  -> INDIRECT-: (546,25)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$TM$97_V$481c.0.6))[3(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (549,19)  (*((P64*) *((P64*) (&comm_cr_mod_mp_cr_computerhs_$C$_362$107_V$4b15.0.6->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (550,19) CR_INSERT_COMP_2D
  -> INDIRECT-: (551,19)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$TM$97_V$481c.0.6))[12(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (554,14) for_check_mult_overflow64
  -> EXTERN: (554,14) for_alloc_allocatable
  -> EXTERN: (555,14) for_realloc_lhs
  -> EXTERN: (555,14) for_dealloc_allocatable
  -> INDIRECT-: (555,19)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$_363$109_V$4d17.0.6))[8(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (562,22) CR_INSERT_COMP_2D
  -> EXTERN: (564,14) for_dealloc_allocatable
  -> EXTERN: (566,14) for_alloc_allocatable
  -> EXTERN: (567,14) for_realloc_lhs
  -> EXTERN: (567,14) for_dealloc_allocatable
  -> INDIRECT-: (567,19)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$_364$108_V$4c9f.0.6))[8(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (569,17) for_realloc_lhs
  -> EXTERN: (570,22) CR_INSERT_COMP_2D
  -> EXTERN: (572,14) for_dealloc_allocatable
  -> INDIRECT-: (574,16)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$99_V$4840.0.6))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (577,13)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$MAP$106_V$48c5.0.6))[12(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> INDIRECT-: (584,16)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$99_V$4840.0.6))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (587,21) strcmp
  -> EXTERN: (589,15) for_trim
  -> EXTERN: (589,30) for_cpstr
  -> EXTERN: (591,14) for_alloc_allocatable
  -> EXTERN: (591,14) for_check_mult_overflow64
  -> EXTERN: (594,18) for_trim
  -> EXTERN: (594,23) _alloca
  -> EXTERN: (594,34) __resetsp_inlined
  -> EXTERN: (594,34) for_cpstr
  -> EXTERN: (594,34) __getsp_inlined
  -> EXTERN: (597,34) RAND_GAUSS
  -> EXTERN: (603,23) COMM_MAP_MOD^CONSTRUCTOR_CLONE
  -> INDIRECT-: (604,22)  (*((P64*) *((P64*) (&comm_cr_mod_mp_cr_computerhs_$C$_365$110_V$4dd1.0.6->COMM_DIFFUSE_COMP$CL$37_V$d75 + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (605,17) for_realloc_lhs
  -> INDIRECT-: (606,22)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$MU$96_V$480a.0.6))[12(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (608,19) CR_INSERT_COMP_2D
  -> EXTERN: (609,14) for_dealloc_allocatable
  -> EXTERN: (613,14) for_alloc_allocatable
  -> EXTERN: (613,14) for_check_mult_overflow64
  -> EXTERN: (616,18) for_trim
  -> EXTERN: (616,23) _alloca
  -> EXTERN: (616,34) __resetsp_inlined
  -> EXTERN: (616,34) for_cpstr
  -> EXTERN: (616,34) __getsp_inlined
  -> EXTERN: (619,34) RAND_GAUSS
  -> EXTERN: (629,19) CR_INSERT_COMP_2D
  -> EXTERN: (630,14) for_dealloc_allocatable
  -> EXTERN: (634,14) for_alloc_allocatable
  -> EXTERN: (637,18) for_trim
  -> EXTERN: (637,23) _alloca
  -> EXTERN: (637,34) __resetsp_inlined
  -> EXTERN: (637,34) for_cpstr
  -> EXTERN: (637,34) __getsp_inlined
  -> EXTERN: (638,28) RAND_GAUSS
  -> EXTERN: (642,19) CR_INSERT_COMP_2D
  -> EXTERN: (643,14) for_dealloc_allocatable
  -> INDIRECT-: (646,13)  (*((P64*) comm_cr_mod_mp_cr_computerhs_$C$99_V$4840.0.6))[1(SI64)]
     [[ Unable to inline indirect callsite  <3>]]
  -> EXTERN: (650,3) for_dealloc_allocatable
  -> EXTERN: (650,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_cr_mod.f90(497,5)
   remark #25408: memset generated
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between rhs(:) (497:5) and rhs(:) (497:5)
   remark #17106: parallel dependence: assumed OUTPUT dependence between rhs(:) (497:5) and rhs(:) (497:5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(497,5)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference rhs(:) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.300
      remark #15300: LOOP WAS VECTORIZED
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.500 
      remark #15478: estimated potential speedup: 1.450 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(497,5)
   <Remainder loop for vectorization>
      remark #25015: Estimate of max trip count of loop=12
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(508,11)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:RAND_GAUSS (510:47) and call:RAND_GAUSS (510:47)
   remark #17106: parallel dependence: assumed OUTPUT dependence between call:RAND_GAUSS (510:47) and call:RAND_GAUSS (510:47)
   remark #15382: vectorization support: call to function RAND_GAUSS cannot be vectorized   [ comm_cr_mod.f90(510,47) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:RAND_GAUSS (510:47) and call:RAND_GAUSS (510:47)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:RAND_GAUSS (510:47) and call:RAND_GAUSS (510:47)

   LOOP BEGIN at comm_cr_mod.f90(509,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15382: vectorization support: call to function RAND_GAUSS cannot be vectorized   [ comm_cr_mod.f90(510,47) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(536,17)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(536,17)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between TM(:,:) (536:17) and TM(:,:) (536:17)
      remark #17106: parallel dependence: assumed OUTPUT dependence between TM(:,:) (536:17) and TM(:,:) (536:17)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_cr_mod.f90(536,17)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference TM(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_cr_mod.f90(536,17)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(540,20)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between C(i,j) (541:51) and TM(:,j) (541:23)
   remark #17106: parallel dependence: assumed FLOW dependence between TM(:,j) (541:23) and C(i,j) (541:51)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(541,23)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference at (541:23) has aligned access
      remark #15389: vectorization support: reference TM(:,j) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.179
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.500 
      remark #15478: estimated potential speedup: 1.690 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(541,23)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(541,23)
      remark #25399: memcopy generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between TM(:,j) (541:23) and TM(:,j) (541:23)
      remark #17106: parallel dependence: assumed OUTPUT dependence between TM(:,j) (541:23) and TM(:,j) (541:23)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_cr_mod.f90(541,23)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference TM(:,j) has aligned access
         remark #15388: vectorization support: reference at (541:23) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.333
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.180 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_cr_mod.f90(541,23)
      <Alternate Alignment Vectorized Loop>
         remark #25015: Estimate of max trip count of loop=6
      LOOP END

      LOOP BEGIN at comm_cr_mod.f90(541,23)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(545,20)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TM(:,:) (545:20) and at (545:20)
   remark #17106: parallel dependence: assumed ANTI dependence between at (545:20) and TM(:,:) (545:20)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between TM(:,:) (545:20) and at (545:20)
   remark #15346: vector dependence: assumed ANTI dependence between at (545:20) and TM(:,:) (545:20)

   LOOP BEGIN at comm_cr_mod.f90(545,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TM(:,:) (545:20) and at (545:20)
      remark #17106: parallel dependence: assumed ANTI dependence between at (545:20) and TM(:,:) (545:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TM(:,:) (545:20) and at (545:20)
      remark #15346: vector dependence: assumed ANTI dependence between at (545:20) and TM(:,:) (545:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(545,20)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(567,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)

   LOOP BEGIN at comm_cr_mod.f90(567,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(567,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(567,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(567,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (567:14) and at (567:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (567:14) and TP(:,:) (567:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(567,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(569,17)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(569,17)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(569,17)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference TP(:,:) has aligned access
      remark #15388: vectorization support: reference TP(:,:) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(569,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(555,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)

   LOOP BEGIN at comm_cr_mod.f90(555,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(555,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(555,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_cr_mod.f90(555,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TP(:,:) (555:14) and at (555:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (555:14) and TP(:,:) (555:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(555,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(557,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between TP(k,j) (559:23) and C(k,j,2) (559:23)
   remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (559:23) and TP(k,j) (559:23)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between TP(k,j) (559:23) and C(k,j,2) (559:23)
   remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (559:23) and TP(k,j) (559:23)

   LOOP BEGIN at comm_cr_mod.f90(558,20)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between TP(k,j) (559:23) and C(k,j,2) (559:23)
      remark #17106: parallel dependence: assumed ANTI dependence between C(k,j,2) (559:23) and TP(k,j) (559:23)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between TP(k,j) (559:23) and C(k,j,2) (559:23)
      remark #15346: vector dependence: assumed ANTI dependence between C(k,j,2) (559:23) and TP(k,j) (559:23)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(558,20)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(592,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(592,14)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between ETA(:,:) (592:14) and ETA(:,:) (592:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between ETA(:,:) (592:14) and ETA(:,:) (592:14)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_cr_mod.f90(592,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference ETA(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_cr_mod.f90(592,14)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(595,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (596:20) and i (598:20)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (598:20) and i (596:20)
   remark #15382: vectorization support: call to function RAND_GAUSS cannot be vectorized   [ comm_cr_mod.f90(597,34) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (596:20) and i (598:20)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (598:20) and i (596:20)

   LOOP BEGIN at comm_cr_mod.f90(596,20)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(605,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ETA(:,:) (605:17) and MU(:,:) (605:17)
   remark #17106: parallel dependence: assumed ANTI dependence between MU(:,:) (605:17) and ETA(:,:) (605:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ETA(:,:) (605:17) and MU(:,:) (605:17)
   remark #15346: vector dependence: assumed ANTI dependence between MU(:,:) (605:17) and ETA(:,:) (605:17)

   LOOP BEGIN at comm_cr_mod.f90(605,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ETA(:,:) (605:17) and MU(:,:) (605:17)
      remark #17106: parallel dependence: assumed ANTI dependence between MU(:,:) (605:17) and ETA(:,:) (605:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ETA(:,:) (605:17) and MU(:,:) (605:17)
      remark #15346: vector dependence: assumed ANTI dependence between MU(:,:) (605:17) and ETA(:,:) (605:17)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(605,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(614,14)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_cr_mod.f90(614,14)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between ETA(:,:) (614:14) and ETA(:,:) (614:14)
      remark #17106: parallel dependence: assumed OUTPUT dependence between ETA(:,:) (614:14) and ETA(:,:) (614:14)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_cr_mod.f90(614,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference ETA(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_cr_mod.f90(614,14)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(617,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (618:20) and i (620:20)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (620:20) and i (618:20)
   remark #15382: vectorization support: call to function RAND_GAUSS cannot be vectorized   [ comm_cr_mod.f90(619,34) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (618:20) and i (620:20)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (620:20) and i (618:20)

   LOOP BEGIN at comm_cr_mod.f90(618,20)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(624,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (625:17) and i (627:17)
   remark #17106: parallel dependence: assumed OUTPUT dependence between i (627:17) and i (625:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between i (625:17) and i (627:17)
   remark #15346: vector dependence: assumed OUTPUT dependence between i (627:17) and i (625:17)

   LOOP BEGIN at comm_cr_mod.f90(625,17)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_cr_mod.f90(627,17) ]
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ETA(i,j) (626:20) and C(i,j,1) (626:20)
      remark #17106: parallel dependence: assumed ANTI dependence between C(i,j,1) (626:20) and ETA(i,j) (626:20)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ETA(i,j) (626:20) and C(i,j,1) (626:20)
      remark #15346: vector dependence: assumed ANTI dependence between C(i,j,1) (626:20) and ETA(i,j) (626:20)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_cr_mod.f90(625,17)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_cr_mod.f90(578,5)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(530,24) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(527,14)
      remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_cr_mod.f90(530,24) ]
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(530,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_cr_mod.f90(530,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_cr_mod.f90(584,11)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_cr_mod.f90(587,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_cr_mod.f90(587,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_cr_mod.f90(493,58):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(493,53):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(497,5):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(497,5):remark #34026: call to memset implemented as a call to optimized library version
comm_cr_mod.f90(524,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(524,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(581,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_cr_mod.f90(581,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(587,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(587,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(587,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(530,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(530,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(530,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_cr_mod.f90(536,17):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(536,17):remark #34026: call to memset implemented as a call to optimized library version
comm_cr_mod.f90(541,23):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(541,23):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(541,23):remark #34026: call to memcpy implemented as a call to optimized library version
comm_cr_mod.f90(614,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(614,14):remark #34026: call to memset implemented as a call to optimized library version
comm_cr_mod.f90(592,14):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_cr_mod.f90(592,14):remark #34026: call to memset implemented as a call to optimized library version
comm_cr_mod.f90(481,14):remark #34051: REGISTER ALLOCATION : [comm_cr_mod_mp_cr_computerhs_] comm_cr_mod.f90:481

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1724
            Global    :     386
            Local     :    1338
        Regenerable   :     189
        Spilled       :      84
        
    Routine stack
        Variables     :    3892 bytes*
            Reads     :     277 [1.06e+03 ~ 5.7%]
            Writes    :     453 [1.79e+03 ~ 9.6%]
        Spills        :     616 bytes*
            Reads     :     142 [6.96e+02 ~ 3.7%]
            Writes    :      89 [5.53e+02 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

<2> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

<3> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

