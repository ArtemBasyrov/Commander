Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: sharp._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (sharp._) [1/6=16.7%] sharp.f90(1,8)


    Report from: Code generation optimizations [cg]

sharp.f90(1,8):remark #34051: REGISTER ALLOCATION : [sharp._] sharp.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SHARP::SHARP_MAKE_MMAJOR_REAL_PACKED_ALM_INFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SHARP::SHARP_MAKE_MMAJOR_REAL_PACKED_ALM_INFO) [2/6=33.3%] sharp.f90(116,14)
  -> EXTERN: (127,8) for_check_mult_overflow64
  -> EXTERN: (127,8) for_alloc_allocatable
  -> EXTERN: (128,8) for_realloc_lhs
  -> EXTERN: (129,13) sharp_make_mmajor_real_packed_alm_info
  -> EXTERN: (130,8) for_dealloc_allocatable
  -> EXTERN: (132,13) sharp_make_mmajor_real_packed_alm_info
  -> EXTERN: (134,24) sharp_alm_count
  -> EXTERN: (135,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sharp.f90(128,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference MS_COPY(:) has aligned access
   remark #15389: vectorization support: reference ms(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sharp.f90(128,8)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at sharp.f90(128,8)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference MS_COPY(:) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <ms(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at sharp.f90(128,8)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

sharp.f90(122,45):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
sharp.f90(116,14):remark #34051: REGISTER ALLOCATION : [sharp_mp_sharp_make_mmajor_real_packed_alm_info_] sharp.f90:116

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     190
            Global    :      33
            Local     :     157
        Regenerable   :      25
        Spilled       :       5
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       9 [1.27e+00 ~ 2.2%]
            Writes    :      17 [5.41e+00 ~ 9.5%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SHARP::SHARP_DESTROY_ALM_INFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SHARP::SHARP_DESTROY_ALM_INFO) [3/6=50.0%] sharp.f90(137,14)
  -> EXTERN: (140,10) sharp_destroy_alm_info


    Report from: Code generation optimizations [cg]

sharp.f90(137,14):remark #34051: REGISTER ALLOCATION : [sharp_mp_sharp_destroy_alm_info_] sharp.f90:137

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdi r13]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SHARP::SHARP_MAKE_HEALPIX_GEOM_INFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SHARP::SHARP_MAKE_HEALPIX_GEOM_INFO) [4/6=66.7%] sharp.f90(146,14)
  -> EXTERN: (157,8) for_check_mult_overflow64
  -> EXTERN: (157,8) for_alloc_allocatable
  -> EXTERN: (158,8) for_realloc_lhs
  -> EXTERN: (159,13) sharp_make_subset_healpix_geom_info
  -> EXTERN: (161,8) for_dealloc_allocatable
  -> EXTERN: (163,13) sharp_make_subset_healpix_geom_info
  -> EXTERN: (166,25) sharp_map_size
  -> EXTERN: (167,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sharp.f90(158,8)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference RINGS_COPY(:) has aligned access
   remark #15389: vectorization support: reference rings(:) has unaligned access
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 1.250 
   remark #15478: estimated potential speedup: 3.170 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at sharp.f90(158,8)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at sharp.f90(158,8)
<Multiversioned v2>
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference RINGS_COPY(:) has aligned access
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <rings(:)>, stride is unknown to compiler
   remark #15305: vectorization support: vector length 4
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 8.750 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at sharp.f90(158,8)
<Remainder, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

sharp.f90(153,36):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
sharp.f90(146,14):remark #34051: REGISTER ALLOCATION : [sharp_mp_sharp_make_healpix_geom_info_] sharp.f90:146

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     196
            Global    :      34
            Local     :     162
        Regenerable   :      25
        Spilled       :       6
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       9 [1.27e+00 ~ 2.1%]
            Writes    :      17 [5.41e+00 ~ 9.0%]
        Spills        :       8 bytes*
            Reads     :       1 [3.39e-02 ~ 0.1%]
            Writes    :       1 [3.39e-02 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SHARP::SHARP_DESTROY_GEOM_INFO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SHARP::SHARP_DESTROY_GEOM_INFO) [5/6=83.3%] sharp.f90(169,14)
  -> EXTERN: (172,10) sharp_destroy_geom_info


    Report from: Code generation optimizations [cg]

sharp.f90(169,14):remark #34051: REGISTER ALLOCATION : [sharp_mp_sharp_destroy_geom_info_] sharp.f90:169

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdi r13]
        
    Routine temporaries
        Total         :      11
            Global    :       7
            Local     :       4
        Regenerable   :       0
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SHARP::SHARP_EXECUTE_D

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SHARP::SHARP_EXECUTE_D) [6/6=100.0%] sharp.f90(187,14)
  -> EXTERN: (187,14) _alloca
  -> EXTERN: (187,14) _alloca
  -> EXTERN: (187,14) __getsp_inlined
  -> EXTERN: (220,48) C_LOC_PRIVATE
  -> EXTERN: (221,48) C_LOC_PRIVATE
  -> EXTERN: (225,12) sharp_execute_mpi_fortran
  -> EXTERN: (233,12) sharp_execute
  -> EXTERN: (241,3) __resetsp_inlined


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at sharp.f90(219,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function C_LOC_PRIVATE cannot be vectorized   [ sharp.f90(220,48) ]
   remark #15382: vectorization support: call to function C_LOC_PRIVATE cannot be vectorized   [ sharp.f90(221,48) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at sharp.f90(219,5)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

sharp.f90(187,14):remark #34051: REGISTER ALLOCATION : [sharp_mp_sharp_execute_d_] sharp.f90:187

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     129
            Global    :      42
            Local     :      87
        Regenerable   :      18
        Spilled       :      23
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       6 [7.66e+00 ~ 3.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     144 bytes*
            Reads     :      37 [4.54e+01 ~ 17.8%]
            Writes    :      20 [1.82e+01 ~ 7.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
