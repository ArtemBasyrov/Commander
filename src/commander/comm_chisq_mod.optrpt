Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_chisq_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_chisq_mod._) [1/4=25.0%] comm_chisq_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_chisq_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_chisq_mod._] comm_chisq_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CHISQ_MOD::COMPUTE_CHISQ

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CHISQ_MOD::COMPUTE_CHISQ) [2/4=50.0%] comm_chisq_mod.f90(12,14)
  -> (26,18) COMM_CHISQ_MOD::COMPUTE_RESIDUAL (isz = 2627) (sz = 2638)
     [[ Inlining would exceed -inline-max-total-size value (2627>2000) <1>]]
  -> INDIRECT-: (27,16)  (*((P64*) *((P64*) (&((COMM_DATA_SET$N$23_V$12eb *)comm_data_mod_mp_data__V$2e4a)[(EXPR_CONV.SI32.SI64(comm_chisq_mod_mp_compute_chisq_$I_V$2e84.0.2)), l:comm_data_mod_mp_data__V$2e53[0(SI32), l:0(SI64)]] + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (28,11) for_realloc_lhs
  -> EXTERN: (31,27) CONSTRUCTOR_MAP
  -> INDIRECT-: (32,19)  (*((P64*) comm_chisq_mod_mp_compute_chisq_$RES$47_V$2e75.0.2))[16(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (33,14) for_realloc_lhs
  -> INDIRECT-: (36,16)  (*((P64*) comm_chisq_mod_mp_compute_chisq_$RES$47_V$2e75.0.2))[12(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (41,13) mpi_allreduce_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_chisq_mod.f90(24,36)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_chisq_mod.f90(24,36)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (24:36) and at (24:36)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (24:36) and at (24:36)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_chisq_mod.f90(24,36)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference at (24:36) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(24,36)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(25,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_chisq_mod.f90(28,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (28:11) and at (28:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (28:11) and at (28:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (28:11) and at (28:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_chisq_mod.f90(28,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference RES(:,:) has unaligned access   [ comm_chisq_mod.f90(28,28) ]
         remark #15389: vectorization support: reference RES(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 0.179
         remark #15300: LOOP WAS VECTORIZED
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 11 
         remark #15477: vector cost: 7.000 
         remark #15478: estimated potential speedup: 1.550 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(28,11)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference RES(:,:) has unaligned access   [ comm_chisq_mod.f90(28,28) ]
         remark #15389: vectorization support: reference RES(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 1.111
      LOOP END
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(33,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between CHISQ (33:14) and at (33:14)
      remark #17106: parallel dependence: assumed FLOW dependence between at (33:14) and CHISQ (33:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between CHISQ (33:14) and at (33:14)
      remark #15346: vector dependence: assumed FLOW dependence between at (33:14) and CHISQ (33:14)

      LOOP BEGIN at comm_chisq_mod.f90(33,14)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed ANTI dependence between CHISQ (33:14) and at (33:14)
         remark #17106: parallel dependence: assumed FLOW dependence between at (33:14) and CHISQ (33:14)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between CHISQ (33:14) and at (33:14)
         remark #15346: vector dependence: assumed FLOW dependence between at (33:14) and CHISQ (33:14)
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(33,14)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(35,71)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (35:71) and at (35:71)
      remark #17106: parallel dependence: assumed FLOW dependence between at (35:71) and at (35:71)
      remark #17106: parallel dependence: assumed ANTI dependence between at (35:71) and at (35:71)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_chisq_mod.f90(35,71)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(35,71)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference RES(:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 1.450
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 6 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 2.260 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(35,71)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_chisq_mod.f90(24,36):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_chisq_mod.f90(24,36):remark #34026: call to memset implemented as a call to optimized library version
comm_chisq_mod.f90(12,14):remark #34051: REGISTER ALLOCATION : [comm_chisq_mod_mp_compute_chisq_] comm_chisq_mod.f90:12

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     300
            Global    :      89
            Local     :     211
        Regenerable   :      43
        Spilled       :      20
        
    Routine stack
        Variables     :     712 bytes*
            Reads     :      40 [7.61e+01 ~ 2.1%]
            Writes    :      75 [1.09e+02 ~ 3.0%]
        Spills        :     136 bytes*
            Reads     :      39 [6.39e+01 ~ 1.8%]
            Writes    :      23 [1.80e+01 ~ 0.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CHISQ_MOD::COMPUTE_RESIDUAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CHISQ_MOD::COMPUTE_RESIDUAL) [3/4=75.0%] comm_chisq_mod.f90(46,12)
  -> EXTERN: (65,14) CONSTRUCTOR_MAP
  -> EXTERN: (66,14) CONSTRUCTOR_MAP
  -> EXTERN: (76,18) for_trim
  -> EXTERN: (76,32) for_cpstr
  -> EXTERN: (76,35) for_trim
  -> INDIRECT-: (83,16)  (*((P64*) comm_chisq_mod_mp_compute_residual_$C$49_V$2ff1.0.3))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (87,21) strcmp
  -> EXTERN: (89,11) for_check_mult_overflow64
  -> EXTERN: (89,11) for_alloc_allocatable
  -> EXTERN: (90,11) for_realloc_lhs
  -> EXTERN: (90,11) for_dealloc_allocatable
  -> INDIRECT-: (90,21)  (*((P64*) comm_chisq_mod_mp_compute_residual_$C$_242$53_V$32f8.0.3))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (91,11) for_realloc_lhs
  -> EXTERN: (93,11) for_dealloc_allocatable
  -> EXTERN: (96,11) for_check_mult_overflow64
  -> EXTERN: (96,11) for_alloc_allocatable
  -> EXTERN: (97,11) for_realloc_lhs
  -> EXTERN: (97,11) for_dealloc_allocatable
  -> INDIRECT-: (97,23)  (*((P64*) comm_chisq_mod_mp_compute_residual_$C$_243$55_V$33ef.0.3))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (98,11) for_realloc_lhs
  -> EXTERN: (99,11) for_dealloc_allocatable
  -> EXTERN: (101,11) for_check_mult_overflow64
  -> EXTERN: (101,11) for_alloc_allocatable
  -> EXTERN: (102,11) for_realloc_lhs
  -> EXTERN: (102,11) for_dealloc_allocatable
  -> INDIRECT-: (102,23)  (*((P64*) comm_chisq_mod_mp_compute_residual_$C$_244$54_V$3374.0.3))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (103,11) for_realloc_lhs
  -> EXTERN: (104,11) for_dealloc_allocatable
  -> INDIRECT-: (106,13)  (*((P64*) comm_chisq_mod_mp_compute_residual_$C$49_V$2ff1.0.3))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (108,18)  (*((P64*) *((P64*) (comm_chisq_mod_mp_compute_residual_$RES_V$2fb4.0.3 + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (111,5) for_realloc_lhs
  -> INDIRECT-: (115,10)  (*((P64*) comm_chisq_mod_mp_compute_residual_$PTSRC$48_V$2fde.0.3))[12(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (117,3) for_dealloc_allocatable
  -> EXTERN: (117,3) for_dealloc_allocatable
  -> EXTERN: (117,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_chisq_mod.f90(75,11)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (76:18) and at (76:32)
   remark #17106: parallel dependence: assumed ANTI dependence between at (76:32) and at (76:18)
   remark #15382: vectorization support: call to function for_trim cannot be vectorized   [ comm_chisq_mod.f90(76,18) ]
   remark #15382: vectorization support: call to function for_trim cannot be vectorized   [ comm_chisq_mod.f90(76,35) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between at (76:18) and at (76:32)
   remark #15346: vector dependence: assumed ANTI dependence between at (76:32) and at (76:18)
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(90,11)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
   remark #15346: vector dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)

   LOOP BEGIN at comm_chisq_mod.f90(90,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(90,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(90,11)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(90,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (90:11) and at (90:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (90:11) and ALM(:,:) (90:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(90,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(91,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_chisq_mod.f90(91,11)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(91,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15389: vectorization support: reference at (91:11) has unaligned access
      remark #15388: vectorization support: reference ALM(:,:) has aligned access
      remark #15389: vectorization support: reference at (91:11) has unaligned access
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.450
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 8 
      remark #15477: vector cost: 5.000 
      remark #15478: estimated potential speedup: 1.560 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(91,11)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(102,11)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
   remark #15346: vector dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)

   LOOP BEGIN at comm_chisq_mod.f90(102,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(102,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(102,11)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(102,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (102:11) and at (102:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (102:11) and MAP(:,:) (102:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(102,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(103,11)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PTSRC(:,:) (103:11) and MAP(:,:) (103:11)
   remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (103:11) and PTSRC(:,:) (103:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PTSRC(:,:) (103:11) and MAP(:,:) (103:11)
   remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (103:11) and PTSRC(:,:) (103:11)

   LOOP BEGIN at comm_chisq_mod.f90(103,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PTSRC(:,:) (103:11) and MAP(:,:) (103:11)
      remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (103:11) and PTSRC(:,:) (103:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PTSRC(:,:) (103:11) and MAP(:,:) (103:11)
      remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (103:11) and PTSRC(:,:) (103:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(103,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(97,11)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
   remark #15346: vector dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)

   LOOP BEGIN at comm_chisq_mod.f90(97,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(97,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(97,11)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
   remark #17106: parallel dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(97,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (97:11) and at (97:11)
      remark #15346: vector dependence: assumed ANTI dependence between at (97:11) and MAP(:,:) (97:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(97,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(98,11)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between PTSRC(:,:) (98:11) and MAP(:,:) (98:11)
   remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (98:11) and PTSRC(:,:) (98:11)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between PTSRC(:,:) (98:11) and MAP(:,:) (98:11)
   remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (98:11) and PTSRC(:,:) (98:11)

   LOOP BEGIN at comm_chisq_mod.f90(98,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between PTSRC(:,:) (98:11) and MAP(:,:) (98:11)
      remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (98:11) and PTSRC(:,:) (98:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between PTSRC(:,:) (98:11) and MAP(:,:) (98:11)
      remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (98:11) and PTSRC(:,:) (98:11)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(98,11)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(111,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between PTSRC (111:5) and at (111:5)
   remark #17106: parallel dependence: assumed FLOW dependence between at (111:5) and PTSRC (111:5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between PTSRC (111:5) and at (111:5)
   remark #15346: vector dependence: assumed FLOW dependence between at (111:5) and PTSRC (111:5)

   LOOP BEGIN at comm_chisq_mod.f90(111,5)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between PTSRC (111:5) and at (111:5)
      remark #17106: parallel dependence: assumed FLOW dependence between at (111:5) and PTSRC (111:5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between PTSRC (111:5) and at (111:5)
      remark #15346: vector dependence: assumed FLOW dependence between at (111:5) and PTSRC (111:5)
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_chisq_mod.f90(83,11)
   remark #15536: loop was not vectorized: inner loop throttling prevents vectorization of this outer loop. Refer to inner loop message for more details.   [ comm_chisq_mod.f90(87,21) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_chisq_mod.f90(87,21)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_chisq_mod.f90(87,21)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_chisq_mod.f90(59,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(58,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(58,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(69,5):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_chisq_mod.f90(69,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(87,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(87,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(87,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(46,12):remark #34051: REGISTER ALLOCATION : [comm_chisq_mod_mp_compute_residual_] comm_chisq_mod.f90:46

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1119
            Global    :     258
            Local     :     861
        Regenerable   :     114
        Spilled       :      71
        
    Routine stack
        Variables     :    3448 bytes*
            Reads     :     167 [2.20e+02 ~ 4.4%]
            Writes    :     292 [3.42e+02 ~ 6.9%]
        Spills        :     488 bytes*
            Reads     :     100 [2.40e+02 ~ 4.8%]
            Writes    :      72 [1.24e+02 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_CHISQ_MOD::OUTPUT_SIGNALS_PER_BAND

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_CHISQ_MOD::OUTPUT_SIGNALS_PER_BAND) [4/4=100.0%] comm_chisq_mod.f90(119,14)
  -> EXTERN: (132,15) CONSTRUCTOR_MAP
  -> EXTERN: (137,15) for_trim
  -> EXTERN: (137,28) for_cpstr
  -> INDIRECT-: (138,19)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$C$56_V$34cc.0.4))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (145,24) strcmp
  -> EXTERN: (147,14) for_check_mult_overflow64
  -> EXTERN: (147,14) for_alloc_allocatable
  -> EXTERN: (148,14) for_realloc_lhs
  -> EXTERN: (148,14) for_dealloc_allocatable
  -> INDIRECT-: (148,24)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$C$_245$61_V$3796.0.4))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (149,19)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$OUT$60_V$3516.0.4))[14(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (150,19)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$OUT$60_V$3516.0.4))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (151,14) for_dealloc_allocatable
  -> EXTERN: (153,14) for_check_mult_overflow64
  -> EXTERN: (153,14) for_alloc_allocatable
  -> EXTERN: (154,14) for_realloc_lhs
  -> EXTERN: (154,14) for_dealloc_allocatable
  -> INDIRECT-: (154,24)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$C$_246$63_V$3867.0.4))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (155,14) for_realloc_lhs
  -> EXTERN: (156,14) for_dealloc_allocatable
  -> EXTERN: (160,17) for_alloc_allocatable
  -> EXTERN: (160,17) for_check_mult_overflow64
  -> EXTERN: (161,17) for_dealloc_allocatable
  -> EXTERN: (161,17) for_realloc_lhs
  -> INDIRECT-: (161,27)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$C$_247$62_V$37ec.0.4))[7(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (162,17) for_realloc_lhs
  -> EXTERN: (163,17) for_dealloc_allocatable
  -> EXTERN: (166,11) __resetsp_inlined
  -> EXTERN: (166,11) for_concat
  -> EXTERN: (166,11) __getsp_inlined
  -> EXTERN: (166,22) for_trim
  -> EXTERN: (166,27) _alloca
  -> EXTERN: (166,41) for_trim
  -> EXTERN: (166,61) for_trim
  -> EXTERN: (166,87) for_trim
  -> EXTERN: (166,92) _alloca
  -> INDIRECT-: (168,27)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$OUT$60_V$3516.0.4))[9(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (169,16)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$C$56_V$34cc.0.4))[1(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> INDIRECT-: (175,10)  (*((P64*) comm_chisq_mod_mp_output_signals_per_band_$OUT$60_V$3516.0.4))[12(SI64)]
     [[ Unable to inline indirect callsite  <2>]]
  -> EXTERN: (177,3) for_dealloc_allocatable
  -> EXTERN: (177,3) for_dealloc_allocatable
  -> EXTERN: (177,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_chisq_mod.f90(143,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_chisq_mod.f90(143,11)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between OUT(:,:) (143:11) and OUT(:,:) (143:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between OUT(:,:) (143:11) and OUT(:,:) (143:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_chisq_mod.f90(143,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference OUT(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(143,11)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(144,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_chisq_mod.f90(144,11)
      remark #25408: memset generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed OUTPUT dependence between OUT(:,:) (144:11) and OUT(:,:) (144:11)
      remark #17106: parallel dependence: assumed OUTPUT dependence between OUT(:,:) (144:11) and OUT(:,:) (144:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized
      remark #25015: Estimate of max trip count of loop=1

      LOOP BEGIN at comm_chisq_mod.f90(144,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference OUT(:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 2.500 
         remark #15478: estimated potential speedup: 1.450 
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_chisq_mod.f90(144,11)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=12
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(148,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)

   LOOP BEGIN at comm_chisq_mod.f90(148,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(148,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(148,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(148,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between ALM(:,:) (148:14) and at (148:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (148:14) and ALM(:,:) (148:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(148,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(161,17)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
   remark #17106: parallel dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
   remark #15346: vector dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)

   LOOP BEGIN at comm_chisq_mod.f90(161,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
      remark #17106: parallel dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
      remark #15346: vector dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(161,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(161,17)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
   remark #17106: parallel dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(161,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
      remark #17106: parallel dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (161:17) and at (161:17)
      remark #15346: vector dependence: assumed ANTI dependence between at (161:17) and MAP(:,:) (161:17)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(161,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(162,17)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between OUT(:,:) (162:17) and MAP(:,:) (162:17)
   remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (162:17) and OUT(:,:) (162:17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between OUT(:,:) (162:17) and MAP(:,:) (162:17)
   remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (162:17) and OUT(:,:) (162:17)

   LOOP BEGIN at comm_chisq_mod.f90(162,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between OUT(:,:) (162:17) and MAP(:,:) (162:17)
      remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (162:17) and OUT(:,:) (162:17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between OUT(:,:) (162:17) and MAP(:,:) (162:17)
      remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (162:17) and OUT(:,:) (162:17)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(162,17)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(154,14)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
   remark #15346: vector dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)

   LOOP BEGIN at comm_chisq_mod.f90(154,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(154,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(154,14)
<Multiversioned v2>
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
   remark #17106: parallel dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning

   LOOP BEGIN at comm_chisq_mod.f90(154,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between MAP(:,:) (154:14) and at (154:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (154:14) and MAP(:,:) (154:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(154,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at comm_chisq_mod.f90(155,14)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between OUT(:,:) (155:14) and MAP(:,:) (155:14)
   remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (155:14) and OUT(:,:) (155:14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between OUT(:,:) (155:14) and MAP(:,:) (155:14)
   remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (155:14) and OUT(:,:) (155:14)

   LOOP BEGIN at comm_chisq_mod.f90(155,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between OUT(:,:) (155:14) and MAP(:,:) (155:14)
      remark #17106: parallel dependence: assumed ANTI dependence between MAP(:,:) (155:14) and OUT(:,:) (155:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between OUT(:,:) (155:14) and MAP(:,:) (155:14)
      remark #15346: vector dependence: assumed ANTI dependence between MAP(:,:) (155:14) and OUT(:,:) (155:14)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_chisq_mod.f90(155,14)
   <Remainder>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at comm_chisq_mod.f90(171,5)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at comm_chisq_mod.f90(138,14)
      remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
      remark #17102: loop was not parallelized: not a parallelization candidate

      LOOP BEGIN at comm_chisq_mod.f90(145,24)
         remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
         remark #17102: loop was not parallelized: not a parallelization candidate

         LOOP BEGIN at comm_chisq_mod.f90(145,24)
            remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
            remark #17102: loop was not parallelized: not a parallelization candidate
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_chisq_mod.f90(129,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(128,55):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(128,50):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(135,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_chisq_mod.f90(135,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(143,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_chisq_mod.f90(143,11):remark #34026: call to memset implemented as a call to optimized library version
comm_chisq_mod.f90(144,11):remark #34014: optimization advice for memset: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_chisq_mod.f90(144,11):remark #34026: call to memset implemented as a call to optimized library version
comm_chisq_mod.f90(145,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(145,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(145,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_chisq_mod.f90(119,14):remark #34051: REGISTER ALLOCATION : [comm_chisq_mod_mp_output_signals_per_band_] comm_chisq_mod.f90:119

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :    1140
            Global    :     252
            Local     :     888
        Regenerable   :     150
        Spilled       :      62
        
    Routine stack
        Variables     :    4796 bytes*
            Reads     :     175 [7.22e+02 ~ 4.3%]
            Writes    :     278 [1.29e+03 ~ 7.7%]
        Spills        :     464 bytes*
            Reads     :      88 [5.62e+02 ~ 3.3%]
            Writes    :      66 [2.79e+02 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> Inlining this subprogram at this call site would increase the size of the 
    caller more than is currently acceptable. Use the option 
    -inline-max-total-size to increase the size that all subprograms can 
    grow through inlining, add "!DIR$ATTRIBUTES OPTIMIZATION_PARAMETER:
    "INLINE_MAX_PER_ROUTINE"" to the caller, add "!DIR$ATTRIBUTES FORCEINLINE"
    to the declaration of the called subprogram, or add "!DIR$ FORCEINLINE" 
    before the call site.

<2> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

