Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_data_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_data_mod._) [1/9=11.1%] comm_data_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_data_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_data_mod._] comm_data_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::RJ2DATA

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::RJ2DATA) [2/9=22.2%] comm_data_mod.f90(227,12)
  -> EXTERN: (233,18) memmove
  -> EXTERN: (233,18) _alloca
  -> EXTERN: (233,18) for_trim
  -> EXTERN: (234,11) for_cpstr
  -> EXTERN: (236,11) for_cpstr
  -> EXTERN: (238,11) for_cpstr
  -> EXTERN: (240,11) for_cpstr
  -> EXTERN: (242,11) for_cpstr
  -> EXTERN: (243,8) __resetsp_inlined
  -> EXTERN: (243,8) __getsp_inlined


    Report from: Code generation optimizations [cg]

comm_data_mod.f90(233,18):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_data_mod.f90(233,18):remark #34026: call to memmove implemented as a call to optimized library version
comm_data_mod.f90(227,12):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_rj2data_] comm_data_mod.f90:227

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8 r12-r15 zmm0]
        
    Routine temporaries
        Total         :      78
            Global    :      20
            Local     :      58
        Regenerable   :      26
        Spilled       :       4
        
    Routine stack
        Variables     :     512 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::SMOOTH_INSIDE_PROCMASK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::SMOOTH_INSIDE_PROCMASK) [3/9=33.3%] comm_data_mod.f90(324,14)
  -> EXTERN: (334,12) CONSTRUCTOR_CLONE
  -> INDIRECT-: (335,10)  (*((P64*) comm_data_mod_mp_smooth_inside_procmask_$MAP$36_V$2555.0.6))[19(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (342,5) for_deallocate_all
  -> EXTERN: (342,5) for_finalize


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(336,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (337:8) and at (339:11)
   remark #17106: parallel dependence: assumed FLOW dependence between at (339:11) and at (337:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (337:8) and at (339:11)
   remark #15346: vector dependence: assumed FLOW dependence between at (339:11) and at (337:8)

   LOOP BEGIN at comm_data_mod.f90(337,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (338:11) and at (339:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (339:11) and at (338:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (338:11) and at (339:11)
      remark #15346: vector dependence: assumed FLOW dependence between at (339:11) and at (338:11)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(324,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_smooth_inside_procmask_] comm_data_mod.f90:324

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm2]
        
    Routine temporaries
        Total         :     113
            Global    :      17
            Local     :      96
        Regenerable   :      10
        Spilled       :       3
        
    Routine stack
        Variables     :     256 bytes*
            Reads     :      17 [4.56e+01 ~ 3.1%]
            Writes    :      26 [2.60e+01 ~ 1.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::APPLY_PROC_MASK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::APPLY_PROC_MASK) [4/9=44.4%] comm_data_mod.f90(346,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(353,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   remark #17106: parallel dependence: assumed FLOW dependence between at (353:8) and at (352:30)
   remark #17106: parallel dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   remark #15346: vector dependence: assumed FLOW dependence between at (353:8) and at (352:30)
   remark #15346: vector dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (352:30) and at (353:8)

   LOOP BEGIN at comm_data_mod.f90(353,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between at (353:8) and at (353:8)
      remark #17106: parallel dependence: assumed ANTI dependence between at (353:8) and at (353:8)
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(353,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (352:30) and at (353:8)
      remark #17106: parallel dependence: assumed FLOW dependence between at (353:8) and at (352:30)
      remark #17106: parallel dependence: assumed ANTI dependence between at (352:30) and at (353:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (353:8) and at (353:8)
      remark #17106: parallel dependence: assumed OUTPUT dependence between at (353:8) and at (353:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (352:30) and at (353:8)
      remark #15346: vector dependence: assumed FLOW dependence between at (353:8) and at (352:30)
      remark #15346: vector dependence: assumed ANTI dependence between at (352:30) and at (353:8)
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(346,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_apply_proc_mask_] comm_data_mod.f90:346

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :      48
            Global    :      33
            Local     :      15
        Regenerable   :       3
        Spilled       :      15
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      88 bytes*
            Reads     :      11 [2.52e+00 ~ 1.9%]
            Writes    :      11 [1.80e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::SMOOTH_MAP

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::SMOOTH_MAP) [5/9=55.6%] comm_data_mod.f90(358,14)
  -> EXTERN: (368,16) CONSTRUCTOR_MAP
  -> INDIRECT-: (372,13)  (*((P64*) *((P64*) (comm_data_mod_mp_smooth_map_$MAP_IN_V$264b.0.8 + 56(SI64)))))[16(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (373,13)  (*((P64*) *((P64*) (comm_data_mod_mp_smooth_map_$MAP_OUT_V$264f.0.8 + 56(SI64)))))[3(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (375,13)  (*((P64*) *((P64*) (comm_data_mod_mp_smooth_map_$MAP_IN_V$264b.0.8 + 56(SI64)))))[13(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (397,10)  (*((P64*) *((P64*) (comm_data_mod_mp_smooth_map_$MAP_OUT_V$264f.0.8 + 56(SI64)))))[1(SI64)]
     [[ Unable to inline indirect callsite  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(381,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between map_out(i,:) (384:11) and map_out(i,j) (391:14)
   remark #17106: parallel dependence: assumed OUTPUT dependence between map_out(i,j) (391:14) and map_out(i,:) (384:11)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_data_mod.f90(384,11)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map_out(i,:)>, stride is unknown to compiler
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15453: unmasked strided stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 3.000 
      remark #15478: estimated potential speedup: 1.320 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(384,11)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(387,8)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <bl_in(l,j)>, stride is unknown to compiler   [ comm_data_mod.f90(388,15) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map_out(i,j)>, masked, stride is unknown to compiler   [ comm_data_mod.f90(389,14) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <map_out(i,j)>, stride is unknown to compiler   [ comm_data_mod.f90(389,33) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <bl_out(l,j)>, masked, stride is unknown to compiler   [ comm_data_mod.f90(389,52) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <bl_in(l,j)>, stride is unknown to compiler   [ comm_data_mod.f90(389,66) ]
      remark #15329: vectorization support: non-unit strided store was emulated for the variable <map_out(i,j)>, stride is unknown to compiler   [ comm_data_mod.f90(391,14) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <map_out(i,j)>, stride is unknown to compiler   [ comm_data_mod.f90(391,14) ]
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 0.008
      remark #15452: unmasked strided loads: 4 
      remark #15453: unmasked strided stores: 1 
      remark #15460: masked strided loads: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 43 
      remark #15477: vector cost: 62.500 
      remark #15478: estimated potential speedup: 0.690 
      remark #15486: divides: 1 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(387,8)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(358,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_smooth_map_] comm_data_mod.f90:358

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     179
            Global    :      73
            Local     :     106
        Regenerable   :       9
        Spilled       :      38
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :      12 [1.20e+01 ~ 1.2%]
            Writes    :      10 [1.00e+01 ~ 1.0%]
        Spills        :     256 bytes*
            Reads     :      37 [1.02e+02 ~ 10.3%]
            Writes    :      32 [5.64e+01 ~ 5.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::APPLY_SOURCE_MASK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::APPLY_SOURCE_MASK) [6/9=66.7%] comm_data_mod.f90(265,14)
  -> EXTERN: (276,12) GETLUN
  -> EXTERN: (277,5) __resetsp_inlined
  -> EXTERN: (277,5) for_open
  -> EXTERN: (277,5) __getsp_inlined
  -> EXTERN: (277,20) for_trim
  -> EXTERN: (277,25) _alloca
  -> EXTERN: (279,8) for_read_seq_fmt
  -> EXTERN: (280,8) for_cpystr
  -> EXTERN: (280,15) for_trim
  -> EXTERN: (280,20) for_adjustl
  -> EXTERN: (282,8) for_read_int_lis_xmit
  -> EXTERN: (282,8) for_read_int_lis_xmit
  -> EXTERN: (282,8) for_read_int_lis
  -> EXTERN: (283,13) ANG2VEC
  -> EXTERN: (284,8) for_alloc_allocatable
  -> EXTERN: (284,8) for_check_mult_overflow64
  -> EXTERN: (285,13) QUERY_DISC
  -> EXTERN: (301,15) LOCATE_INT
  -> EXTERN: (318,8) for_dealloc_allocatable
  -> EXTERN: (320,11) for_close
  -> EXTERN: (322,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(285,13)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_data_mod.f90(288,8)
      remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
      remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation : ( 1 2 ) --> ( 2 1 ) 
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between LISTPIX(j) (289:11) and LISTPIX(l+1) (296:11)
      remark #17106: parallel dependence: assumed FLOW dependence between LISTPIX(l+1) (296:11) and LISTPIX(j) (289:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between LISTPIX(j) (289:11) and LISTPIX(l+1) (296:11)
      remark #15346: vector dependence: assumed FLOW dependence between LISTPIX(l+1) (296:11) and LISTPIX(j) (289:11)

      LOOP BEGIN at comm_data_mod.f90(291,11)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed ANTI dependence between LISTPIX(l) (292:29) and LISTPIX(l+1) (293:14)
         remark #17106: parallel dependence: assumed FLOW dependence between LISTPIX(l+1) (293:14) and LISTPIX(l) (292:29)
         remark #17106: parallel dependence: assumed ANTI dependence between LISTPIX(l) (293:14) and LISTPIX(l+1) (293:14)
         remark #17106: parallel dependence: assumed FLOW dependence between LISTPIX(l+1) (293:14) and LISTPIX(l) (293:14)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ comm_data_mod.f90(294,14) ]
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(304,32)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_data_mod.f90(305,17)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15329: vectorization support: non-unit strided store was emulated for the variable <mask(j,:)>, stride is unknown to compiler
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15300: LOOP WAS VECTORIZED
         remark #15453: unmasked strided stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 3.000 
         remark #15478: estimated potential speedup: 1.320 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(305,17)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(274,48):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(265,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_apply_source_mask_] comm_data_mod.f90:265

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     329
            Global    :      84
            Local     :     245
        Regenerable   :     100
        Spilled       :      14
        
    Routine stack
        Variables     :    1996 bytes*
            Reads     :      16 [1.77e+01 ~ 2.0%]
            Writes    :      52 [6.21e+01 ~ 7.0%]
        Spills        :      72 bytes*
            Reads     :      12 [1.12e+01 ~ 1.3%]
            Writes    :       9 [8.25e+00 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::GET_MAPFILE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::GET_MAPFILE) [7/9=77.8%] comm_data_mod.f90(401,14)
  -> EXTERN: (410,5) for_cpystr
  -> EXTERN: (410,16) for_trim
  -> EXTERN: (410,21) for_adjustl
  -> EXTERN: (411,20) for_trim
  -> EXTERN: (411,25) for_adjustl
  -> EXTERN: (413,25) for_cpstr
  -> EXTERN: (414,8) for_cpystr
  -> EXTERN: (415,30) for_cpstr
  -> EXTERN: (417,15) GETLUN
  -> EXTERN: (418,8) __getsp_inlined
  -> EXTERN: (418,8) for_open
  -> EXTERN: (418,8) __resetsp_inlined
  -> EXTERN: (418,24) for_trim
  -> EXTERN: (418,47) _alloca
  -> EXTERN: (418,47) for_concat
  -> EXTERN: (418,49) for_trim
  -> EXTERN: (420,11) for_read_seq_fmt
  -> EXTERN: (422,14) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(419,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (420:11) and at (420:11)
   remark #17106: parallel dependence: assumed OUTPUT dependence between at (420:11) and at (420:11)
   remark #15382: vectorization support: call to function for_read_seq_fmt cannot be vectorized   [ comm_data_mod.f90(420,11) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between at (420:11) and at (420:11)
   remark #15346: vector dependence: assumed OUTPUT dependence between at (420:11) and at (420:11)
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(401,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_get_mapfile_] comm_data_mod.f90:401

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     144
            Global    :      41
            Local     :     103
        Regenerable   :      72
        Spilled       :       7
        
    Routine stack
        Variables     :    3744 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      15 [3.12e+00 ~ 3.2%]
        Spills        :      16 bytes*
            Reads     :       4 [4.38e-01 ~ 0.4%]
            Writes    :       2 [2.20e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::DUMP_UNIT_CONVERSION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::DUMP_UNIT_CONVERSION) [8/9=88.9%] comm_data_mod.f90(248,14)
  -> EXTERN: (253,12) GETLUN
  -> EXTERN: (254,5) __resetsp_inlined
  -> EXTERN: (254,5) for_open
  -> EXTERN: (254,5) __getsp_inlined
  -> EXTERN: (254,21) for_trim
  -> EXTERN: (254,26) _alloca
  -> EXTERN: (254,30) for_concat
  -> EXTERN: (254,30) _alloca
  -> EXTERN: (255,5) __resetsp_inlined
  -> EXTERN: (255,5) for_write_seq_lis
  -> EXTERN: (255,5) __getsp_inlined
  -> EXTERN: (255,69) memmove
  -> EXTERN: (255,69) _alloca
  -> EXTERN: (259,8) for_write_seq_fmt
  -> EXTERN: (259,8) for_write_seq_fmt_xmit
  -> EXTERN: (259,8) for_write_seq_fmt_xmit
  -> EXTERN: (259,8) for_write_seq_fmt_xmit
  -> EXTERN: (259,8) for_write_seq_fmt_xmit
  -> EXTERN: (259,8) for_write_seq_fmt_xmit
  -> EXTERN: (259,48) for_trim
  -> EXTERN: (259,69) for_trim
  -> EXTERN: (262,11) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(257,5)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed FLOW dependence between at (259:48) and at (259:8)
   remark #17106: parallel dependence: assumed ANTI dependence between at (259:8) and at (259:48)
   remark #15382: vectorization support: call to function for_trim cannot be vectorized   [ comm_data_mod.f90(259,48) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15382: vectorization support: call to function for_trim cannot be vectorized   [ comm_data_mod.f90(259,69) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15382: vectorization support: call to function for_write_seq_fmt_xmit cannot be vectorized   [ comm_data_mod.f90(259,8) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between at (259:48) and at (259:8)
   remark #15346: vector dependence: assumed ANTI dependence between at (259:8) and at (259:48)
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(255,69):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_data_mod.f90(255,69):remark #34026: call to memmove implemented as a call to optimized library version
comm_data_mod.f90(248,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_dump_unit_conversion_] comm_data_mod.f90:248

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     142
            Global    :      50
            Local     :      92
        Regenerable   :      73
        Spilled       :       6
        
    Routine stack
        Variables     :    1232 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      22 [6.20e+01 ~ 12.2%]
        Spills        :       8 bytes*
            Reads     :       1 [5.44e+00 ~ 1.1%]
            Writes    :       1 [9.79e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_DATA_MOD::INITIALIZE_DATA_MOD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_DATA_MOD::INITIALIZE_DATA_MOD) [9/9=100.0%] comm_data_mod.f90(42,14)
  -> EXTERN: (57,5) for_concat
  -> EXTERN: (57,11) for_trim
  -> EXTERN: (58,5) for_alloc_allocatable
  -> EXTERN: (58,5) for_check_mult_overflow64
  -> EXTERN: (64,8) memcpy
  -> EXTERN: (66,8) memcpy
  -> EXTERN: (68,8) for_cpystr
  -> EXTERN: (71,8) memcpy
  -> EXTERN: (73,15) for_write_seq_fmt_xmit
  -> EXTERN: (73,15) for_write_seq_fmt_xmit
  -> EXTERN: (73,15) for_write_seq_fmt_xmit
  -> EXTERN: (73,15) for_write_seq_fmt
  -> EXTERN: (73,74) for_trim
  -> EXTERN: (74,13) __getsp_inlined
  -> EXTERN: (74,13) UPDATE_STATUS
  -> EXTERN: (74,13) __resetsp_inlined
  -> EXTERN: (74,42) _alloca
  -> EXTERN: (74,42) for_concat
  -> EXTERN: (74,44) for_trim
  -> EXTERN: (78,24) CONSTRUCTOR_MAPINFO
  -> (80,13) COMM_DATA_MOD::GET_MAPFILE (isz = 225) (sz = 236)
     [[ Inlining inhibited by overrideable criterion  <2>]]
  -> EXTERN: (82,8) __getsp_inlined
  -> EXTERN: (82,8) __resetsp_inlined
  -> EXTERN: (82,24) CONSTRUCTOR_MAP
  -> EXTERN: (82,47) for_trim
  -> EXTERN: (82,56) _alloca
  -> EXTERN: (82,56) for_concat
  -> EXTERN: (82,58) for_trim
  -> EXTERN: (98,12) for_trim
  -> EXTERN: (98,35) for_cpstr
  -> EXTERN: (99,11) __getsp_inlined
  -> EXTERN: (99,11) __resetsp_inlined
  -> EXTERN: (99,31) CONSTRUCTOR_MAP
  -> EXTERN: (99,54) for_trim
  -> EXTERN: (99,77) for_concat
  -> EXTERN: (99,77) _alloca
  -> EXTERN: (99,79) for_trim
  -> EXTERN: (104,24) CONSTRUCTOR_CLONE
  -> EXTERN: (105,13) UPDATE_STATUS
  -> EXTERN: (109,15) for_trim
  -> EXTERN: (109,47) for_cpstr
  -> EXTERN: (110,14) __getsp_inlined
  -> EXTERN: (110,14) __resetsp_inlined
  -> EXTERN: (110,34) CONSTRUCTOR_MAP
  -> EXTERN: (110,57) for_trim
  -> EXTERN: (110,80) for_concat
  -> EXTERN: (110,80) _alloca
  -> EXTERN: (110,82) for_trim
  -> EXTERN: (116,21) for_trim
  -> EXTERN: (116,21) _alloca
  -> EXTERN: (116,21) memmove
  -> EXTERN: (117,14) for_cpstr
  -> EXTERN: (118,24) CONSTRUCTOR
  -> EXTERN: (120,16) REPORT_ERROR
  -> EXTERN: (120,16) __getsp_inlined
  -> EXTERN: (120,16) __getsp_inlined
  -> EXTERN: (120,16) __resetsp_inlined
  -> EXTERN: (120,16) __resetsp_inlined
  -> EXTERN: (120,53) for_concat
  -> EXTERN: (120,53) _alloca
  -> EXTERN: (120,56) for_trim
  -> EXTERN: (122,13) UPDATE_STATUS
  -> EXTERN: (125,13) __getsp_inlined
  -> EXTERN: (125,13) READ_INSTRUMENT_FILE
  -> EXTERN: (125,13) __resetsp_inlined
  -> EXTERN: (125,34) for_trim
  -> EXTERN: (125,57) _alloca
  -> EXTERN: (125,57) for_concat
  -> EXTERN: (125,59) for_trim
  -> EXTERN: (129,12) for_trim
  -> EXTERN: (129,38) for_cpstr
  -> EXTERN: (130,31) CONSTRUCTOR_MAP
  -> EXTERN: (133,11) __getsp_inlined
  -> EXTERN: (133,11) __resetsp_inlined
  -> EXTERN: (133,28) CONSTRUCTOR_MAP
  -> EXTERN: (133,51) for_trim
  -> EXTERN: (133,60) _alloca
  -> EXTERN: (133,60) for_concat
  -> EXTERN: (133,62) for_trim
  -> EXTERN: (134,11) _alloca
  -> EXTERN: (137,14) __getsp_inlined
  -> EXTERN: (137,14) __resetsp_inlined
  -> EXTERN: (140,8) for_realloc_lhs
  -> EXTERN: (141,12) for_trim
  -> EXTERN: (141,37) for_cpstr
  -> (142,16) COMM_DATA_MOD::APPLY_SOURCE_MASK (isz = 617) (sz = 628)
     [[ Inlining would exceed -inline-max-size value (628>253) <3>]]
  -> EXTERN: (142,16) __getsp_inlined
  -> EXTERN: (142,16) __resetsp_inlined
  -> EXTERN: (142,48) for_trim
  -> EXTERN: (142,71) for_concat
  -> EXTERN: (142,71) _alloca
  -> EXTERN: (142,73) for_trim
  -> EXTERN: (146,8) for_realloc_lhs
  -> EXTERN: (147,13) UPDATE_STATUS
  -> EXTERN: (148,8) for_dealloc_allocatable
  -> EXTERN: (151,21) for_trim
  -> EXTERN: (151,21) _alloca
  -> EXTERN: (151,21) memmove
  -> EXTERN: (152,14) for_cpstr
  -> EXTERN: (153,11) for_check_mult_overflow64
  -> EXTERN: (153,11) for_alloc_allocatable
  -> EXTERN: (155,33) CONSTRUCTOR
  -> EXTERN: (158,33) CONSTRUCTOR
  -> EXTERN: (160,11) for_realloc_lhs
  -> EXTERN: (161,11) for_dealloc_allocatable
  -> EXTERN: (163,16) REPORT_ERROR
  -> EXTERN: (163,16) __getsp_inlined
  -> EXTERN: (163,16) __getsp_inlined
  -> EXTERN: (163,16) __resetsp_inlined
  -> EXTERN: (163,16) __resetsp_inlined
  -> EXTERN: (163,54) for_concat
  -> EXTERN: (163,54) _alloca
  -> EXTERN: (163,57) for_trim
  -> EXTERN: (165,13) UPDATE_STATUS
  -> EXTERN: (168,22) CONSTRUCTOR
  -> EXTERN: (169,13) UPDATE_STATUS
  -> EXTERN: (172,8) for_check_mult_overflow64
  -> EXTERN: (172,8) for_alloc_allocatable
  -> EXTERN: (173,8) for_check_mult_overflow64
  -> EXTERN: (173,8) for_alloc_allocatable
  -> EXTERN: (174,8) for_check_mult_overflow64
  -> EXTERN: (174,8) for_alloc_allocatable
  -> EXTERN: (177,29) CONSTRUCTOR_MAPINFO
  -> EXTERN: (180,18) CONSTRUCTOR
  -> EXTERN: (186,31) CONSTRUCTOR_MAPINFO
  -> EXTERN: (189,21) CONSTRUCTOR
  -> EXTERN: (194,15) for_trim
  -> EXTERN: (194,51) for_cpstr
  -> EXTERN: (196,27) strcmp
  -> EXTERN: (200,20) for_trim
  -> EXTERN: (200,56) for_cpstr
  -> EXTERN: (201,39) CONSTRUCTOR
  -> EXTERN: (210,12) for_write_seq_fmt
  -> EXTERN: (210,12) for_write_seq_fmt_xmit
  -> EXTERN: (213,5) for_alloc_allocatable
  -> EXTERN: (213,5) for_check_mult_overflow64
  -> EXTERN: (213,5) for_alloc_allocatable
  -> EXTERN: (213,5) for_check_mult_overflow64
  -> EXTERN: (218,10) QUICKSORT
  -> EXTERN: (219,5) for_dealloc_allocatable
  -> (222,25) COMM_DATA_MOD::DUMP_UNIT_CONVERSION (isz = 247) (sz = 254)
     [[ Inlining would exceed -inline-max-size value (254>253) <3>]]
  -> EXTERN: (224,3) for_dealloc_allocatable
  -> EXTERN: (224,3) for_dealloc_allocatable
  -> EXTERN: (224,3) for_dealloc_allocatable
  -> EXTERN: (224,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_data_mod.f90(58,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at comm_data_mod.f90(60,5)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at comm_data_mod.f90(83,27)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(83,27)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference data_(n,:,1) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(83,27)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(131,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (131:11) and at (131:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (131:11) and at (131:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (131:11) and at (131:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_data_mod.f90(131,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=1
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(131,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference data_(n,:,:) has aligned access
         remark #15305: vectorization support: vector length 2
         remark #15399: vectorization support: unroll factor set to 4
         remark #15309: vectorization support: normalized vectorization overhead 1.000
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4 
         remark #15477: vector cost: 1.500 
         remark #15478: estimated potential speedup: 2.540 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(131,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(134,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (134:11) and at (134:11)
      remark #17106: parallel dependence: assumed FLOW dependence between at (134:11) and at (134:11)
      remark #17106: parallel dependence: assumed ANTI dependence between at (134:11) and at (134:11)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at comm_data_mod.f90(134,11)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(134,11)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15388: vectorization support: reference at (134:35) has aligned access   [ comm_data_mod.f90(134,35) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.444
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 22 
         remark #15477: vector cost: 4.500 
         remark #15478: estimated potential speedup: 4.590 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(134,11)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(134,11)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference at (134:35) has aligned access   [ comm_data_mod.f90(134,35) ]
         remark #15305: vectorization support: vector length 2
         remark #15309: vectorization support: normalized vectorization overhead 0.722
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(134,11)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(135,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (135:14) and at (135:14)
      remark #17106: parallel dependence: assumed FLOW dependence between at (135:14) and at (135:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (135:14) and at (135:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (135:14) and at (135:14)
      remark #15346: vector dependence: assumed FLOW dependence between at (135:14) and at (135:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (135:14) and at (135:14)

      LOOP BEGIN at comm_data_mod.f90(135,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference data_(n,:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.019
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 20 
         remark #15477: vector cost: 39.750 
         remark #15478: estimated potential speedup: 0.500 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(135,14)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(137,14)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between at (137:14) and at (137:14)
      remark #17106: parallel dependence: assumed FLOW dependence between at (137:14) and at (137:14)
      remark #17106: parallel dependence: assumed ANTI dependence between at (137:14) and at (137:14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between at (137:14) and at (137:14)
      remark #15346: vector dependence: assumed FLOW dependence between at (137:14) and at (137:14)
      remark #15346: vector dependence: assumed ANTI dependence between at (137:14) and at (137:14)

      LOOP BEGIN at comm_data_mod.f90(137,14)
         remark #17108: loop was not parallelized: insufficient computational work
         remark #15389: vectorization support: reference data_(n,:,:) has unaligned access
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.019
         remark #15450: unmasked unaligned unit stride loads: 1 
         remark #15457: masked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 21 
         remark #15477: vector cost: 39.750 
         remark #15478: estimated potential speedup: 0.520 
         remark #15488: --- end vector cost summary ---
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at comm_data_mod.f90(137,14)
      <Remainder>
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(140,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (140:8) and MASK_MISSPIX(:,:) (140:8)
      remark #17106: parallel dependence: assumed ANTI dependence between MASK_MISSPIX(:,:) (140:8) and data_(n,:,:) (140:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (140:8) and MASK_MISSPIX(:,:) (140:8)
      remark #15346: vector dependence: assumed ANTI dependence between MASK_MISSPIX(:,:) (140:8) and data_(n,:,:) (140:8)

      LOOP BEGIN at comm_data_mod.f90(140,8)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (140:8) and MASK_MISSPIX(:,:) (140:8)
         remark #17106: parallel dependence: assumed ANTI dependence between MASK_MISSPIX(:,:) (140:8) and data_(n,:,:) (140:8)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (140:8) and MASK_MISSPIX(:,:) (140:8)
         remark #15346: vector dependence: assumed ANTI dependence between MASK_MISSPIX(:,:) (140:8) and data_(n,:,:) (140:8)
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(145,27)
   <Peeled loop for vectorization>
      remark #25015: Estimate of max trip count of loop=1
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(145,27)
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference data_(n,:,1) has aligned access
      remark #15305: vectorization support: vector length 2
      remark #15399: vectorization support: unroll factor set to 4
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 2.540 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(145,27)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(146,8)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
      remark #17106: parallel dependence: assumed ANTI dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
      remark #15346: vector dependence: assumed ANTI dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)

      LOOP BEGIN at comm_data_mod.f90(146,8)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
         remark #17106: parallel dependence: assumed ANTI dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
         remark #15346: vector dependence: assumed ANTI dependence between data_(n,:,:) (146:8) and data_(n,:,:) (146:8)
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(160,11)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (160:11) and REGNOISE(:,:) (160:11)
      remark #17106: parallel dependence: assumed ANTI dependence between REGNOISE(:,:) (160:11) and data_(n,:,:) (160:11)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (160:11) and REGNOISE(:,:) (160:11)
      remark #15346: vector dependence: assumed ANTI dependence between REGNOISE(:,:) (160:11) and data_(n,:,:) (160:11)

      LOOP BEGIN at comm_data_mod.f90(160,11)
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between data_(n,:,:) (160:11) and REGNOISE(:,:) (160:11)
         remark #17106: parallel dependence: assumed ANTI dependence between REGNOISE(:,:) (160:11) and data_(n,:,:) (160:11)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between data_(n,:,:) (160:11) and REGNOISE(:,:) (160:11)
         remark #15346: vector dependence: assumed ANTI dependence between REGNOISE(:,:) (160:11) and data_(n,:,:) (160:11)
      LOOP END
   LOOP END

   LOOP BEGIN at comm_data_mod.f90(175,8)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at comm_data_mod.f90(196,27)
         remark #17102: loop was not parallelized: not a parallelization candidate
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at comm_data_mod.f90(214,5)
<Distributed chunk1>
   remark #25084: Preprocess Loopnests: Moving Out Store    [ comm_data_mod.f90(217,5) ]
   remark #17108: loop was not parallelized: insufficient computational work
   remark #25426: Loop Distributed (2 way) 
   remark #15388: vectorization support: reference ind_ds_(i) has aligned access   [ comm_data_mod.f90(215,8) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.333
   remark #15301: PARTIAL LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 2 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 2.650 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at comm_data_mod.f90(214,5)
<Remainder loop for vectorization, Distributed chunk1>
LOOP END

LOOP BEGIN at comm_data_mod.f90(214,5)
<Distributed chunk2>
   remark #15388: vectorization support: reference NU(i) has aligned access   [ comm_data_mod.f90(216,8) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: non-unit strided load was emulated for the variable <data_(i)>, stride is 383   [ comm_data_mod.f90(216,23) ]
   remark #15328: vectorization support: indirect load was emulated for the variable <data_(i)%NU_C>, 64-bit indexed, part of address is read from memory   [ comm_data_mod.f90(216,8) ]
   remark #15305: vectorization support: vector length 2
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15452: unmasked strided loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 5.000 
   remark #15478: estimated potential speedup: 1.000 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 8  
LOOP END

LOOP BEGIN at comm_data_mod.f90(214,5)
<Remainder, Distributed chunk2>
   remark #25436: completely unrolled by 7  
LOOP END

    Report from: Code generation optimizations [cg]

comm_data_mod.f90(53,61):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(53,51):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(52,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(53,46):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(58,5):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_data_mod.f90(58,5):remark #34026: call to memcpy implemented as a call to optimized library version
comm_data_mod.f90(64,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_data_mod.f90(64,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_data_mod.f90(64,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_data_mod.f90(66,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_data_mod.f90(66,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_data_mod.f90(66,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_data_mod.f90(71,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_data_mod.f90(71,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to increase the width of stores
comm_data_mod.f90(71,8):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (1, 0)
comm_data_mod.f90(116,21):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_data_mod.f90(116,21):remark #34026: call to memmove implemented as a call to optimized library version
comm_data_mod.f90(151,21):remark #34014: optimization advice for memmove: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
comm_data_mod.f90(151,21):remark #34026: call to memmove implemented as a call to optimized library version
comm_data_mod.f90(195,14):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to increase the width of loads
comm_data_mod.f90(195,14):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(196,27):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
comm_data_mod.f90(42,14):remark #34051: REGISTER ALLOCATION : [comm_data_mod_mp_initialize_data_mod_] comm_data_mod.f90:42

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :    2325
            Global    :     435
            Local     :    1890
        Regenerable   :     422
        Spilled       :      77
        
    Routine stack
        Variables     :   17248 bytes*
            Reads     :     244 [4.31e+02 ~ 3.7%]
            Writes    :     334 [7.58e+02 ~ 6.4%]
        Spills        :     568 bytes*
            Reads     :     137 [2.90e+02 ~ 2.5%]
            Writes    :      89 [9.89e+01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

<2> The compiler's heuristics predict that it is not profitable to inline the
    call.  Add "!DIR$ATTRIBUTES FORCEINLINE" to the declaration of the called 
    subprogram, or add "!DIR$ FORCEINLINE" before the call site.

<3> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

