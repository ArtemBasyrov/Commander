Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: hashtbl._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (hashtbl._) [1/9=11.1%] hashtbl.f90(24,8)


    Report from: Code generation optimizations [cg]

hashtbl.f90(24,8):remark #34051: REGISTER ALLOCATION : [hashtbl._] hashtbl.f90:24

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::SUM_STRING

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::SUM_STRING) [2/9=22.2%] hashtbl.f90(124,22)
  -> EXTERN: (124,22) _alloca
  -> EXTERN: (124,22) __getsp_inlined
  -> EXTERN: (131,8) memcpy


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hashtbl.f90(131,8)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference tmp(:) has aligned access
   remark #15389: vectorization support: reference str(:) has unaligned access   [ hashtbl.f90(131,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 10.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(131,8)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at hashtbl.f90(133,11)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference tmp(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.830 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(133,11)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

hashtbl.f90(124,22):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_sum_string_] hashtbl.f90:124

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rsi rdi zmm0-zmm3]
        
    Routine temporaries
        Total         :      44
            Global    :      20
            Local     :      24
        Regenerable   :       4
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::PUT_HASH_TBL_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::PUT_HASH_TBL_SLL) [3/9=33.3%] hashtbl.f90(137,14)
  -> INLINE: (142,16) HASHTBL::SUM_STRING (isz = 77) (sz = 84)
    -> EXTERN: (124,22) __getsp_inlined
    -> EXTERN: (124,22) _alloca
    -> EXTERN: (131,8) memcpy
  -> (143,10) HASHTBL::PUT_SLL (isz = 687) (sz = 700)
     [[ Inlining would exceed -inline-max-size value (700>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hashtbl.f90(131,8) inlined into hashtbl.f90(142,16)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference TMP(:) has aligned access
   remark #15389: vectorization support: reference key(:) has unaligned access   [ hashtbl.f90(131,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 10.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(131,8) inlined into hashtbl.f90(142,16)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at hashtbl.f90(133,11) inlined into hashtbl.f90(142,16)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference TMP(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.830 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(133,11) inlined into hashtbl.f90(142,16)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

hashtbl.f90(137,14):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_put_hash_tbl_sll_] hashtbl.f90:137

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r11 r14-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      67
            Global    :      27
            Local     :      40
        Regenerable   :       7
        Spilled       :       3
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [1.40e+01 ~ 5.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::PUT_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::PUT_SLL) [4/9=44.4%] hashtbl.f90(52,24)
  -> EXTERN: (60,21) for_cpstr
  -> EXTERN: (61,47) for_allocate
  -> (62,16) HASHTBL::PUT_SLL (isz = 687) (sz = 700)
     [[ Callee not marked with inlining directive  <2>]]
  -> EXTERN: (66,13) for_check_mult_overflow64
  -> EXTERN: (66,13) for_alloc_allocatable
  -> EXTERN: (67,8) memcpy
  -> EXTERN: (67,8) for_alloc_allocatable
  -> EXTERN: (67,8) for_dealloc_allocatable
  -> EXTERN: (68,33) for_dealloc_allocatable
  -> EXTERN: (69,8) for_alloc_allocatable
  -> EXTERN: (69,8) for_check_mult_overflow64
  -> EXTERN: (70,8) memcpy
  -> EXTERN: (70,8) for_alloc_allocatable
  -> EXTERN: (70,8) for_dealloc_allocatable


    Report from: Code generation optimizations [cg]

hashtbl.f90(67,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(67,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(67,8):remark #34026: call to memcpy implemented as a call to optimized library version
hashtbl.f90(70,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(70,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(70,8):remark #34026: call to memcpy implemented as a call to optimized library version
hashtbl.f90(52,24):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_put_sll_] hashtbl.f90:52

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     304
            Global    :      34
            Local     :     270
        Regenerable   :      19
        Spilled       :      10
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       2 [6.44e-01 ~ 0.5%]
            Writes    :      14 [4.93e+00 ~ 3.8%]
        Spills        :      40 bytes*
            Reads     :       5 [4.96e-01 ~ 0.4%]
            Writes    :       5 [4.96e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::GET_HASH_TBL_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::GET_HASH_TBL_SLL) [5/9=55.6%] hashtbl.f90(147,14)
  -> EXTERN: (147,39) for_deallocate
  -> INLINE: (153,16) HASHTBL::SUM_STRING (isz = 77) (sz = 84)
    -> EXTERN: (124,22) __getsp_inlined
    -> EXTERN: (124,22) _alloca
    -> EXTERN: (131,8) memcpy
  -> (154,10) HASHTBL::GET_SLL (isz = 445) (sz = 456)
     [[ Inlining would exceed -inline-max-size value (456>230) <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hashtbl.f90(131,8) inlined into hashtbl.f90(153,16)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference TMP(:) has aligned access
   remark #15389: vectorization support: reference key(:) has unaligned access   [ hashtbl.f90(131,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.600
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 0.310 
   remark #15478: estimated potential speedup: 10.900 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(131,8) inlined into hashtbl.f90(153,16)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at hashtbl.f90(133,11) inlined into hashtbl.f90(153,16)
   remark #17108: loop was not parallelized: insufficient computational work
   remark #15388: vectorization support: reference TMP(:) has aligned access
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 2.833
   remark #15300: LOOP WAS VECTORIZED
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 1.830 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at hashtbl.f90(133,11) inlined into hashtbl.f90(153,16)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

hashtbl.f90(147,14):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_get_hash_tbl_sll_] hashtbl.f90:147

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      69
            Global    :      27
            Local     :      42
        Regenerable   :       8
        Spilled       :       5
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [1.40e+01 ~ 5.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::GET_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::GET_SLL) [6/9=66.7%] hashtbl.f90(75,24)
  -> EXTERN: (75,41) for_deallocate
  -> EXTERN: (82,45) for_cpstr
  -> EXTERN: (84,28) for_dealloc_allocatable
  -> EXTERN: (85,8) for_check_mult_overflow64
  -> EXTERN: (85,8) for_alloc_allocatable
  -> EXTERN: (86,8) for_alloc_allocatable
  -> EXTERN: (86,8) for_dealloc_allocatable
  -> EXTERN: (86,8) memcpy
  -> (88,13) HASHTBL::GET_SLL (isz = 445) (sz = 456)
     [[ Callee not marked with inlining directive  <2>]]
  -> EXTERN: (90,28) for_dealloc_allocatable


    Report from: Code generation optimizations [cg]

hashtbl.f90(86,8):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(86,8):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
hashtbl.f90(86,8):remark #34026: call to memcpy implemented as a call to optimized library version
hashtbl.f90(75,24):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_get_sll_] hashtbl.f90:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   13[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :     213
            Global    :      25
            Local     :     188
        Regenerable   :      14
        Spilled       :       6
        
    Routine stack
        Variables     :     136 bytes*
            Reads     :       1 [2.00e-02 ~ 0.0%]
            Writes    :      14 [1.14e+01 ~ 12.3%]
        Spills        :       8 bytes*
            Reads     :       1 [3.39e-02 ~ 0.0%]
            Writes    :       1 [3.39e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::FREE_HASH_TBL_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::FREE_HASH_TBL_SLL) [7/9=77.8%] hashtbl.f90(158,14)
  -> INLINE: (166,16) HASHTBL::FREE_SLL (isz = 278) (sz = 283)
    -> (99,13) HASHTBL::FREE_SLL (isz = 278) (sz = 283)
       [[ Callee not marked with inlining directive  <2>]]
    -> EXTERN: (100,8) for_deallocate_all
    -> EXTERN: (103,30) for_dealloc_allocatable
    -> EXTERN: (104,30) for_dealloc_allocatable
  -> EXTERN: (168,8) for_deallocate_all


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hashtbl.f90(165,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed ANTI dependence between tbl (166:16) and at (104:30)
   remark #17106: parallel dependence: assumed FLOW dependence between at (104:30) and tbl (166:16)
   remark #15382: vectorization support: call to function HASHTBL::FREE_SLL cannot be vectorized   [ hashtbl.f90(99,13) ]
   remark #15382: vectorization support: call to function for_deallocate_all cannot be vectorized   [ hashtbl.f90(100,8) ]
   remark #15382: vectorization support: call to function for_dealloc_allocatable cannot be vectorized   [ hashtbl.f90(103,30) ]
   remark #15382: vectorization support: call to function for_dealloc_allocatable cannot be vectorized   [ hashtbl.f90(104,30) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between tbl (166:16) and at (104:30)
   remark #15346: vector dependence: assumed FLOW dependence between at (104:30) and tbl (166:16)
LOOP END

    Report from: Code generation optimizations [cg]

hashtbl.f90(158,14):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_free_hash_tbl_sll_] hashtbl.f90:158

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     137
            Global    :      21
            Local     :     116
        Regenerable   :      12
        Spilled       :       7
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      15 [5.20e-01 ~ 0.6%]
        Spills        :      48 bytes*
            Reads     :       6 [1.34e-01 ~ 0.2%]
            Writes    :       6 [1.34e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::FREE_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::FREE_SLL) [8/9=88.9%] hashtbl.f90(96,24)
  -> (99,13) HASHTBL::FREE_SLL (isz = 278) (sz = 283)
     [[ Callee not marked with inlining directive  <2>]]
  -> EXTERN: (100,8) for_deallocate_all
  -> EXTERN: (103,30) for_dealloc_allocatable
  -> EXTERN: (104,30) for_dealloc_allocatable


    Report from: Code generation optimizations [cg]

hashtbl.f90(96,24):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_free_sll_] hashtbl.f90:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    7[ rax rdx rcx rbx rsi rdi r15]
        
    Routine temporaries
        Total         :      89
            Global    :      14
            Local     :      75
        Regenerable   :       9
        Spilled       :       2
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      14 [2.87e+00 ~ 3.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: HASHTBL::INIT_HASH_TBL_SLL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (HASHTBL::INIT_HASH_TBL_SLL) [9/9=100.0%] hashtbl.f90(107,14)
  -> EXTERN: (111,29) for_deallocate_all
  -> EXTERN: (113,8) for_check_mult_overflow64
  -> EXTERN: (113,8) for_alloc_allocatable
  -> EXTERN: (116,8) for_alloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at hashtbl.f90(113,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at hashtbl.f90(116,8)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

hashtbl.f90(107,14):remark #34051: REGISTER ALLOCATION : [hashtbl_mp_init_hash_tbl_sll_] hashtbl.f90:107

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     179
            Global    :      54
            Local     :     125
        Regenerable   :      17
        Spilled       :      20
        
    Routine stack
        Variables     :       8 bytes*
            Reads     :       2 [8.00e-01 ~ 0.3%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :     120 bytes*
            Reads     :      30 [1.84e+01 ~ 7.7%]
            Writes    :      16 [1.51e+01 ~ 6.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The subprogram is larger than the inliner would normally inline.  Use the
    option -inline-max-size to increase the size of any subprogram that would
    normally be inlined, add "!DIR$ATTRIBUTES FORCEINLINE" to the
    declaration of the called function, or add "!DIR$ FORCEINLINE" before
    the call site.

<2> The compiler's heuristics indicate that the subprogram is not profitable to 
    inline.  Override this decision by adding "!DIR$ATTRIBUTES FORCEINLINE" 
    to the declaration of the called subprogram, or add "!DIR$ FORCEINLINE" 
    before the call site.

