Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) Fortran Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -I/mn/stornext/u3/hke/owl/local/src/dagsshealpix/include -I/mn/stornext/u3/hke/owl/local/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -I/astro/local/opt/Intel/compilers_and_libraries_2018.3.222/linux/mpi/intel64/include -O3 -traceback -qopenmp -qopt-report=5 -parallel -c

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: comm_f_int_0d_mod._

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (comm_f_int_0d_mod._) [1/3=33.3%] comm_F_int_0D_mod.f90(1,8)


    Report from: Code generation optimizations [cg]

comm_F_int_0D_mod.f90(1,8):remark #34051: REGISTER ALLOCATION : [comm_f_int_0d_mod._] comm_F_int_0D_mod.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    0[ reg_null]
        
    Routine temporaries
        Total         :       6
            Global    :       0
            Local     :       6
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_F_INT_0D_MOD::CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_F_INT_0D_MOD::CONSTRUCTOR) [2/3=66.7%] comm_F_int_0D_mod.f90(27,12)
  -> EXTERN: (37,5) for_allocate
  -> EXTERN: (44,8) for_alloc_allocatable
  -> EXTERN: (44,8) for_check_mult_overflow64
  -> INDIRECT-: (46,18)  (*((P64*) *((P64*) (comm_f_int_0d_mod_mp_constructor_$COMP_V$1169.0.2 + 56(SI64)))))[6(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> INDIRECT-: (48,32)  (*((P64*) *((P64*) (comm_f_int_0d_mod_mp_constructor_$BP_V$116a.0.2 + 56(SI64)))))[2(SI64)]
     [[ Unable to inline indirect callsite  <1>]]
  -> EXTERN: (49,8) for_dealloc_allocatable
  -> EXTERN: (52,3) for_dealloc_allocatable


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at comm_F_int_0D_mod.f90(45,8)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15382: vectorization support: call to function (Indirect call) cannot be vectorized   [ comm_F_int_0D_mod.f90(46,18) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

    Report from: Code generation optimizations [cg]

comm_F_int_0D_mod.f90(35,44):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (16, 0)
comm_F_int_0D_mod.f90(27,12):remark #34051: REGISTER ALLOCATION : [comm_f_int_0d_mod_mp_constructor_] comm_F_int_0D_mod.f90:27

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     168
            Global    :      28
            Local     :     140
        Regenerable   :      20
        Spilled       :       8
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       8 [1.72e+00 ~ 2.2%]
            Writes    :      17 [5.80e+00 ~ 7.3%]
        Spills        :      24 bytes*
            Reads     :       3 [5.41e-01 ~ 0.7%]
            Writes    :       3 [2.15e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: COMM_F_INT_0D_MOD::EVALINTF

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (COMM_F_INT_0D_MOD::EVALINTF) [3/3=100.0%] comm_F_int_0D_mod.f90(56,12)


    Report from: Code generation optimizations [cg]

comm_F_int_0D_mod.f90(56,12):remark #34051: REGISTER ALLOCATION : [comm_f_int_0d_mod_mp_evalintf_] comm_F_int_0D_mod.f90:56

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rsi rdi zmm0]
        
    Routine temporaries
        Total         :      12
            Global    :       0
            Local     :      12
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The indirectly called subprogram must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

